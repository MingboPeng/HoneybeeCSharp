// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 15.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Ironbug.PythonConverter
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Users\Mingbo\Documents\GitHub\Ironbug\src\Ironbug.PythonConverter\PyModuleDescription.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public partial class PyModuleDescription : PyModuleDescriptionBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("//Generated by Ironbug.PythonConverter\r\nnamespace ");
            
            #line 7 "C:\Users\Mingbo\Documents\GitHub\Ironbug\src\Ironbug.PythonConverter\PyModuleDescription.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Namespace));
            
            #line default
            #line hidden
            this.Write("\r\n{\r\n\t// this is a default static class for holding Valuables and Functions\r\n\tpub" +
                    "lic static class ");
            
            #line 10 "C:\Users\Mingbo\Documents\GitHub\Ironbug\src\Ironbug.PythonConverter\PyModuleDescription.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModuleName));
            
            #line default
            #line hidden
            this.Write("\r\n\t{\r\n");
            
            #line 12 "C:\Users\Mingbo\Documents\GitHub\Ironbug\src\Ironbug.PythonConverter\PyModuleDescription.tt"
  
		//###########################################################################################//
		//#################################  Valuables #############################################//
		//###########################################################################################//
		//###########################################################################################//
		//START: Generate Valuables
		foreach (var pyValuables in Valuables){

            
            #line default
            #line hidden
            this.Write("\t\t// this is a Valuables\r\n\t\t");
            
            #line 21 "C:\Users\Mingbo\Documents\GitHub\Ironbug\src\Ironbug.PythonConverter\PyModuleDescription.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pyValuables.Type));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 21 "C:\Users\Mingbo\Documents\GitHub\Ironbug\src\Ironbug.PythonConverter\PyModuleDescription.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pyValuables.NameCS));
            
            #line default
            #line hidden
            this.Write(" = ");
            
            #line 21 "C:\Users\Mingbo\Documents\GitHub\Ironbug\src\Ironbug.PythonConverter\PyModuleDescription.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pyValuables.DefaultValue));
            
            #line default
            #line hidden
            this.Write(";\r\n\r\n");
            
            #line 23 "C:\Users\Mingbo\Documents\GitHub\Ironbug\src\Ironbug.PythonConverter\PyModuleDescription.tt"
 
		}

		//END: Generate Valuables

		//###########################################################################################//
		//################################  Functions  ##############################################//
		//###########################################################################################//
		//###########################################################################################//
		//START: Generate Functions

            
            #line default
            #line hidden
            this.Write("\r\n\r\n");
            
            #line 36 "C:\Users\Mingbo\Documents\GitHub\Ironbug\src\Ironbug.PythonConverter\PyModuleDescription.tt"
 
		foreach (var pyFunctions in Functions)
		{
			string methodName = pyFunctions.Name;
			string methodNameCS = pyFunctions.NameCS;
			string methodType = pyFunctions.Type;
			bool ifReturn = pyFunctions.IfReturn;
			bool ifOverride = pyFunctions.IfOverride;
			var arguments = pyFunctions.Arguments;

			string returnType = pyFunctions.ReturnType;
			string overrideMark = pyFunctions.OverrideMark;


			var argumentNames = from item in arguments select item.NameCS;
			var argumentNamesWithTypeAndDefault = from item in arguments select item.TypeNameValue; 

			string argumentString = string.Join(", ",argumentNames);
			string argumentStringWithType = string.Join(", ",argumentNamesWithTypeAndDefault);

            
            #line default
            #line hidden
            this.Write("\t\t// this is a Function\r\n\t\tpublic static ");
            
            #line 57 "C:\Users\Mingbo\Documents\GitHub\Ironbug\src\Ironbug.PythonConverter\PyModuleDescription.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(returnType));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 57 "C:\Users\Mingbo\Documents\GitHub\Ironbug\src\Ironbug.PythonConverter\PyModuleDescription.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(methodNameCS));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 57 "C:\Users\Mingbo\Documents\GitHub\Ironbug\src\Ironbug.PythonConverter\PyModuleDescription.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(argumentStringWithType));
            
            #line default
            #line hidden
            this.Write(")\r\n\t\t{\r\n");
            
            #line 59 "C:\Users\Mingbo\Documents\GitHub\Ironbug\src\Ironbug.PythonConverter\PyModuleDescription.tt"
 
			if (ifReturn)
			{

            
            #line default
            #line hidden
            this.Write("\t\t\treturn base.");
            
            #line 63 "C:\Users\Mingbo\Documents\GitHub\Ironbug\src\Ironbug.PythonConverter\PyModuleDescription.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(methodName));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 63 "C:\Users\Mingbo\Documents\GitHub\Ironbug\src\Ironbug.PythonConverter\PyModuleDescription.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(argumentString));
            
            #line default
            #line hidden
            this.Write(");\r\n");
            
            #line 64 "C:\Users\Mingbo\Documents\GitHub\Ironbug\src\Ironbug.PythonConverter\PyModuleDescription.tt"
 
			}else
			{

            
            #line default
            #line hidden
            this.Write("\t\t\tbase.");
            
            #line 68 "C:\Users\Mingbo\Documents\GitHub\Ironbug\src\Ironbug.PythonConverter\PyModuleDescription.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(methodName));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 68 "C:\Users\Mingbo\Documents\GitHub\Ironbug\src\Ironbug.PythonConverter\PyModuleDescription.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(argumentString));
            
            #line default
            #line hidden
            this.Write(");\r\n");
            
            #line 69 "C:\Users\Mingbo\Documents\GitHub\Ironbug\src\Ironbug.PythonConverter\PyModuleDescription.tt"
 
			}

            
            #line default
            #line hidden
            this.Write("\t\t}\r\n\r\n");
            
            #line 74 "C:\Users\Mingbo\Documents\GitHub\Ironbug\src\Ironbug.PythonConverter\PyModuleDescription.tt"
 
		}

            
            #line default
            #line hidden
            this.Write("\t}//end of default static class\r\n\r\n");
            
            #line 79 "C:\Users\Mingbo\Documents\GitHub\Ironbug\src\Ironbug.PythonConverter\PyModuleDescription.tt"
 

	//END: Generate Valuables

	//###########################################################################################//
	//###########################################################################################//
	//###########################################################################################//
	//###########################################################################################//
	//START: Generate classes
	foreach (var pyClass in Classes){

            
            #line default
            #line hidden
            this.Write("\t// this is a class\r\n\tpublic class ");
            
            #line 91 "C:\Users\Mingbo\Documents\GitHub\Ironbug\src\Ironbug.PythonConverter\PyModuleDescription.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pyClass.NameCS));
            
            #line default
            #line hidden
            this.Write(" : ");
            
            #line 91 "C:\Users\Mingbo\Documents\GitHub\Ironbug\src\Ironbug.PythonConverter\PyModuleDescription.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pyClass.BaseClassNamesString));
            
            #line default
            #line hidden
            this.Write("\r\n    {\r\n");
            
            #line 93 "C:\Users\Mingbo\Documents\GitHub\Ironbug\src\Ironbug.PythonConverter\PyModuleDescription.tt"
 
		//START: Generate properties.  
		foreach (var pyProperty in pyClass.Properties){

            
            #line default
            #line hidden
            this.Write("\t\t// this is a class Property\r\n\t\tpublic object ");
            
            #line 98 "C:\Users\Mingbo\Documents\GitHub\Ironbug\src\Ironbug.PythonConverter\PyModuleDescription.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pyProperty.NameCS));
            
            #line default
            #line hidden
            this.Write("\r\n\t\t{\r\n\t\t\tget { return this.RawObj.");
            
            #line 100 "C:\Users\Mingbo\Documents\GitHub\Ironbug\src\Ironbug.PythonConverter\PyModuleDescription.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pyProperty.Name));
            
            #line default
            #line hidden
            this.Write("; }\r\n\t\t\tset { this.RawObj.");
            
            #line 101 "C:\Users\Mingbo\Documents\GitHub\Ironbug\src\Ironbug.PythonConverter\PyModuleDescription.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pyProperty.Name));
            
            #line default
            #line hidden
            this.Write(" = value; }\r\n\t\t}\r\n\r\n");
            
            #line 104 "C:\Users\Mingbo\Documents\GitHub\Ironbug\src\Ironbug.PythonConverter\PyModuleDescription.tt"
 
		}//END: Generate properties.  

		//START: Generate methods.  
		foreach (var pyMethod in pyClass.Methods){
			string methodName = pyMethod.Name;
			string methodNameCS = pyMethod.NameCS;
			string methodType = pyMethod.Type;
			bool ifReturn = pyMethod.IfReturn;
			bool ifOverride = pyMethod.IfOverride;
			var arguments = pyMethod.Arguments;

			string returnType = pyMethod.ReturnType;
			string overrideMark = pyMethod.OverrideMark;


			var argumentNames = from item in arguments select item.NameCS;
			var argumentNamesWithTypeAndDefault = from item in arguments select item.TypeNameValue; 

			string argumentString = string.Join(", ",argumentNames);
			string argumentStringWithType = string.Join(", ",argumentNamesWithTypeAndDefault);

            if (methodType == "Constructor")
            {

            
            #line default
            #line hidden
            this.Write("\t\t// this is a class constructor\r\n\t\tpublic ");
            
            #line 130 "C:\Users\Mingbo\Documents\GitHub\Ironbug\src\Ironbug.PythonConverter\PyModuleDescription.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pyClass.NameCS));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 130 "C:\Users\Mingbo\Documents\GitHub\Ironbug\src\Ironbug.PythonConverter\PyModuleDescription.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(argumentStringWithType));
            
            #line default
            #line hidden
            this.Write(")\r\n\t\t{\r\n\t\t\tPythonEngine engine = new PythonEngine();\r\n\t\t\tdynamic pyModule = engin" +
                    "e.ImportFrom(From: \"");
            
            #line 133 "C:\Users\Mingbo\Documents\GitHub\Ironbug\src\Ironbug.PythonConverter\PyModuleDescription.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            
            #line default
            #line hidden
            this.Write("\", Import: \"");
            
            #line 133 "C:\Users\Mingbo\Documents\GitHub\Ironbug\src\Ironbug.PythonConverter\PyModuleDescription.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pyClass.Name));
            
            #line default
            #line hidden
            this.Write("\");\r\n\r\n\t\t\tif (pyModule != null)\r\n\t\t\t{\r\n\t\t\t\tthis.RawObj = pyModule(");
            
            #line 137 "C:\Users\Mingbo\Documents\GitHub\Ironbug\src\Ironbug.PythonConverter\PyModuleDescription.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(argumentString));
            
            #line default
            #line hidden
            this.Write(");\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n");
            
            #line 142 "C:\Users\Mingbo\Documents\GitHub\Ironbug\src\Ironbug.PythonConverter\PyModuleDescription.tt"
 
            }else
            {

            
            #line default
            #line hidden
            this.Write("\t\t// this is a class method\r\n\t\tpublic ");
            
            #line 147 "C:\Users\Mingbo\Documents\GitHub\Ironbug\src\Ironbug.PythonConverter\PyModuleDescription.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(overrideMark));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 147 "C:\Users\Mingbo\Documents\GitHub\Ironbug\src\Ironbug.PythonConverter\PyModuleDescription.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(returnType));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 147 "C:\Users\Mingbo\Documents\GitHub\Ironbug\src\Ironbug.PythonConverter\PyModuleDescription.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(methodNameCS));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 147 "C:\Users\Mingbo\Documents\GitHub\Ironbug\src\Ironbug.PythonConverter\PyModuleDescription.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(argumentStringWithType));
            
            #line default
            #line hidden
            this.Write(")\r\n\t\t{\r\n");
            
            #line 149 "C:\Users\Mingbo\Documents\GitHub\Ironbug\src\Ironbug.PythonConverter\PyModuleDescription.tt"
 
			if (ifReturn)
			{

            
            #line default
            #line hidden
            this.Write("\t\t\treturn base.");
            
            #line 153 "C:\Users\Mingbo\Documents\GitHub\Ironbug\src\Ironbug.PythonConverter\PyModuleDescription.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(methodName));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 153 "C:\Users\Mingbo\Documents\GitHub\Ironbug\src\Ironbug.PythonConverter\PyModuleDescription.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(argumentString));
            
            #line default
            #line hidden
            this.Write(");\r\n");
            
            #line 154 "C:\Users\Mingbo\Documents\GitHub\Ironbug\src\Ironbug.PythonConverter\PyModuleDescription.tt"
 
            }else
            {

            
            #line default
            #line hidden
            this.Write("\t\t\tbase.");
            
            #line 158 "C:\Users\Mingbo\Documents\GitHub\Ironbug\src\Ironbug.PythonConverter\PyModuleDescription.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(methodName));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 158 "C:\Users\Mingbo\Documents\GitHub\Ironbug\src\Ironbug.PythonConverter\PyModuleDescription.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(argumentString));
            
            #line default
            #line hidden
            this.Write(");\r\n");
            
            #line 159 "C:\Users\Mingbo\Documents\GitHub\Ironbug\src\Ironbug.PythonConverter\PyModuleDescription.tt"
 
            }

            
            #line default
            #line hidden
            this.Write("\t\t}\r\n");
            
            #line 163 "C:\Users\Mingbo\Documents\GitHub\Ironbug\src\Ironbug.PythonConverter\PyModuleDescription.tt"

            }
		}//END: Generate methods.  

            
            #line default
            #line hidden
            this.Write("\r\n\r\n\r\n\r\n    }\r\n");
            
            #line 172 "C:\Users\Mingbo\Documents\GitHub\Ironbug\src\Ironbug.PythonConverter\PyModuleDescription.tt"
 
	}//END: Generate classes

            
            #line default
            #line hidden
            this.Write("\r\n\r\n\r\n} //namespace\r\n\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public class PyModuleDescriptionBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
