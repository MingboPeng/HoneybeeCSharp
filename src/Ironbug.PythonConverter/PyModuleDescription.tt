<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
//Generated by Ironbug.PythonConverter
namespace <#= Namespace #>
{
	// this is a default static class for holding Valuables and Functions
	public static class <#=ModuleName#>
	{
<#  
		//###########################################################################################//
		//#################################  Valuables #############################################//
		//###########################################################################################//
		//###########################################################################################//
		//START: Generate Valuables
		foreach (var pyValuables in Valuables){
#>
		// this is a Valuables
		<#= pyValuables.Type #> <#= pyValuables.NameCS #> = <#= pyValuables.DefaultValue #>;

<# 
		}

		//END: Generate Valuables

		//###########################################################################################//
		//################################  Functions  ##############################################//
		//###########################################################################################//
		//###########################################################################################//
		//START: Generate Functions
#>


<# 
		foreach (var pyFunctions in Functions)
		{
			string methodName = pyFunctions.Name;
			string methodNameCS = pyFunctions.NameCS;
			string methodType = pyFunctions.Type;
			bool ifReturn = pyFunctions.IfReturn;
			bool ifOverride = pyFunctions.IfOverride;
			var arguments = pyFunctions.Arguments;

			string returnType = pyFunctions.ReturnType;
			string overrideMark = pyFunctions.OverrideMark;


			var argumentNames = from item in arguments select item.NameCS;
			var argumentNamesWithTypeAndDefault = from item in arguments select item.TypeNameValue; 

			string argumentString = string.Join(", ",argumentNames);
			string argumentStringWithType = string.Join(", ",argumentNamesWithTypeAndDefault);
#>
		// this is a Function
		public static <#=returnType #> <#=methodNameCS #>(<#=argumentStringWithType #>)
		{
<# 
			if (ifReturn)
			{
#>
			return base.<#=methodName#>(<#=argumentString #>);
<# 
			}else
			{
#>
			base.<#=methodName#>(<#=argumentString #>);
<# 
			}
#>
		}

<# 
		}
#>
	}//end of default static class

<# 

	//END: Generate Valuables

	//###########################################################################################//
	//###########################################################################################//
	//###########################################################################################//
	//###########################################################################################//
	//START: Generate classes
	foreach (var pyClass in Classes){
#>
	// this is a class
	public class <#= pyClass.NameCS #> : <#= pyClass.BaseClassNamesString #>
    {
<# 
		//START: Generate properties.  
		foreach (var pyProperty in pyClass.Properties){
#>
		// this is a class Property
		public object <#= pyProperty.NameCS #>
		{
			get { return this.RawObj.<#= pyProperty.Name #>; }
			set { this.RawObj.<#= pyProperty.Name #> = value; }
		}

<# 
		}//END: Generate properties.  

		//START: Generate methods.  
		foreach (var pyMethod in pyClass.Methods){
			string methodName = pyMethod.Name;
			string methodNameCS = pyMethod.NameCS;
			string methodType = pyMethod.Type;
			bool ifReturn = pyMethod.IfReturn;
			bool ifOverride = pyMethod.IfOverride;
			var arguments = pyMethod.Arguments;

			string returnType = pyMethod.ReturnType;
			string overrideMark = pyMethod.OverrideMark;


			var argumentNames = from item in arguments select item.NameCS;
			var argumentNamesWithTypeAndDefault = from item in arguments select item.TypeNameValue; 

			string argumentString = string.Join(", ",argumentNames);
			string argumentStringWithType = string.Join(", ",argumentNamesWithTypeAndDefault);

            if (methodType == "Constructor")
            {
#>
		// this is a class constructor
		public <#= pyClass.NameCS #>(<#=argumentStringWithType #>)
		{
			PythonEngine engine = new PythonEngine();
			dynamic pyModule = engine.ImportFrom(From: "<#= Name #>", Import: "<#=pyClass.Name#>");

			if (pyModule != null)
			{
				this.RawObj = pyModule(<#=argumentString #>);
			}

		}

<# 
            }else
            {
#>
		// this is a class method
		public <#=overrideMark #> <#=returnType #> <#=methodNameCS #>(<#=argumentStringWithType #>)
		{
<# 
			if (ifReturn)
			{
#>
			return base.<#=methodName#>(<#=argumentString #>);
<# 
            }else
            {
#>
			base.<#=methodName#>(<#=argumentString #>);
<# 
            }
#>
		}
<#
            }
		}//END: Generate methods.  
#>




    }
<# 
	}//END: Generate classes
#>



} //namespace

