<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
namespace <#= Namespace #>
{

<#
	//START: Generate classes
	foreach (var pyClass in Classes){
#>
	// this is a class
	public class <#= CheckName(pyClass.Name) #> : <#= CheckName(pyClass.BaseClassNamesString) #>
    {
<# 
		//START: Generate properties.  
		foreach (dynamic pyProperty in pyClass.Properties){
#>
		// this is a class Property
		public object <#= UpperInitial(pyProperty) #>
		{
			get { return this.RawObj.<#= pyProperty #>; }
			set { this.RawObj.<#= pyProperty #> = value; }
		}

<# 
		}//END: Generate properties.  

		//START: Generate methods.  
		foreach (dynamic pyMethod in pyClass.Methods){
			string methodName = pyMethod["Name"];
			string methodType = pyMethod["Type"];
			bool ifReturn = pyMethod["IfReturn"];
			bool ifOverride = pyMethod["IfOverride"];
			var arguments = pyMethod["Arguments"] as IList<dynamic>;

			
			string returnType = ReturnType(ifReturn);
			string overrideMark = CheckOverride(ifOverride);
			var argumentNames = from item in arguments select item["Name"]; 
			var argumentNamesWithType = from item in arguments select ( item["Type"]+" "+item["Name"]); 
			//var argumentNamesWithTypeAndDefault = arguments.Select(item => item["Type"]+" "+item["Name"] +"="); //TODO: add arguments with default values

			string argumentString = string.Join(",",argumentNames);
			string argumentStringWithType = string.Join(",",argumentNamesWithType);

            if (methodType == "Constructor")
            {
#>
		// this is a class constructor
		public <#= CheckName(pyClass.Name) #>(<#=argumentStringWithType #>)
		{
			PythonEngine engine = new PythonEngine();
			dynamic pyModule = engine.ImportFrom(From: "<#= Name #>", Import: "<#=Name#>");

			if (pyModule != null)
			{
				this.RawObj = pyModule(<#=argumentString #>);
			}

		}

<# 
            }else
            {
#>
		// this is a class method
		public <#=overrideMark #> <#=returnType #> <#=UpperInitial(methodName) #>(<#=argumentStringWithType #>)
		{
<# 
			if (ifOverride)
			{
#>
			return base.<#=methodName#>(<#=argumentString #>);
<# 
            }else
            {
#>
			base.<#=methodName#>(<#=argumentString #>);
<# 
            }
#>
		}
<#
            }
		}//END: Generate methods.  
#>




    }
<# 
	}//END: Generate classes
#>



} //namespace

