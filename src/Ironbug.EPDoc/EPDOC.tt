<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ Assembly Name="Microsoft.CSharp" #>
<#@ assembly name="Newtonsoft.Json" #>

<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Newtonsoft.Json" #>
<#@ output extension=".cs" #>
//This file is auto-generated by Ironbug.EPDoc
namespace Ironbug.EPDoc
{
	<#
	//####################################
	var dir = @"C:\Users\mingo\Documents\GitHub\EPDoc2Json\Doc\";
	var files = Directory.GetFiles(dir, "*.json");

	var arr = new List<dynamic>();
	foreach (var f in files)
	{
		dynamic docObj = JsonConvert.DeserializeObject(File.ReadAllText(f));
		var ar = docObj.subsection;
		arr.AddRange(ar.Children());
	}

	foreach (var item in arr)
	{
		var className = CheckInputFullName(item.Name);
		var  inputFields = new List<dynamic>();
		var optionalSubsubsection =item.Subsubsections;

		if(optionalSubsubsection != null)
		{
			foreach(var obj in optionalSubsubsection)
			{
				if(obj.Name == "Inputs")
				{ 
					foreach	(var f in obj.Paragraph)
					{
						inputFields.Add(f);
					}
				
				
				}
			}
		}
	//####################################
	#>
public static class <#=className#>
    { 
		public static string Name = @"<#=item.Name#>";
		public static string Note = @"<#=string.Join(Environment.NewLine, item.Note)#>";
<#
if(inputFields != null) {
		
	foreach(var f in inputFields)
	{
			var fName = CheckInputFullName(f.Name).Replace("Field","Field_");
	#>
	public static string <#=fName#> = @"<#=f.Note == null?"":string.Join(Environment.NewLine, f.Note).Trim()#>";
	<#
	}
		
}
#>
}
	<#
	//####################################
	}
	//####################################
	#>
}



<#
string CheckInputFullName(string fullName)
{
	var r = new System.Text.RegularExpressions.Regex(@"(?<=[A-Z])(?=[A-Z][a-z]) |(?<=[^A-Z])(?=[A-Z]) |(?<=[A-Za-z])(?=[^A-Za-z])", System.Text.RegularExpressions.RegexOptions.IgnorePatternWhitespace);
    var spacedName =  r.Replace(fullName, " ");
    var cleanFullName = new System.Globalization.CultureInfo("en-us", false).TextInfo.ToTitleCase(spacedName); //ToTitleCase
    cleanFullName = new System.Text.RegularExpressions.Regex("[^a-zA-Z0-9]").Replace(cleanFullName, string.Empty);

    return cleanFullName;
}



#>