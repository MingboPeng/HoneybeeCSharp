
//This file is auto-generated by Ironbug.EPDoc
namespace Ironbug.EPDoc
{

	public sealed class CoilCoolingWater
    { 

		private string _name = @"Coil:Cooling:Water";
		private string _note = @"The water cooling coil (Coil:Cooling:Water) has the ability to give detailed output with simplified inputs, inputting complicated coil geometry is not required by the user for this model instead the coil is sized in terms of auto-sizeable thermodynamic inputs. The coil requires thermodynamic inputs such as temperatures, mass flow rates and humidity ratios.

The coil is sized using auto-sized/user design input conditions and the UA values are calculated from the design conditions. A rough estimate of the coil area is provided along with percentage of surface wet and/or dry. This model uses the NTU-effectiveness approach to model heat transfer and has two types of flow arrangements cross-flow or counter-flow.

The basic underlying idea is - use auto sizable thermodynamic design inputs, calculate the coil UA s, use these UA values and operating conditions from the nodes connections, calculate the outlet stream conditions, and calculate the heat transfer rates.

See section Cooling Coil Model in the EnergyPlus Engineering Document for further details regarding this model.
";
		

		private static readonly System.Lazy<CoilCoolingWater> instance = new System.Lazy<CoilCoolingWater>(() => new CoilCoolingWater());
        private static CoilCoolingWater Value => instance.Value;
		public static string Name => Value._name;
        public static string Note => Value._note;
		private CoilCoolingWater(){}

	private string _Field_Name = @"A unique user-assigned name for an instance of a cooling coil. Any reference to this cooling coil by another object will use this name.";
		public static string Field_Name => Value._Field_Name;

		private string _Field_AvailabilityScheduleName = @"Schedule that defines when the coil is available. The name of the schedule (ref: Schedule) that denotes whether the cooling coil can run during a given time period. A schedule value greater than 0 (usually 1 is used) indicates that the unit can be on during a given time period. A value less than or equal to 0 (usually 0 is used) denotes that the unit is off. If this field is blank, the schedule has a value of 1 for all time periods.";
		public static string Field_AvailabilityScheduleName => Value._Field_AvailabilityScheduleName;

		private string _Field_DesignWaterFlowRate = @"The maximum possible water volume flow rate (m^{3}/sec) through the coil. This is an auto sizable design input.";
		public static string Field_DesignWaterFlowRate => Value._Field_DesignWaterFlowRate;

		private string _Field_DesignAirFlowRate = @"The maximum possible air volume flow rate (m^{3}/sec) through the coil. This is an auto sizable design input.";
		public static string Field_DesignAirFlowRate => Value._Field_DesignAirFlowRate;

		private string _Field_DesignInletWaterTemperature = @"The inlet water temperature for the design flow (C). This is an auto sizable design input.";
		public static string Field_DesignInletWaterTemperature => Value._Field_DesignInletWaterTemperature;

		private string _Field_DesignInletAirTemperature = @"The inlet air temperature for the design flow (C). This is an auto sizable design input.";
		public static string Field_DesignInletAirTemperature => Value._Field_DesignInletAirTemperature;

		private string _Field_DesignOutletAirTemperature = @"The outlet air condition desired for design flow (C). This is an auto sizable design input.";
		public static string Field_DesignOutletAirTemperature => Value._Field_DesignOutletAirTemperature;

		private string _Field_DesignInletAirHumidityRatio = @"The highest value of humidity ratio possible for the Design inlet air stream (kgWater/kgDryAir). This is an auto sizable input.";
		public static string Field_DesignInletAirHumidityRatio => Value._Field_DesignInletAirHumidityRatio;

		private string _Field_DesignOutletAirHumidityRatio = @"The value of humidity ratio for the Design outlet air stream (kgWater/kgDryAir), it is an auto sizable input.";
		public static string Field_DesignOutletAirHumidityRatio => Value._Field_DesignOutletAirHumidityRatio;

		private string _Field_WaterInletNodeName = @"The name of the water coil inlet from the chilled water loop, i.e.~Cooling Coil Water Inlet Node. It is from this node the operating inputs for water are transferred to the coil.";
		public static string Field_WaterInletNodeName => Value._Field_WaterInletNodeName;

		private string _Field_WaterOutletNodeName = @"The name of the water coil outlet from the chilled water loop, i.e.~Cooling Coil Water Outlet Node. It is from this node the operating output for water are reported to the coil.";
		public static string Field_WaterOutletNodeName => Value._Field_WaterOutletNodeName;

		private string _Field_AirInletNodeName = @"The name of the air inlet to the water coil, i.e.~Cooling Coil Air Inlet Node. It is from this node the operating inputs for air are transferred to the coil.";
		public static string Field_AirInletNodeName => Value._Field_AirInletNodeName;

		private string _Field_AirOutletNodeName = @"The name of the air outlet from the water coil, i.e.~Cooling Coil Air Outlet Node. It is from this node the operating output for airside is reported to the coil.";
		public static string Field_AirOutletNodeName => Value._Field_AirOutletNodeName;

		private string _Field_TypeOfAnalysis = @"The coil has two modes of operation, termed as {SimpleAnalysis} and {DetailedAnalysis}. The difference between the two modes being, the simple mode reports the value of surface area fraction wet of the coil as dry or wet. The detailed mode give the exact value, however the execution time in detailed mode is noticeably higher.";
		public static string Field_TypeOfAnalysis => Value._Field_TypeOfAnalysis;

		private string _Field_HeatExchangerConfiguration = @"The coil is operable in two configurations: {CounterFlow} or {CrossFlow}. Chilled water coils are generally built as counter-flow. The default is CounterFlow..";
		public static string Field_HeatExchangerConfiguration => Value._Field_HeatExchangerConfiguration;

		private string _Field_CondensateCollectionWaterStorageTankName = @"This field is optional. It is used to describe where condensate from the coil is collected. If blank or omitted, then any coil condensate is discarded. Enter the name of Water Storage Tank object defined elsewhere and the condensate will then be collected in that tank.";
		public static string Field_CondensateCollectionWaterStorageTankName => Value._Field_CondensateCollectionWaterStorageTankName;

		private string _Field_DesignWaterTemperatureDifference = @"This input field is optional. If specified, it is used for sizing the {Design Water Flow Rate}. If blank or omitted, the {Loop Design Temperature Difference} value specified in {Sizing:Plant} object is used for sizing the {Design Water Flow Rate}.

Examples when auto sized in an IDF are as below:



Coil:Cooling:Water,
  Main Cooling Coil 1,       !- Coil Name
  CoolingCoilAvailSched,   !-Availability Schedule Name
  autosize,         !- Design Water Volume Flow Rate of Coil {m3/s}
  autosize,         !- Design Air Flow Rate of Coil {m3/s}
  autosize,         !- Design Inlet Water Temperature {C}
  autosize,         !- Design Inlet Air Temperature {C}
  autosize,         !- Design Outlet Air Temperature {C}
  autosize,         !- Design Inlet Air Humidity Ratio(kgWater/kgDryAir)
  autosize,         !- Design Outlet Air Humidity Ratio(kgWater/kgDryAir)
  Main Cooling Coil 1 Water Inlet Node,     !- Coil_Water_Inlet_Node
  Main Cooling Coil 1 Water Outlet Node,   !- Coil_Water_Outlet_Node
  Mixed Air Node 1,                                             !- Coil_Air_Inlet_Node
  Main Cooling Coil 1 Outlet Node;               !- Coil_Air_Outlet_Node


Examples when values (hard-sized) are input in an IDF are as below:



Coil:Cooling:Water,
  Main Cooling Coil 1,       !- Coil Name
  CoolingCoilAvailSched,   !-Availability Schedule Name
  0.0022,       !- Design Water Volume Flow Rate of Coil {m3/s}
  1.45,           !- Design Air Flow Rate of Coil {m3/s}
  6.1,             !- Design Inlet Water Temperature {C}
  25,               !- Design Inlet Air Temperature {C}
  10,               !- Design Outlet Air Temperature {C}
  0.012,         !- Design Inlet Air Humidity Ratio
  0.008,         !- Design Outlet Air Humidity Ratio
  Main Cooling Coil 1 Water Inlet Node,     !- Coil_Water_Inlet_Node
  Main Cooling Coil 1 Water Outlet Node,   !- Coil_Water_Outlet_Node
  Mixed Air Node 1,                                             !- Coil_Air_Inlet_Node
  Main Cooling Coil 1 Outlet Node;               !- Coil_Air_Outlet_Node";
		public static string Field_DesignWaterTemperatureDifference => Value._Field_DesignWaterTemperatureDifference;

	

}

	public sealed class CoilHeatingWater
    { 

		private string _name = @"Coil:Heating:Water";
		private string _note = @"This simple heating coil model only does sensible heating of the air. The simple heating coil uses the Effectiveness-NTU algorithm and assumes a cross-flow heat exchanger.
";
		

		private static readonly System.Lazy<CoilHeatingWater> instance = new System.Lazy<CoilHeatingWater>(() => new CoilHeatingWater());
        private static CoilHeatingWater Value => instance.Value;
		public static string Name => Value._name;
        public static string Note => Value._note;
		private CoilHeatingWater(){}

	private string _Field_Name = @"A unique identifying name for each coil.";
		public static string Field_Name => Value._Field_Name;

		private string _Field_AvailabilityScheduleName = @"Schedule that defines when the coil is available. A schedule value greater than 0 (usually 1 is used) indicates that the unit can be on during a given time period. A value less than or equal to 0 (usually 0 is used) denotes that the unit is off. If this field is blank, the schedule has a value of 1 for all time periods.";
		public static string Field_AvailabilityScheduleName => Value._Field_AvailabilityScheduleName;

		private string _Field_UFactorTimesAreaValue = @"The UA value for the coil needed for the Effectiveness-NTU heat exchanger model. An estimate of the UA can be obtained from:

\begin{equation}
q = UA \times ({T_{water,avg}} - {T_{air,avg}})
\end{equation}

where q is the heat transferred from water to the air in watts; T_{water,\\ avg} is the average water temperature in degrees C; and T_{air,\\ avg} is the average air temperature in degrees C. Or the LMTD temperature difference can be used. This field is used when {Performance Input Method} = {UFactorTimesAreaAndDesignWaterFlowRate}.This field is autosizable.";
		public static string Field_UFactorTimesAreaValue => Value._Field_UFactorTimesAreaValue;

		private string _Field_MaximumWaterFlowRate = @"The maximum possible water flow rate (m^{3}/sec) through the coil. This field is used when {Coil Performance Input Method} = {UFactorTimesAreaAndDesignWaterFlowRate}. This field is autosizable.";
		public static string Field_MaximumWaterFlowRate => Value._Field_MaximumWaterFlowRate;

		private string _Field_WaterInletNodeName = @"The name of the coil s water inlet node from the hot water loop.";
		public static string Field_WaterInletNodeName => Value._Field_WaterInletNodeName;

		private string _Field_WaterOutletNodeName = @"The name of the coil s water outlet node from the hot water loop.";
		public static string Field_WaterOutletNodeName => Value._Field_WaterOutletNodeName;

		private string _Field_AirInletNodeName = @"The name of the air inlet node to the water coil.";
		public static string Field_AirInletNodeName => Value._Field_AirInletNodeName;

		private string _Field_AirOutletNodeName = @"The name of the air outlet node from the water coil.";
		public static string Field_AirOutletNodeName => Value._Field_AirOutletNodeName;

		private string _Field_PerformanceInputMethod = @"The user can choose either {UFactorTimesAreaAndDesignWaterFlowRate} or {NominalCapacity}. If {UFactorTimesAreaAndDesignWaterFlowRate} is selected, the user must input values for UA of the Coil and Max Water FlowRate of the Coil (and Rated Capacity is ignored). If {NominalCapacity} is chosen, the user must input a Rated Capacity for the coil; UA of the Coil and Max Water FlowRate of the Coil will be ignored. Rated capacity is defined as the heating capacity in watts of the coil at the rating points (i.e., the rated inlet and outlet water/air temperatures defined in the input fields below). The rated capacity is used to calculate a water mass flow rate and a UA for the coil. The default is {NominalCapacity}.

To autosize the capacity, choose {UfactorTimesAreaAndDesignWaterFlowRate} and put autosize as the inputs for {U-Factor Times Area Value, Maximum Water Flow Rate,} and {Rated Capacity}. The program will use the Sizing inputs to size the coil. The rated temperatures (see below) are ignored in autosizing. These are used only when the user is specifying coil performance using the {NominalCapacity} input method.";
		public static string Field_PerformanceInputMethod => Value._Field_PerformanceInputMethod;

		private string _Field_GrossRatedHeatingCapacity = @"The heating capacity of the coil in watts at the rated inlet and outlet air and water temperatures. The gross rated heating capacity does not account for the effect of supply air fan heat. This field is used when the {Performance Input Method} = {Nominal Capacity}. This field is autosizable. The rating points are given in the four subsequent input fields.";
		public static string Field_GrossRatedHeatingCapacity => Value._Field_GrossRatedHeatingCapacity;

		private string _Field_RatedInletWaterTemperature = @"The inlet water temperature (degrees C) corresponding to the rated heating capacity. The default is 82.2 degrees C (180 degrees F).";
		public static string Field_RatedInletWaterTemperature => Value._Field_RatedInletWaterTemperature;

		private string _Field_RatedInletAirTemperature = @"The inlet air temperature (degrees C) corresponding to the rated heating capacity. The default is 16.6 degrees C (60 degrees F).";
		public static string Field_RatedInletAirTemperature => Value._Field_RatedInletAirTemperature;

		private string _Field_RatedOutletWaterTemperature = @"The outlet water temperature (degrees C) corresponding to the rated heating capacity. The default is 71.1 degrees C (160 degrees F).";
		public static string Field_RatedOutletWaterTemperature => Value._Field_RatedOutletWaterTemperature;

		private string _Field_RatedOutletAirTemperature = @"The outlet air temperature (degrees C) corresponding to the nominal heating capacity. The default is 32.2 degrees C (90 degrees F).";
		public static string Field_RatedOutletAirTemperature => Value._Field_RatedOutletAirTemperature;

		private string _Field_RatedRatioForAirAndWaterConvection = @"This is the ratio of convective heat transfers between air side and water side of the heating coil at the rated operating conditions. The default is .5. This ratio describes the geometry and the design of the coil and is defined by:

\begin{equation}
ratio = \frac{{{\eta_f}{{\left( {hA} \right)}_{air}}}}{{{{\left( {hA} \right)}_{water}}}}
\end{equation}

where,

{\eta_f} is the fin efficiency, (dimensionless)

{h} is the surface convection heat transfer coefficient

{A} is the surface area";
		public static string Field_RatedRatioForAirAndWaterConvection => Value._Field_RatedRatioForAirAndWaterConvection;

		private string _Field_DesignWaterTemperatureDifference = @"This input field is optional. If specified, it is used for sizing the {Design Water Flow Rate}. If blank or omitted, the {Loop Design Temperature Difference} value specified in {Sizing:Plant} object is used for sizing the {Design Water Flow Rate}.

An example input of the object is:



Coil:Heating:Water,
  SPACE3-1 Zone Coil,           !- Coil Name
  ReheatCoilAvailSched,       !- Availability Schedule Name
  ,                                               !- UA of the Coil {W/K}
  ,                                               !- Max Water Flow Rate of Coil {m3/s}
  SPACE3-1 Zone Coil Water In Node,   !- Coil_Water_Inlet_Node
  SPACE3-1 Zone Coil Water Out Node,   !- Coil_Water_Outlet_Node
  SPACE3-1 Zone Coil Air In Node,   !- Coil_Air_Inlet_Node
  SPACE3-1 In Node,               !- Coil_Air_Outlet_Node
  NominalCapacity,                 !- Coil Performance Input Method
  10000.,                                   !- Gross Rated Heating Capacity
  0.55;                                       !- Rated Ratio for Air and Water Convection";
		public static string Field_DesignWaterTemperatureDifference => Value._Field_DesignWaterTemperatureDifference;

	

}

	public sealed class CoilHeatingSteam
    { 

		private string _name = @"Coil:Heating:Steam";
		private string _note = @"The simple steam to air heating coil model only does sensible heating of the air. The steam to air coils condenses the steam and sub cools steam at loop pressure and discharges the condensate through steam traps at low pressure condensate line.
";
		

		private static readonly System.Lazy<CoilHeatingSteam> instance = new System.Lazy<CoilHeatingSteam>(() => new CoilHeatingSteam());
        private static CoilHeatingSteam Value => instance.Value;
		public static string Name => Value._name;
        public static string Note => Value._note;
		private CoilHeatingSteam(){}

	private string _Field_Name = @"A unique identifying name for each steam coil.";
		public static string Field_Name => Value._Field_Name;

		private string _Field_AvailabilityScheduleName = @"Schedule that defines when the coil is available. If the schedule s value is less than or equal to 0.0, then the coil is not available and flow will not be requested. If the schedule s value is > 0.0 (usually 1 is used), the coil is available. If this field is blank, the schedule has values of 1 for all time periods.";
		public static string Field_AvailabilityScheduleName => Value._Field_AvailabilityScheduleName;

		private string _Field_MaximumSteamFlowRate = @"The maximum possible steam volumetric flow rate in m^{3}/s through the steam heating coil. The steam volumetric flow rate is calculated at 100C and 101325 Pa. This field is autosizable.";
		public static string Field_MaximumSteamFlowRate => Value._Field_MaximumSteamFlowRate;

		private string _Field_DegreeOfSubCooling = @"Ideally the steam trap located at the outlet of steam coil should remove all the condensate immediately, however there is a delay in this process in actual systems which causes the condensate to SubCool by certain degree in the coil before leaving the coil, this SubCool occurs in the steam coil and this SubCool-heat is added to the zone. The minimum value is 2 ?? Celsius and default is 5 ?? Celsius.";
		public static string Field_DegreeOfSubCooling => Value._Field_DegreeOfSubCooling;

		private string _Field_DegreeOfLoopSubCooling = @"This essentially represents the heat loss to the atmosphere due to uninsulated condensate return piping to the boiler. Condensate return piping operates at atmospheric pressure and is not insulated. The condensate sub cools to certain degree before it is pumped back to the boiler. The minimum value is 10 ?? Celsius and default is 20 ?? Celsius.";
		public static string Field_DegreeOfLoopSubCooling => Value._Field_DegreeOfLoopSubCooling;

		private string _Field_WaterInletNodeName = @"The name of the steam coil inlet from the steam loop, i.e.~Steam Coil steam inlet node.";
		public static string Field_WaterInletNodeName => Value._Field_WaterInletNodeName;

		private string _Field_WaterOutletNodeName = @"The name of the steam coil outlet to the condensate loop, i.e.~Steam Coil condensate outlet node.";
		public static string Field_WaterOutletNodeName => Value._Field_WaterOutletNodeName;

		private string _Field_AirInletNodeName = @"The name of the air inlet to the steam coil, i.e.~Steam Coil Air Inlet Node.";
		public static string Field_AirInletNodeName => Value._Field_AirInletNodeName;

		private string _Field_AirOutletNodeName = @"The name of the air outlet from the steam coil, i.e.~Steam Coil Air Outlet Node.";
		public static string Field_AirOutletNodeName => Value._Field_AirOutletNodeName;

		private string _Field_CoilControlType = @"Choice of either {ZoneLoadControl} steam coil or {TemperatureSetpointControl} steam coil. A zone coil is load controlled and an air loop steam coil is temperature controlled.";
		public static string Field_CoilControlType => Value._Field_CoilControlType;

		private string _Field_TemperatureSetpointNodeName = @"If the coil is used in the air loop simulation and is temperature controlled using a Set Point Manager (i.e., the previous file is TemperatureSetpointConrtol), then the node that is the control node needs to be specified here. If the coil is used in an air terminal unit, the coil is load controlled and a control node set point is not required (i.e., the previous field is ZoneLoadControl).

An example of a Steam Coil input statement (one each for Temperature Controlled and Load Controlled) from an IDF is given below:



Coil:Heating:Steam,
  VAV SYS 1 Heating Coil,                   !- Coil Name
  ReheatCoilAvailSched,                       !- Availability Schedule Name
  0.06,                                                       !- Max Steam volume Flow rate
  5.0,                                                         !- Deg of Subcooling Desired
  15.0,                                                        !- Loop Subcooling Desired
  VAV SYS 1 Heating Coil Steam Inlet,   !- Coil Steam Inlet Node
  VAV SYS 1 Heating Coil Steam Outlet, !- Coil Water Outlet Node
  VAV SYS 1 Cooling Coil Outlet,       !- Coil Air Inlet Node
  VAV SYS 1 Heating Coil Outlet,       !- Coil Air Outlet Node
  TemperatureSetPointControl,             !- field Coil Control Type
  VAV SYS 1 Heating Coil Outlet;       !- field Coil Temp Setpoint Node


  Coil:Heating:Steam,
  SPACE1-1 Reheat Coil,                             !- Coil Name
  ReheatCoilAvailSched,                             !- Availability Schedule Name
  autosize,                                                      !- Max Steam volume Flow rate
  5.0,                                                                !- Deg of Subcooling Desired
  15.0,                                                              !- Loop Subcooling Desired
  SPACE1-1 Reheat Coil Steam Inlet,     !- Coil Steam Inlet Node
  SPACE1-1 Reheat Coil Steam Outlet,   !- Coil Water Outlet Node
  SPACE1-1 Damper Outlet,                         !- Coil Air Inlet Node
  SPACE1-1 Supply Inlet,   !- Coil Air Outlet Node
  ZoneLoadControl;         !- field Coil Control Type";
		public static string Field_TemperatureSetpointNodeName => Value._Field_TemperatureSetpointNodeName;

	

}

	public sealed class HeatingCoilSteamOutputs
    { 

		private string _name = @"Heating Coil (Steam) Outputs:";
		private string _note = @"  HVAC,Sum, Heating Coil Heating Energy [J]

  HVAC,Average,Total Steam Coil Heating Rate [W]

  HVAC,Average,Heating Coil Steam Trap Loss Rate [W]

  HVAC, Average, Heating Coil Steam Inlet Temperature [C]

  HVAC, Average, Heating Coil Steam Outlet Temperature [C]

  HVAC, Average, Heating Coil Steam Mass Flow Rate [kg/s]

";
		

		private static readonly System.Lazy<HeatingCoilSteamOutputs> instance = new System.Lazy<HeatingCoilSteamOutputs>(() => new HeatingCoilSteamOutputs());
        private static HeatingCoilSteamOutputs Value => instance.Value;
		public static string Name => Value._name;
        public static string Note => Value._note;
		private HeatingCoilSteamOutputs(){}



}

	public sealed class CoilHeatingElectric
    { 

		private string _name = @"Coil:Heating:Electric";
		private string _note = @"The electric heating coil is a simple capacity model with a user-inputted efficiency. In many cases, this efficiency for the electric coil will be 100%. This coil will be simpler than shown in Figure~\ref{fig:example-air-loop-heating-cooling-coil} since it will only have air nodes to connect it in the system. The coil can be used in the air loop simulation or in the zone equipment as a reheat coil. Depending on where it is used determines if this coil is temperature or capacity controlled. If used in the air loop simulation it will be controlled to a specified temperature scheduled from the SetPoint Manager. If it is used in zone equipment, it will be controlled from the zone thermostat by meeting the zone demand.
";
		

		private static readonly System.Lazy<CoilHeatingElectric> instance = new System.Lazy<CoilHeatingElectric>(() => new CoilHeatingElectric());
        private static CoilHeatingElectric Value => instance.Value;
		public static string Name => Value._name;
        public static string Note => Value._note;
		private CoilHeatingElectric(){}

	private string _Field_Name = @"A unique identifying name for each coil.";
		public static string Field_Name => Value._Field_Name;

		private string _Field_AvailabilityScheduleName = @"Schedule that defines when the coil is available. If the schedule s value is 0.0, then the coil is not available and flow will not be requested. If the schedule s value is > 0.0 (usually 1 is used), the coil is available. If this field is blank, the schedule has values of 1 for all time periods. Schedule values must be > = 0 and < = 1.";
		public static string Field_AvailabilityScheduleName => Value._Field_AvailabilityScheduleName;

		private string _Field_Efficiency = @"This is user-inputted efficiency (decimal units, not percent) and can account for any loss. In most cases for the electric coil, this will be 100%.";
		public static string Field_Efficiency => Value._Field_Efficiency;

		private string _Field_NominalCapacity = @"This is the maximum capacity of the coil (W). This controlled coil will only provide the needed capacity to meet the control criteria whether it is temperature or capacity controlled. This field is autosizable.";
		public static string Field_NominalCapacity => Value._Field_NominalCapacity;

		private string _Field_AirInletNodeName = @"The name of the air inlet to the electric coil, i.e.~Heating Coil Air Inlet Node.";
		public static string Field_AirInletNodeName => Value._Field_AirInletNodeName;

		private string _Field_AirOutletNodeName = @"The name of the air outlet from the electric coil, i.e.~Heating Coil Air Outlet Node.";
		public static string Field_AirOutletNodeName => Value._Field_AirOutletNodeName;

		private string _Field_TemperatureSetpointNodeName = @"If the coil is used in the air loop simulation and is temperature controlled using a Set Point Manager, then the node that is the control node needs to be specified here. If the coil is used in an air terminal unit, the coil is load controlled and a control node set point is not required.

An example of IDF usage:



Coil:Heating:Electric,
  AHU Reheater,                     !- Name
  2,                                           !- Availability Schedule Name
  0.99,                                     !- Efficiency
  600000,                                 !- Nominal Capacity {W}
  DOAS Supply Fan Outlet, !- Air Inlet Node Name
  AHU Reheater Outlet,       !- Air Outlet Node Name
  AHU Reheater Outlet;       !- Temperature Setpoint Node Name";
		public static string Field_TemperatureSetpointNodeName => Value._Field_TemperatureSetpointNodeName;

	

}

	public sealed class CoilHeatingElectricMultiStage
    { 

		private string _name = @"Coil:Heating:Electric:MultiStage";
		private string _note = @"The multi stage electric heating coil is a simple capacity model with a user-inputted efficiencies at different stages. In many cases, the efficiencies for the electric coil will be 100%. This coil will only have air nodes to connect it in the system. The coil can be used in the air loop simulation or in the zone equipment as a reheat coil. Depending on where it is used determines if this coil is temperature or capacity controlled. If used in the air loop simulation it will be controlled to a specified temperature scheduled from the SetPoint Manager. If it is used in zone equipment, it will be controlled from the zone thermostat by meeting the zone demand. For the time being, this coil model can only be called by the parent object AirLoopHVAC:UnitaryHeatPump:AirToAir:MultiSpeed.
";
		

		private static readonly System.Lazy<CoilHeatingElectricMultiStage> instance = new System.Lazy<CoilHeatingElectricMultiStage>(() => new CoilHeatingElectricMultiStage());
        private static CoilHeatingElectricMultiStage Value => instance.Value;
		public static string Name => Value._name;
        public static string Note => Value._note;
		private CoilHeatingElectricMultiStage(){}

	private string _Field_Name = @"A unique identifying name for each coil.";
		public static string Field_Name => Value._Field_Name;

		private string _Field_AvailabilityScheduleName = @"Schedule that defines when the coil is available. If the schedule s value is 0.0, then the coil is not available and flow will not be requested. If the schedule s value is > 0.0 (usually 1 is used), the coil is available. If this field is blank, the schedule has values of 1 for all time periods. Schedule values must be > = 0 and < = 1.";
		public static string Field_AvailabilityScheduleName => Value._Field_AvailabilityScheduleName;

		private string _Field_AirInletNodeName = @"The name of the air inlet to the electric coil, i.e.~Heating Coil Air Inlet Node.";
		public static string Field_AirInletNodeName => Value._Field_AirInletNodeName;

		private string _Field_AirOutletNodeName = @"The name of the air outlet from the electric coil, i.e.~Heating Coil Air Outlet Node.";
		public static string Field_AirOutletNodeName => Value._Field_AirOutletNodeName;

		private string _Field_TemperatureSetpointNodeName = @"If the coil is used in the air loop simulation and is temperature controlled using a Set Point Manager, then the node that is the control node needs to be specified here. If the coil is used in an air terminal unit, the coil is load controlled and a control node set point is not required. At present, the multistage electric heating coil does not model temperature setoint control.";
		public static string Field_TemperatureSetpointNodeName => Value._Field_TemperatureSetpointNodeName;

		private string _Field_Stage1Efficiency = @"This is stage 1 user-inputted efficiency (decimal units, not percent) and can account for any loss. In most cases for the electric coil, this will be 100%.";
		public static string Field_Stage1Efficiency => Value._Field_Stage1Efficiency;

		private string _Field_Stage1NominalCapacity = @"This is stage 1 capacity of the coil (W). This field is autosizable.";
		public static string Field_Stage1NominalCapacity => Value._Field_Stage1NominalCapacity;

		private string _Field_Stage2Efficiency = @"This is stage 2 user-inputted efficiency (decimal units, not percent) and can account for any loss. In most cases for the electric coil, this will be 100%.";
		public static string Field_Stage2Efficiency => Value._Field_Stage2Efficiency;

		private string _Field_Stage2NominalCapacity = @"This is stage 2 capacity of the coil (W). This field is autosizable.";
		public static string Field_Stage2NominalCapacity => Value._Field_Stage2NominalCapacity;

		private string _Field_Stage3Efficiency = @"This is stage 3 user-inputted efficiency (decimal units, not percent) and can account for any loss. In most cases for the electric coil, this will be 100%.";
		public static string Field_Stage3Efficiency => Value._Field_Stage3Efficiency;

		private string _Field_Stage3NominalCapacity = @"This is stage 3 capacity of the coil (W). This field is autosizable.";
		public static string Field_Stage3NominalCapacity => Value._Field_Stage3NominalCapacity;

		private string _Field_Stage4Efficiency = @"This is stage 4 user-inputted efficiency (decimal units, not percent) and can account for any loss. In most cases for the electric coil, this will be 100%.";
		public static string Field_Stage4Efficiency => Value._Field_Stage4Efficiency;

		private string _Field_Stage4NominalCapacity = @"This is stage 4 capacity of the coil (W). This field is autosizable.

An example in IDF form:



Coil:Heating:Electric:MultiStage,
  Heat Pump Heating Coil 1,                 !- Name
  FanAndCoilAvailSched,                         !- Availability Schedule Name
  Heating Coil Air Inlet Node,           !- Air Inlet Node Name
  SuppHeating Coil Air Inlet Node,   !- Air Outlet Node Name
  ,                                               !- Temp Setpoint node name
  3,                                             !- Number of Stages
  1,                                             !- Stage 1 Efficiency
  Autosize,                               !- Stage 1 Nominal Capacity {W}
  1,                                             !- Stage 2 Efficiency
  Autosize,                               !- Stage 2 Nominal Capacity {W}
  1,                                             !- Stage 3 Efficiency
  Autosize;                               !- Stage 3 Nominal Capacity {W}";
		public static string Field_Stage4NominalCapacity => Value._Field_Stage4NominalCapacity;

	

}

	public sealed class CoilHeatingDesuperheater
    { 

		private string _name = @"Coil:Heating:Desuperheater";
		private string _note = @"A simplified approach is used to determine the performance of this air heating coil. The model assumes that the heating energy provided by this coil is reclaimed from the superheated refrigerant gas leaving a compressor (i.e., a desuperheating refrigerant-to-air heating coil) and does not impact the performance of the compressor. This coil can be used in air loop simulations but can t be used by certain compound objects (e.g., AirLoopHVAC:UnitaryHeatPump:AirToAir, AirLoopHVAC:UnitaryHeatPump:WaterToAir, or Dehumidifier:Desiccant:NoFans) or any air distribution equipment (e.g., AirTerminal:SingleDuct:ConstantVolume:Reheat, AirTerminal:SingleDuct:VAV:Reheat, or AirTerminal:SingleDuct:SeriesPIU:Reheat).

The desuperheater heating coil input requires a coil name, an availability schedule, and a heat reclaim recovery efficiency. The reclaim recovery efficiency determines the amount of heat available for use by this heating coil. Approximately 25-30% of the energy rejected by typical refrigeration system condensers is to reduce the superheated refrigerant vapor temperature to the condensing temperature. Recovery efficiencies higher than 30% may cause the refrigerant gas to condense which in turn impacts the performance of the refrigeration system. For this reason, the maximum heat reclaim recovery efficiency for this coil is 30% for most sources of waste heat, including refrigeration compressor racks. The one exception to this 30% limit is a condenser that is part of a detailed refrigeration system. In a detailed refrigeration system, the portion of the rejected heat that lies within the superheated region is explicitly calculated. Therefore, the desuperheater coils supplied by a condenser attached to a detailed refrigeration system are subject to a maximum reclaim recovery efficiency of 90% of the heat within the superheated region.

The next two input items for the desuperheater heating coil are the node names for the inlet and outlet air streams. The following two input fields define the source of heating energy for the coil. This desuperheater heating coil may only be used with direct expansion (DX) cooling or refrigeration equipment. The first of these two inputs is the heating source object type while the second defines the name of the heating source. For proper modeling, the desuperheater heating coil must be placed downstream of a DX cooling coil when reclaiming heat from that cooling coil. Desuperheating heating coil placement is unrestricted when reclaiming heat from a Refrigeration:CompressorRack or Refrigeration:Condenser.

The next input field is optional and defines the set point node name if the desuperheater heating coil is to be controlled based on temperature. When a load-based control scheme is used, this field is left blank. A final optional input is used to model parasitic electric energy use of auxiliary equipment associated with the desuperheater heating coil (e.g., solenoid valve).
";
		

		private static readonly System.Lazy<CoilHeatingDesuperheater> instance = new System.Lazy<CoilHeatingDesuperheater>(() => new CoilHeatingDesuperheater());
        private static CoilHeatingDesuperheater Value => instance.Value;
		public static string Name => Value._name;
        public static string Note => Value._note;
		private CoilHeatingDesuperheater(){}

	private string _Field_Name = @"This alpha field defines a unique user-assigned name for an instance of a desuperheater heating coil. Any reference to this desuperheater heating coil by another object will use this name.";
		public static string Field_Name => Value._Field_Name;

		private string _Field_AvailabilityScheduleName = @"This alpha field defines the name of the schedule (ref: Schedule) that denotes whether the desuperheater heating coil can run during a given time period. Schedule values must range from 0 to 1. A schedule value greater than 0 indicates that the coil can operate during the time period. A value equal to 0 denotes that the coil must be off for that time period. If this field is blank, the schedule has values of 1 for all time periods.";
		public static string Field_AvailabilityScheduleName => Value._Field_AvailabilityScheduleName;

		private string _Field_HeatReclaimRecoveryEfficiency = @"This numeric field defines the ratio of recovered waste heat from the superheated refrigerant gas to the total rejected waste heat from the heating source (as if no heat reclaim occurred). Values can range from 0.0 up to a maximum of 0.9 if the source is a refrigeration condenser and 0.3 for all other waste heat sources. If this input field is left blank, the default value is 0.8 for a refrigeration condenser source type and 0.25 for all other sources.";
		public static string Field_HeatReclaimRecoveryEfficiency => Value._Field_HeatReclaimRecoveryEfficiency;

		private string _Field_AirInletNodeName = @"This alpha field defines the name of the HVAC system node from which the desuperheater heating coil draws its inlet air.";
		public static string Field_AirInletNodeName => Value._Field_AirInletNodeName;

		private string _Field_AirOutletNodeName = @"This alpha field defines the name of the HVAC system node to which the desuperheater heating coil sends its outlet air.";
		public static string Field_AirOutletNodeName => Value._Field_AirOutletNodeName;

		private string _Field_HeatingSourceObjectType = @"This alpha field defines the source of superheated refrigerant gas from which the desuperheater heating coil recovers energy. Valid choices are:



  Coil:Cooling:DX:SingleSpeed

  Coil:Cooling:DX:TwoSpeed

  Coil:Cooling:DX:TwoStageWithHumidityControlMode

  Coil:Cooling:DX:VariableSpeed

  Refrigeration:CompressorRack

  Refrigeration:Condenser:AirCooled

  Refrigeration:Condenser:EvaporativeCooled

  Refrigeration:Condenser:WaterCooled


When the heating coil source is a DX Coil, the air loop's supply air fan control mode may be auto fan (cycling fan cycling coil), constant fan, or variable volume. When the heating source is a compressor rack for refrigerated cases or a refrigeration condenser, the supply air fan control mode should be either variable volume or constant fan.

NOTE: Use of the desuperheater heating coil in variable air volume systems should be done with caution since the model assumption of a fixed heat reclaim recovery efficiency may not be valid if the air flow rate over the coil varies significantly.";
		public static string Field_HeatingSourceObjectType => Value._Field_HeatingSourceObjectType;

		private string _Field_HeatingSourceName = @"This alpha field defines the name of the desuperheater heating coil source (e.g., the name of a specific valid coil (as mentioned in the previous field) which provides waste heat to this desuperheater heating coil).

NOTE: When the heating source is a Refrigeration Compressor rack, the heat rejection location in the Refrigeration:CompressorRack object must be Outdoors . If the compressor rack heat rejection location is Zone , the total amount of heat rejection available for reclaim (e.g., by this desuperheater heating coil) is set to zero by the compressor rack object and the simulation proceeds.";
		public static string Field_HeatingSourceName => Value._Field_HeatingSourceName;

		private string _Field_TemperatureSetpointNodeName = @"This optional alpha field defines the name of the HVAC system node used for temperature-based control (e.g., controlling the heating coil s outlet air dry-bulb temperature to a setpoint). If the desuperheater heating coil is temperature controlled through the use of a Set Point Manager, then the control node specified in the Set Point Manager will be entered here. If the desuperheater heating coil is controlled based on a certain heating load to be met (e.g., using this heating coil as part of AirLoopHVAC:Unitary:Furnace:HeatCool for high humidity control), this field should be left blank.";
		public static string Field_TemperatureSetpointNodeName => Value._Field_TemperatureSetpointNodeName;

		private string _Field_ParasiticElectricLoad = @"This optional numeric field defines the parasitic electric load (in Watts) due to control valves or other devices specific to the desuperheater heating coil. The load is applied whenever the coil is heating the air. The model assumes that this electric load is small and does not contribute to heating the air.

Following is an example input for a desuperheater heating coil.



Coil:Heating:Desuperheater,
  DesuperheaterCoil,                                   !- Coil Name
  FanAndCoilAvailSched,                             !- Availability Schedule
  0.3,                                                               !- Heat Reclaim Recovery Efficiency
  Cooling Coil Air Outlet Node,             !- Coil Air Inlet Node Name
  Air Loop Outlet Node,                             !- Coil Air Outlet Node Name
  Coil:Cooling:DX:SingleSpeed, !- Heating Source Type
  Furnace ACDXCoil 1,                                 !- Heating Source Name
  ,                                                                     !- Coil Temperature Setpoint Node Name
  0.1;                                                               !- Parasitic Electric Load {W}";
		public static string Field_ParasiticElectricLoad => Value._Field_ParasiticElectricLoad;

	

}

	public sealed class CoilCoolingDXVariableRefrigerantFlow
    { 

		private string _name = @"Coil:Cooling:DX:VariableRefrigerantFlow";
		private string _note = @"The variable refrigerant flow (VRF) DX cooling coil model is nearly identical to the single-speed DX cooling coil model (Ref. Coil:Cooling:DX:SingleSpeed). For this reason, an adaptation of the single-speed DX cooling coil model is used to model the variable-speed compression system used in VRF AC systems. The model inputs are quite similar to the input requirements for the single-speed DX cooling coil model, however, the location of a majority of the inputs have been moved to the variable refrigerant flow air conditioner object since multiple DX cooling coils will use the same DX compression system (Ref. AirConditioner:VariableRefrigerantFlow).
";
		

		private static readonly System.Lazy<CoilCoolingDXVariableRefrigerantFlow> instance = new System.Lazy<CoilCoolingDXVariableRefrigerantFlow>(() => new CoilCoolingDXVariableRefrigerantFlow());
        private static CoilCoolingDXVariableRefrigerantFlow Value => instance.Value;
		public static string Name => Value._name;
        public static string Note => Value._note;
		private CoilCoolingDXVariableRefrigerantFlow(){}

	private string _Field_CoilName = @"This alpha field defines a unique user-assigned name for an instance of a VRF DX cooling coil. Any reference to this DX cooling coil by another object will use this name. This cooling coil name must be entered in the AirConditioner:VariableRefrigerantFlow object. No other sytem type uses this specific coil.";
		public static string Field_CoilName => Value._Field_CoilName;

		private string _Field_AvailabilityScheduleName = @"This alpha field defines the name of the DX cooling coil availabiltiy schedule. Schedule values of 0 denote the DX cooling coil is off. A schedule value greater than 0 indicates that the coil can operate during the time period. If this field is blank, the schedule has values of 1 for all time periods.";
		public static string Field_AvailabilityScheduleName => Value._Field_AvailabilityScheduleName;

		private string _Field_GrossRatedTotalCoolingCapacity = @"This numeric field defines the gross rated total cooling capacity of the DX cooling coil in watts at a rating point of 19.44 C indoor wet-bulb temperature and 35 C outdoor dry-bulb temperature. The total cooling capacity should be a gross , i.e., the effect of supply air fan heat NOT accounted for.";
		public static string Field_GrossRatedTotalCoolingCapacity => Value._Field_GrossRatedTotalCoolingCapacity;

		private string _Field_GrossRatioSensibleHeatRatio = @"This numeric field defines the gross sensible heat ratio (sensible capacity divided by total cooling capacity) of the DX cooling coil at rated conditions. Both the sensible and total cooling capacities used to define the Rated SHR should be gross (i.e., the effect of supply air fan heat is NOT accounted for)";
		public static string Field_GrossRatioSensibleHeatRatio => Value._Field_GrossRatioSensibleHeatRatio;

		private string _Field_RatedAirFlowRate = @"The air volume flow rate, in m^{3} per second, across the DX cooling coil at rated conditions. The rated air volume flow rate should be between 0.00004027 m^{3}/s and 0.00006041 m^{3}/s per watt of rated total cooling capacity (300 to 450 cfm/ton). The gross rated total cooling capacity and gross rated SHR should be performance information for the unit with at this rated air volume flow rate.";
		public static string Field_RatedAirFlowRate => Value._Field_RatedAirFlowRate;

		private string _Field_CoolingCapacityRatioModifierFunctionOfTemperatureCurveName = @"This alpha field defines the cooling capacity ratio modifier as a function of indoor wet-bulb temperature or indoor wet-bulb and outdoor dry-bulb temperatures. The curve is normalized to 1 at 19.44 C indoor wet-bulb temperature and if a biquadratic curve is used also at 35 C outdoor dry-bulb temperature. This curve is a linear, quadratic, or cubic curve if the cooling capacity is solely a function of indoor wet-bulb temperature (i.e., the indoor terminal units weighted average inlet air wet-bulb temperatures). Without specific manufacturers data indicating otherwise, the use of a single independent variable is recommended for this coil type. If, however, the user has reason to believe the cooling capacity is both a function of indoor wet-bulb temperature and outdoor dry-bulb temperature (and has manufacturers data to create the performance curve), a bi-quadratic equation using weighted average indoor wet-bulb temperature and condenser entering air dry-bulb temperature as the independent variables may be used. See the Engineering Reference for more discussion on using this input field.";
		public static string Field_CoolingCapacityRatioModifierFunctionOfTemperatureCurveName => Value._Field_CoolingCapacityRatioModifierFunctionOfTemperatureCurveName;

		private string _Field_CoolingCapacityModifierCurveFunctionOfFlowFractionName = @"This alpha field defines the name of a linear, quadratic or cubic performance curve (ref: Performance Curves) that parameterizes the variation of total cooling capacity as a function of the ratio of actual air flow rate across the cooling coil to the rated air flow rate (i.e., fraction of full load flow). The output of this curve is multiplied by the gross rated total cooling capacity and the total cooling capacity modifier curve (function of temperature) to give the gross total cooling capacity at the specific temperature and air flow conditions at which the coil is operating. The curve is normalized to have the value of 1.0 when the actual air flow rate equals the rated air flow rate.";
		public static string Field_CoolingCapacityModifierCurveFunctionOfFlowFractionName => Value._Field_CoolingCapacityModifierCurveFunctionOfFlowFractionName;

		private string _Field_CoilAirInletNodeName = @"This alpha field defines the name of the air inlet node entering the DX cooling coil.";
		public static string Field_CoilAirInletNodeName => Value._Field_CoilAirInletNodeName;

		private string _Field_CoilAirOutletNodeName = @"This alpha field defines the name of the air outlet node exiting the DX cooling coil.";
		public static string Field_CoilAirOutletNodeName => Value._Field_CoilAirOutletNodeName;

		private string _Field_NameOfWaterStorageTankForCondensateCollection = @"This field is optional. It is used to describe where condensate from the coil is collected. If blank or omitted, then any coil condensate is discarded. Enter the name of Water Storage Tank object defined elsewhere and the condensate will then be collected in that tank.

Following is an example input for a Coil:Cooling:DX:VariableRefrigerantFlow object.



COIL:Cooling:DX:VariableRefrigerantFlow,
  TU1 VRF DX Cooling Coil, !- Coil Name
  VRFAvailSched,                     !- Availability Schedule Name
  autosize,                               !- Gross Rated Total Cooling Capacity {W}
  autosize,                               !- Gross Rated Sensible Heat Ratio
  autosize,                               !- Rated Air Flow Rate {m3/s}
  VRFTUCoolCapFT,                   !- Cooling Capacity Ratio Modifier Function of Temperature Curve Name
  VRFACCoolCapFFF,                 !- Cooling Capacity Modifier Curve Function of Flow Fraction Name
  TU1 VRF DX CCoil Inlet Node,   !- Coil Air Inlet Node
  TU1 VRF DX CCoil Outlet Node;   !- Coil Air Outlet Node";
		public static string Field_NameOfWaterStorageTankForCondensateCollection => Value._Field_NameOfWaterStorageTankForCondensateCollection;

	

}

	public sealed class CoilHeatingDXVariableRefrigerantFlow
    { 

		private string _name = @"Coil:Heating:DX:VariableRefrigerantFlow";
		private string _note = @"The variable refrigerant flow (VRF) DX heating coil model uses performance information at rated conditions along with performance curves for variations in total capacity, energy input ratio and part load fraction to determine performance at part-load conditions. The impacts of defrost operation is modeled based a combination of user inputs and empirical models taken from the air-to-air heat pump algorithms in DOE-2.1E.

The VRF DX heating coil input requires an availability schedule, the gross rated heating capacity and the rated air volume flow rate. The rated air volume flow rate should be between 0.00008056 m^{3}/s and 0.00002684 m^{3}/s per watt of gross rated heating capacity. 

Two performance curves are required. The first performance curve defines the heating capacity as a function of indoor air dry-bulb and outdoor condenser entering air dry-bulb or wet-bulb temperature. The outdoor air temperature type is specified in the variable refrigerant flow air-to-air heat pump object. The second performance curve defines the change in heating capacity as a function of air flow fraction. Each of these performance curves are further discussed here.





  Heating capacity modifier curve (function of temperature, specified in Heat Pump)


The heating capacity modifier curve (function of temperature) can be a function of both the outdoor wet-bulb temperature and indoor air dry-bulb temperature. The curve is normalized to 1 at 21.11 C indoor dry-bulb temperature and if a biquadratic curve is used also at 6.11 C outdoor wet-bulb or 8.33 outdoor dry-bulb temperature. The outdoor air temperature type is specified in the variable refrigerant flow air-to-air heat pump object. Users have the choice of a bi-quadratic curve with two independent variables or a tri-quadratic curve with three independent variable. The tri-quadratic curve is recommended if sufficient manufacturer data is available as it provides sensitivity to the combined total capacity of all indoor units connected to the heat pump condenser and a more realistic output. The output of this curve is multiplied by the gross rated heating capacity to give the gross heating capacity at specific temperature operating conditions (i.e., at an outdoor or indoor air temperature different from the rating point temperature) and the combination ratio of the installed system.



\setcounter{enumi}{1}


  Heating capacity modifier curve (function of flow fraction, specified in DX coil)


The heating capacity modifier curve (function of flow fraction) is a quadratic or cubic curve with the independent variable being the ratio of the actual air flow rate across the heating coil to the rated air flow rate (i.e., fraction of full load flow). The curve is normalized to have the value of 1.0 when the actual air flow rate equals the rated air flow rate. The output of this curve is multiplied by the gross rated heating capacity and the heating capacity modifier curve (function of temperature) to give the gross heating capacity at the specific temperature and air flow conditions at which the coil is operating.
";
		

		private static readonly System.Lazy<CoilHeatingDXVariableRefrigerantFlow> instance = new System.Lazy<CoilHeatingDXVariableRefrigerantFlow>(() => new CoilHeatingDXVariableRefrigerantFlow());
        private static CoilHeatingDXVariableRefrigerantFlow Value => instance.Value;
		public static string Name => Value._name;
        public static string Note => Value._note;
		private CoilHeatingDXVariableRefrigerantFlow(){}

	private string _Field_Name = @"This alpha field defines a unique user-assigned name for an instance of a VRF DX heating coil. Any reference to this DX heating coil by another object will use this name.";
		public static string Field_Name => Value._Field_Name;

		private string _Field_AvailabilityScheduleName = @"This alpha field defines the name of the schedule (ref: Schedule) that denotes whether the DX heating coil can run during a given time period. A schedule value greater than 0 (usually 1 is used) indicates that the unit can be on during the time period. A value less than or equal to 0 (usually 0 is used) denotes that the unit must be off for the time period. If this field is blank, the schedule has values of 1 for all time periods.";
		public static string Field_AvailabilityScheduleName => Value._Field_AvailabilityScheduleName;

		private string _Field_GrossRatedHeatingCapacity = @"This numeric field defines the total, full load gross heating capacity in watts of the DX coil unit at rated conditions (outside air dry-bulb temperature of 8.33 C, outside air wet-bulb temperature of 6.11 C, heating coil entering air dry-bulb temperature of 21.11 C, heating coil entering air wet-bulb temperature of 15.55 C, and a heating coil air flow rate defined by field rated air flow volume below). The value entered here must be greater than 0. The gross total heating capacity should not account for the effect of supply air fan heat.";
		public static string Field_GrossRatedHeatingCapacity => Value._Field_GrossRatedHeatingCapacity;

		private string _Field_RatedAirFlowRate = @"This numeric field defines the volume air flow rate, in m^{3} per second, across the DX heating coil at rated conditions. The value entered here must be greater than 0. The rated air volume flow rate should be between 0.00004027 m^{3}/s and 0.00006041 m^{3}/s per watt of gross rated heating capacity. The gross rated heating capacity and the gross rated COP should be performance information for the unit with outside air dry-bulb temperature of 8.33 C, outside air wet-bulb temperature of 6.11 C, heating coil entering air dry-bulb temperature of 21.11 C, heating coil entering air wet-bulb temperature of 15.55 C, and the rated air volume flow rate defined here.";
		public static string Field_RatedAirFlowRate => Value._Field_RatedAirFlowRate;

		private string _Field_CoilAirInletNode = @"This alpha field defines the name of the HVAC system node from which the DX heating coil draws its inlet air.";
		public static string Field_CoilAirInletNode => Value._Field_CoilAirInletNode;

		private string _Field_CoilAirOutletNode = @"This alpha field defines the name of the HVAC system node to which the DX heating coil sends its outlet air.";
		public static string Field_CoilAirOutletNode => Value._Field_CoilAirOutletNode;

		private string _Field_HeatingCapacityRatioModifierFunctionOfTemperatureCurveName = @"This alpha field defines the heating capacity ratio modifier as a function of indoor dry-bulb temperature or indoor dry-bulb and outdoor wet-bulb temperatures. This curve is a linear, quadratic, or cubic curve if the heating capacity is solely a function of indoor dry-bulb temperature (i.e., the indoor terminal units weighted average inlet air dry-bulb temperatures). Without specific manufacturers data indicating otherwise, the use of a single independent variable is recommended for this coil type. If, however, the user has reason to believe the heating capacity is both a function of indoor dry-bulb temperature and outdoor wet-bulb temperature (and has manufacturers data to create the performance curve), a bi-quadratic equation using weighted average indoor dry-bulb temperature and condenser entering air wet-bulb temperature as the independent variables may be used. See the Engineering Reference for more discussion on using this input field.

Note: The choice of using either outdoor dry-bulb temperature or outdoor wet-bulb temperature as the independent variable in this performance curve is set in the parent object AirConditioner: VariableRefrigerantFlow.";
		public static string Field_HeatingCapacityRatioModifierFunctionOfTemperatureCurveName => Value._Field_HeatingCapacityRatioModifierFunctionOfTemperatureCurveName;

		private string _Field_HeatingCapacityRatioModifierFunctionOfFlowFractionCurveName = @"This alpha field defines the name of a linear, quadratic or cubic performance curve (ref: Performance Curves) that parameterizes the variation of heating capacity as a function of the ratio of actual air flow rate across the heating coil to the rated air flow rate (i.e., fraction of full load flow). The output of this curve is multiplied by the gross rated heating capacity and the heating capacity modifier curve (function of temperature) to give the gross heating capacity at the specific temperature and air flow conditions at which the coil is operating. The curve is normalized to have the value of 1.0 when the actual air flow rate equals the rated air flow rate.

Following is an example input for the object.



COIL:Heating:DX:VariableRefrigerantFlow,
  TU1 VRF DX Heating Coil,        !- Coil Name
  VRFAvailSched,                  !- Availability Schedule
  autosize,                       !- Gross Rated Heating Capacity {W}
  autosize,                       !- Rated Air Flow Rate {m3/s}
  TU1 VRF DX CCoil Outlet Node,   !- Coil Air Inlet Node
  TU1 VRF DX HCoil Outlet Node,   !- Coil Air Outlet Node
  VRFTUHeatCapFT,                 !- Heating Capacity Ratio Modifier Function of Temperature Curve Name
  VRFACCoolCapFFF;                !- Total heating capacity modifier curve Function of Flow Fraction";
		public static string Field_HeatingCapacityRatioModifierFunctionOfFlowFractionCurveName => Value._Field_HeatingCapacityRatioModifierFunctionOfFlowFractionCurveName;

	

}

	public sealed class CoilCoolingDXVariableRefrigerantFlowFluidTemperatureControl
    { 

		private string _name = @"Coil:Cooling:DX:VariableRefrigerantFlow:FluidTemperatureControl";
		private string _note = @"This coil object is specifically designed for the physics based VRF model applicable for Fluid Temperature Control (VRF-FluidTCtrl). It describes the performance of the indoor unit coil of the VRF system operating at cooling mode. The name of this object is entered as an input to the object {ZoneHVAC:TerminalUnit:VariableRefrigerantFlow}. The outdoor unit part of the VRF system is modeled separately (refer to {AirConditioner:VariableRefrigerantFlow:FluidTemperatureControl} object).
";
		

		private static readonly System.Lazy<CoilCoolingDXVariableRefrigerantFlowFluidTemperatureControl> instance = new System.Lazy<CoilCoolingDXVariableRefrigerantFlowFluidTemperatureControl>(() => new CoilCoolingDXVariableRefrigerantFlowFluidTemperatureControl());
        private static CoilCoolingDXVariableRefrigerantFlowFluidTemperatureControl Value => instance.Value;
		public static string Name => Value._name;
        public static string Note => Value._note;
		private CoilCoolingDXVariableRefrigerantFlowFluidTemperatureControl(){}

	private string _Field_Name = @"This alpha field defines a unique user-assigned name for an instance of a VRF DX cooling coil. Any reference to this DX cooling coil by another object will use this name. This cooling coil name must be entered in the AirConditioner:VariableRefrigerantFlow:FluidTemperatureControl object. No other system type uses this specific coil.";
		public static string Field_Name => Value._Field_Name;

		private string _Field_AvailabilityScheduleName = @"This alpha field defines the name of the coil availability schedule. A name should be entered to define the availability of the coil. Schedule values of 0 denote the DX cooling coil is off. A schedule value greater than 0 indicates that the coil can operate during the time period. If this field is blank, the schedule has values of 1 for all time periods.";
		public static string Field_AvailabilityScheduleName => Value._Field_AvailabilityScheduleName;

		private string _Field_CoilAirInletNode = @"This alpha field defines the name of the air inlet node entering the DX cooling coil.";
		public static string Field_CoilAirInletNode => Value._Field_CoilAirInletNode;

		private string _Field_CoilAirOutletNode = @"This alpha field defines the name of the air outlet node exiting the DX cooling coil.";
		public static string Field_CoilAirOutletNode => Value._Field_CoilAirOutletNode;

		private string _Field_RatedTotalCoolingCapacity = @"This numeric field defines the gross rated total cooling capacity of the DX cooling coil in watts. The total cooling capacity should be a gross , i.e., the effect of supply air fan heat NOT accounted for. Note that if autosize is selected for this field, the cooling design supply air temperature provided in the Sizing:Zone object needs to be in accordance with the Indoor Unit Evaporating Temperature Function of Superheating Curve provided below in this object.";
		public static string Field_RatedTotalCoolingCapacity => Value._Field_RatedTotalCoolingCapacity;

		private string _Field_RatedSensibleHeatRatio = @"This numeric field defines the gross sensible heat ratio (sensible capacity divided by total cooling capacity) of the DX cooling coil at rated conditions. Both the sensible and total cooling capacities used to define the Rated SHR should be gross (i.e., the effect of supply air fan heat is NOT accounted for)";
		public static string Field_RatedSensibleHeatRatio => Value._Field_RatedSensibleHeatRatio;

		private string _Field_IndoorUnitReferenceSuperheating = @"This numeric field defines the reference superheating degrees of the indoor unit. If this field is blank, the default value of 5.0 C is used.";
		public static string Field_IndoorUnitReferenceSuperheating => Value._Field_IndoorUnitReferenceSuperheating;

		private string _Field_IndoorUnitEvaporatingTemperatureFunctionOfSuperheatingCurveName = @"This alpha field defines the name of a quadratic performance curve that parameterizes the variation of indoor unit evaporating temperature as a function of superheating degrees. The output of this curve is the temperature difference between the coil surface air temperature and the evaporating temperature.";
		public static string Field_IndoorUnitEvaporatingTemperatureFunctionOfSuperheatingCurveName => Value._Field_IndoorUnitEvaporatingTemperatureFunctionOfSuperheatingCurveName;

		private string _Field_NameOfWaterStorageTankForCondensateCollection = @"This field is optional. It is used to describe where condensate from the coil is collected. If blank or omitted, then any coil condensate is discarded. Enter the name of Water Storage Tank object defined elsewhere and the condensate will then be collected in that tank.

Following is an example input for a Coil:Cooling:DX:VariableRefrigerantFlow:FluidTemperatureControl object.



Coil:Cooling:DX:VariableRefrigerantFlow:FluidTemperatureControl,
  TU1 VRF DX Cooling Coil, !- Name
  VRFAvailSched,           !- Availability Schedule Name
  TU1 VRF DX CCoil Inlet Node,  !- Coil Air Inlet Node
  TU1 VRF DX CCoil Outlet Node,  !- Coil Air Outlet Node
  autosize,                !- Rated Total Cooling Capacity {W}
  autosize,                !- Rated Sensible Heat Ratio
  3,                       !- Indoor Unit Reference Superheating Degrees {C}    
  IUEvapTempCurve,         !- Indoor Unit Evaporating Temperature Function of Superheating Curve Name    
  ;                        !- Name of Water Storage Tank for Condensate Collection

  Curve:Quadratic,
  IUEvapTempCurve,         !- Name
  0,                       !- Coefficient1 Constant
  0.843,                   !- Coefficient2 x
  0,                       !- Coefficient3 x**2
  0,                       !- Minimum Value of x    
  15,                      !- Maximum Value of x    
  ,                        !- Minimum Curve Output
  ,                        !- Maximum Curve Output
  Temperature,             !- Input Unit Type for X
  Temperature;             !- Output Unit Type";
		public static string Field_NameOfWaterStorageTankForCondensateCollection => Value._Field_NameOfWaterStorageTankForCondensateCollection;

	

}

	public sealed class CoilHeatingDXVariableRefrigerantFlowFluidTemperatureControl
    { 

		private string _name = @"Coil:Heating:DX:VariableRefrigerantFlow:FluidTemperatureControl";
		private string _note = @"This coil object is specifically designed for the physics based VRF model applicable for Fluid Temperature Control (VRF-FluidTCtrl). It describes the performance of the indoor unit coil of the VRF system operating at heating mode. The name of this object is entered as an input to the object {ZoneHVAC:TerminalUnit:VariableRefrigerantFlow}. The outdoor unit part of the VRF system is modeled separately (refer to {AirConditioner:VariableRefrigerantFlow:FluidTemperatureControl} object).
";
		

		private static readonly System.Lazy<CoilHeatingDXVariableRefrigerantFlowFluidTemperatureControl> instance = new System.Lazy<CoilHeatingDXVariableRefrigerantFlowFluidTemperatureControl>(() => new CoilHeatingDXVariableRefrigerantFlowFluidTemperatureControl());
        private static CoilHeatingDXVariableRefrigerantFlowFluidTemperatureControl Value => instance.Value;
		public static string Name => Value._name;
        public static string Note => Value._note;
		private CoilHeatingDXVariableRefrigerantFlowFluidTemperatureControl(){}

	private string _Field_Name = @"This alpha field defines a unique user-assigned name for an instance of a VRF DX heating coil. Any reference to this DX heating coil by another object will use this name. This heating coil name must be entered in the AirConditioner:VariableRefrigerantFlow:FluidTemperatureControl object. No other system type uses this specific coil.";
		public static string Field_Name => Value._Field_Name;

		private string _Field_AvailabilitySchedule = @"This alpha field defines the name of the schedule (ref: Schedule) that denotes whether the DX heating coil can run during a given time period. A schedule value greater than 0 (usually 1 is used) indicates that the unit can be on during the time period. A value less than or equal to 0 (usually 0 is used) denotes that the unit must be off for the time period. If this field is blank the unit is always available.";
		public static string Field_AvailabilitySchedule => Value._Field_AvailabilitySchedule;

		private string _Field_CoilAirInletNode = @"This alpha field defines the name of the HVAC system node from which the DX heating coil draws its inlet air.";
		public static string Field_CoilAirInletNode => Value._Field_CoilAirInletNode;

		private string _Field_CoilAirOutletNode = @"This alpha field defines the name of the HVAC system node to which the DX heating coil sends its outlet air.";
		public static string Field_CoilAirOutletNode => Value._Field_CoilAirOutletNode;

		private string _Field_RatedTotalHeatingCapacity = @"This numeric field defines the total, full load gross heating capacity in watts of the DX coil unit at rated conditions. The value entered here must be greater than 0. The gross total heating capacity should not account for the effect of supply air fan heat.";
		public static string Field_RatedTotalHeatingCapacity => Value._Field_RatedTotalHeatingCapacity;

		private string _Field_IndoorUnitReferenceSubcooling = @"This numeric field defines the reference subcooling degrees of the indoor unit. If this field is blank, the default value of 5.0 C is used.";
		public static string Field_IndoorUnitReferenceSubcooling => Value._Field_IndoorUnitReferenceSubcooling;

		private string _Field_IndoorUnitCondensingTemperatureFunctionOfSubcoolingCurveName = @"This alpha field defines the name of a quadratic performance curve that parameterizes the variation of indoor unit condensing temperature as a function of subcooling degrees. The output of this curve is the temperature difference between the condensing temperature and the coil surface air temperature.

Following is an example input for a Coil:Heating:DX:VariableRefrigerantFlow:FluidTemperatureControl object.



Coil:Heating:DX:VariableRefrigerantFlow:FluidTemperatureControl,
  TU1 VRF DX Heating Coil, !- Name
  VRFAvailSched,           !- Availability Schedule
  TU1 VRF DX CCoil Outlet Node,  !- Coil Air Inlet Node
  TU1 VRF DX HCoil Outlet Node,  !- Coil Air Outlet Node
  autosize,                !- Rated Total Heating Capacity {W}
  5,                       !- Indoor Unit Reference Subcooling Degrees {C}    
  IUCondTempCurve;         !- Indoor Unit Condensing Temperature Function of Subcooling Curve Name

  Curve:Quadratic,
  IUCondTempCurve,         !- Name
  -1.85,                   !- Coefficient1 Constant
  0.411,                   !- Coefficient2 x
  0.0196,                  !- Coefficient3 x**2
  0,                       !- Minimum Value of x    
  20,                      !- Maximum Value of x    
  ,                        !- Minimum Curve Output
  ,                        !- Maximum Curve Output
  Temperature,             !- Input Unit Type for X
  Temperature;             !- Output Unit Type";
		public static string Field_IndoorUnitCondensingTemperatureFunctionOfSubcoolingCurveName => Value._Field_IndoorUnitCondensingTemperatureFunctionOfSubcoolingCurveName;

	

}

	public sealed class CoilHeatingFuel
    { 

		private string _name = @"Coil:Heating:Fuel";
		private string _note = @"The fuel heating coil is a simple capacity model with a user inputted gas burner efficiency. The default for the burner efficiency is 80%. This coil will be simpler than shown in Figure~\ref{fig:example-air-loop-heating-cooling-coil} since it will only have air nodes to connect it in the system. The coil can be used in the air loop simulation or in the zone equipment as a reheat coil. Depending on where it is used determines if this coil is temperature or capacity controlled. If used in the air loop simulation it will be controlled to a specified temperature scheduled from the Setpoint Manager. If it is used in zone equipment, it will be controlled from the zone thermostat by meeting the zone demand.
";
		

		private static readonly System.Lazy<CoilHeatingFuel> instance = new System.Lazy<CoilHeatingFuel>(() => new CoilHeatingFuel());
        private static CoilHeatingFuel Value => instance.Value;
		public static string Name => Value._name;
        public static string Note => Value._note;
		private CoilHeatingFuel(){}

	private string _Field_Name = @"A unique identifying name for each coil.";
		public static string Field_Name => Value._Field_Name;

		private string _Field_AvailabilityScheduleName = @"Schedule that defines when the coil is available. If the schedule s value is 0.0, then the coil is not available and flow will not be requested. If the schedule s value is > 0.0 (usually 1 is used), the coil is available. If this field is blank, the schedule has values of 1 for all time periods. Schedule values must be > = 0 and < = 1.";
		public static string Field_AvailabilityScheduleName => Value._Field_AvailabilityScheduleName;

		private string _Field_FuelType = @"This field designates the appropriate fuel type for the coil. Valid fuel types are: Gas, NaturalGas, Propane, FuelOil1, FuelOil2, Diesel, Gasoline, Coal, Steam, DistrictHeating, DistrictCooling, OtherFuel1 and OtherFuel2. The fuel type triggers the application of consumption amounts to the appropriate energy meters. NaturalGas is the default.";
		public static string Field_FuelType => Value._Field_FuelType;

		private string _Field_BurnerEfficiency = @"This is user inputted gas burner efficiency (decimal, not percent) and is defaulted to 80%.";
		public static string Field_BurnerEfficiency => Value._Field_BurnerEfficiency;

		private string _Field_NominalCapacity = @"This is the maximum capacity of the coil (W). This controlled coil will only provide the needed capacity to meet the control criteria whether it is temperature or capacity controlled. This field is autosizable.";
		public static string Field_NominalCapacity => Value._Field_NominalCapacity;

		private string _Field_AirInletNodeName = @"The name of the air inlet to the coil, i.e.~Heating Coil Air Inlet Node.";
		public static string Field_AirInletNodeName => Value._Field_AirInletNodeName;

		private string _Field_AirOutletNodeName = @"The name of the air outlet from the coil, i.e.~Heating Coil Air Outlet Node.";
		public static string Field_AirOutletNodeName => Value._Field_AirOutletNodeName;

		private string _Field_TemperatureSetpointNodeName = @"If the coil is used in the air loop simulation and is temperature controlled using a Set Point Manager, then the node that is the control node needs to be specified here. If the coil is used in an air terminal unit, the coil is load controlled and a control node set point is not required.";
		public static string Field_TemperatureSetpointNodeName => Value._Field_TemperatureSetpointNodeName;

		private string _Field_ParasiticElectricLoad = @"This is the parasitic electric load associated with the coil operation, such as an inducer fan, etc.. This will be modified by the PLR (or coil runtime fraction if a part-load fraction correlation is provided in the next input field) to reflect the time of operation in a simulation timestep.";
		public static string Field_ParasiticElectricLoad => Value._Field_ParasiticElectricLoad;

		private string _Field_PartLoadFractionCorrelationCurveName = @"This alpha field defines the name of a quadratic or cubic performance curve (Ref: Performance Curves) that parameterizes the variation of fuel consumption rate by the heating coil as a function of the part load ratio (PLR, sensible heating load/nominal capacity of the heating coil). For any simulation timestep, the nominal fuel consumption rate (heating load/burner efficiency) is divided by the part-load fraction (PLF) if a part-load curve has been defined. The part-load curve accounts for efficiency losses due to transient coil operation.

The part-load fraction correlation should be normalized to a value of 1.0 when the part load ratio equals 1.0 (i.e., no efficiency losses when the heating coil runs continuously for the simulation timestep). For PLR values between 0 and 1 ( 0 < = PLR < 1), the following rules apply:

PLF > = 0.7 and PLF > = PLR

If PLF < 0.7 a warning message is issued, the program resets the PLF value to 0.7, and the simulation proceeds. The runtime fraction of the heating coil is defined a PLR/PLF. If PLF < PLR, then a warning message is issues and the runtime fraction of the coil is limited to 1.0.

A typical part load fraction correlation for a conventional gas heating coil (e.g., residential furnace) would be:


       PLF = 0.8 + 0.2(PLR)";
		public static string Field_PartLoadFractionCorrelationCurveName => Value._Field_PartLoadFractionCorrelationCurveName;

		private string _Field_ParasiticFuelLoad = @"This numeric field is the parasitic fuel load associated with the coil's operation (Watts), such as a standing pilot light. The model assumes that this parasitic load is consumed only for the portion of the simulation timestep where the heating coil is not operating.";
		public static string Field_ParasiticFuelLoad => Value._Field_ParasiticFuelLoad;

	

}

	public sealed class CoilHeatingGasMultiStage
    { 

		private string _name = @"Coil:Heating:Gas:MultiStage";
		private string _note = @"The multi stage gas heating coil is a simple capacity model with a user inputted gas burner efficiencies at different stages. This coil will only have air nodes to connect it in the system. The coil can be used in the air loop simulation or in the zone equipment as a reheat coil. Depending on where it is used determines if this coil is temperature or capacity controlled. If used in the air loop simulation it will be controlled to a specified temperature scheduled from the Setpoint Manager. If it is used in zone equipment, it will be controlled from the zone thermostat by meeting the zone demand. For the time being, this coil model can only be called by the parent object AirLoopHVAC:UnitaryHeatPump:AirToAir:MultiSpeed.
";
		

		private static readonly System.Lazy<CoilHeatingGasMultiStage> instance = new System.Lazy<CoilHeatingGasMultiStage>(() => new CoilHeatingGasMultiStage());
        private static CoilHeatingGasMultiStage Value => instance.Value;
		public static string Name => Value._name;
        public static string Note => Value._note;
		private CoilHeatingGasMultiStage(){}

	private string _Field_Name = @"A unique identifying name for each coil.";
		public static string Field_Name => Value._Field_Name;

		private string _Field_AvailabilityScheduleName = @"Schedule that defines when the coil is available. If the schedule s value is 0.0, then the coil is not available and flow will not be requested. If the schedule s value is > 0.0 (usually 1 is used), the coil is available. If this field is blank, the schedule has values of 1 for all time periods. Schedule values must be > = 0 and < = 1.";
		public static string Field_AvailabilityScheduleName => Value._Field_AvailabilityScheduleName;

		private string _Field_AirInletNodeName = @"The name of the air inlet to the gas coil, i.e.~Heating Coil Air Inlet Node.";
		public static string Field_AirInletNodeName => Value._Field_AirInletNodeName;

		private string _Field_AirOutletNodeName = @"The name of the air outlet from the gas coil, i.e.~Heating Coil Air Outlet Node.";
		public static string Field_AirOutletNodeName => Value._Field_AirOutletNodeName;

		private string _Field_TemperatureSetpointNodeName = @"If the coil is used in the air loop simulation and is temperature controlled using a Set Point Manager, then the node that is the control node needs to be specified here. If the coil is used in an air terminal unit, the coil is load controlled and a control node set point is not required. At present, the multistage gas heating coil does not model temperature setoint control.";
		public static string Field_TemperatureSetpointNodeName => Value._Field_TemperatureSetpointNodeName;

		private string _Field_PartLoadFractionCorrelationCurveName = @"This alpha field defines the name of a quadratic or cubic performance curve (Ref: Performance Curves) that parameterizes the variation of gas consumption rate by the heating coil as a function of the part load ratio (PLR, sensible heating load/nominal capacity of the heating coil). For any simulation timestep, the nominal gas consumption rate (heating load/burner efficiency) is divided by the part-load fraction (PLF) if a part-load curve has been defined. The part-load curve accounts for efficiency losses due to transient coil operation.

The part-load fraction correlation should be normalized to a value of 1.0 when the part load ratio equals 1.0 (i.e., no efficiency losses when the heating coil runs continuously for the simulation timestep). For PLR values between 0 and 1 ( 0 < = PLR < 1), the following rules apply:

PLF > = 0.7 and PLF > = PLR

If PLF < 0.7 a warning message is issued, the program resets the PLF value to 0.7, and the simulation proceeds. The runtime fraction of the heating coil is defined a PLR/PLF. If PLF < PLR, then a warning message is issues and the runtime fraction of the coil is limited to 1.0.

A typical part load fraction correlation for a conventional gas heating coil (e.g., residential furnace) would be:


       PLF = 0.8 + 0.2(PLR)";
		public static string Field_PartLoadFractionCorrelationCurveName => Value._Field_PartLoadFractionCorrelationCurveName;

		private string _Field_ParasiticGasLoad = @"This numeric field is the parasitic gas load associated with the gas coil s operation (Watts), such as a standing pilot light. The model assumes that this parasitic load is consumed only for the portion of the simulation timestep where the gas heating coil is not operating.";
		public static string Field_ParasiticGasLoad => Value._Field_ParasiticGasLoad;

		private string _Field_Stage1GasBurnerEfficiency = @"This is user inputted stage 1 gas burner efficiency (decimal, not percent) and is defaulted to 80%.";
		public static string Field_Stage1GasBurnerEfficiency => Value._Field_Stage1GasBurnerEfficiency;

		private string _Field_Stage1NominalCapacity = @"This is the stage 1 capacity of the coil (W). This controlled coil will only provide the needed capacity to meet the control criteria whether it is temperature or capacity controlled. This field is autosizable.";
		public static string Field_Stage1NominalCapacity => Value._Field_Stage1NominalCapacity;

		private string _Field_Stage1ParasiticElectricLoad = @"This is the stage 1 parasitic electric load associated with the gas coil operation, such as an inducer fan, etc.. This will be modified by the PLR (or coil runtime fraction if a part-load fraction correlation is provided in the next input field) to reflect the time of operation in a simulation timestep.";
		public static string Field_Stage1ParasiticElectricLoad => Value._Field_Stage1ParasiticElectricLoad;

		private string _Field_Stage2GasBurnerEfficiency = @"This is user inputted stage 2 gas burner efficiency (decimal, not percent) and is defaulted to 80%.";
		public static string Field_Stage2GasBurnerEfficiency => Value._Field_Stage2GasBurnerEfficiency;

		private string _Field_Stage2NominalCapacity = @"This is the stage 2 capacity of the coil (W). This controlled coil will only provide the needed capacity to meet the control criteria whether it is temperature or capacity controlled. This field is autosizable.";
		public static string Field_Stage2NominalCapacity => Value._Field_Stage2NominalCapacity;

		private string _Field_Stage2ParasiticElectricLoad = @"This is the stage 2 parasitic electric load associated with the gas coil operation, such as an inducer fan, etc.. This will be modified by the PLR (or coil runtime fraction if a part-load fraction correlation is provided in the next input field) to reflect the time of operation in a simulation timestep.";
		public static string Field_Stage2ParasiticElectricLoad => Value._Field_Stage2ParasiticElectricLoad;

		private string _Field_Stage3GasBurnerEfficiency = @"This is user inputted stage 3 gas burner efficiency (decimal, not percent) and is defaulted to 80%.";
		public static string Field_Stage3GasBurnerEfficiency => Value._Field_Stage3GasBurnerEfficiency;

		private string _Field_Stage3NominalCapacity = @"This is the stage 3 capacity of the coil (W). This controlled coil will only provide the needed capacity to meet the control criteria whether it is temperature or capacity controlled. This field is autosizable.";
		public static string Field_Stage3NominalCapacity => Value._Field_Stage3NominalCapacity;

		private string _Field_Stage3ParasiticElectricLoad = @"This is the stage 3 parasitic electric load associated with the gas coil operation, such as an inducer fan, etc.. This will be modified by the PLR (or coil runtime fraction if a part-load fraction correlation is provided in the next input field) to reflect the time of operation in a simulation timestep.";
		public static string Field_Stage3ParasiticElectricLoad => Value._Field_Stage3ParasiticElectricLoad;

		private string _Field_Stage4GasBurnerEfficiency = @"This is user inputted stage 4 gas burner efficiency (decimal, not percent) and is defaulted to 80%.";
		public static string Field_Stage4GasBurnerEfficiency => Value._Field_Stage4GasBurnerEfficiency;

		private string _Field_Stage4NominalCapacity = @"This is the stage 4 capacity of the coil (W). This controlled coil will only provide the needed capacity to meet the control criteria whether it is temperature or capacity controlled. This field is autosizable.";
		public static string Field_Stage4NominalCapacity => Value._Field_Stage4NominalCapacity;

		private string _Field_Stage4ParasiticElectricLoad = @"This is the stage 4 parasitic electric load associated with the gas coil operation, such as an inducer fan, etc.. This will be modified by the PLR (or coil runtime fraction if a part-load fraction correlation is provided in the next input field) to reflect the time of operation in a simulation timestep.

An example in IDF form:



Coil:Heating:Gas:MultiStage,
  Heat Pump Heating Coil 1,                 !- Name
  FanAndCoilAvailSched,                         !- Availability Schedule Name
  Heating Coil Air Inlet Node,           !- Air Inlet Node Name
  SuppHeating Coil Air Inlet Node,   !- Air Outlet Node Name
  ,                                               !- Temp Setpoint node name
  ,                                               !- Part Load Fraction Correlation Curve Name
  ,                                               !- Parasitic Gas Load
  3,                                             !- Number of Speeds
  0.92,                                       !- Speed 1 Gas burner Efficiency
  Autosize,                               !- Speed 1 Nominal Capacity {W}
  ,                                               !- Stage 1 Parasitic Electric Load {W}
  0.88,                                       !- Speed 2 Gas burner Efficiency
  Autosize,                               !- Speed 2 Nominal Capacity {W}
  ,                                               !- Stage 2 Parasitic Electric Load {W}
  0.84,                                       !- Speed 3 Gas burner Efficiency
  Autosize,                               !- Speed 3 Nominal Capacity {W}
  ;                                               !- Stage 3 Parasitic Electric Load {W}";
		public static string Field_Stage4ParasiticElectricLoad => Value._Field_Stage4ParasiticElectricLoad;

	

}

	public sealed class CoilCoolingWaterDetailedGeometry
    { 

		private string _name = @"Coil:Cooling:Water:DetailedGeometry";
		private string _note = @"This detailed flat fin coil model is for continuous plate fins. First, found in Type 12 from MODSIM, but now programmed directly from Elmahdy, A.H. and Mitalas, G.P. Then there was a discontinuity in their original model that was fixed in the EnergyPlus implementation. Now this model can be used in an interval halving solution technique for controlling this coil without the problems of non-convergence.

``A Model for Cooling and Dehumidifying Coils for Use in Energy Requirements for Buildings'' ASHRAE Transactions, Vol. 83, Part 2, pp.~103-117 (1977). For fin efficiency see K.A. Gardner, ``Efficiency of Extended ,'' Transactions ASME, Vol. 67, pp.~621-631, 1945.

The following figures illustrate the geometry and circuits in a cooling coil.

\begin{figure}[hbtp] % fig 136
\centering
\includegraphics[width=0.9\textwidth, height=0.9\textheight, keepaspectratio=true]{media/image353.png}
\caption{Geometry of a Cooling Coil (CC) \protect \label{fig:geometry-of-a-cooling-coil-cc}}
\end{figure}

\begin{figure}[hbtp] % fig 137
\centering
\includegraphics[width=0.9\textwidth, height=0.9\textheight, keepaspectratio=true]{media/image354.png}
\caption{Number of Coolant Circuits (CCNCC) \protect \label{fig:number-of-coolant-circuits-ccncc}}
\end{figure}
";
		

		private static readonly System.Lazy<CoilCoolingWaterDetailedGeometry> instance = new System.Lazy<CoilCoolingWaterDetailedGeometry>(() => new CoilCoolingWaterDetailedGeometry());
        private static CoilCoolingWaterDetailedGeometry Value => instance.Value;
		public static string Name => Value._name;
        public static string Note => Value._note;
		private CoilCoolingWaterDetailedGeometry(){}

	private string _Field_Name = @"A unique identifying name for each coil.";
		public static string Field_Name => Value._Field_Name;

		private string _Field_AvailabilityScheduleName = @"Schedule that defines when the coil is available. If the schedule s value is 0.0, then the coil is not available and flow will not be requested. If the schedule s value is > 0.0 (usually 1 is used), the coil is available. If this field is blank, the schedule has values of 1 for all time periods.";
		public static string Field_AvailabilityScheduleName => Value._Field_AvailabilityScheduleName;

		private string _Field_MaximumWaterFlowRate = @"The maximum possible water flow rate (m^{3}/sec) through the coil.";
		public static string Field_MaximumWaterFlowRate => Value._Field_MaximumWaterFlowRate;

		private string _Field_TubeOutsideSurfaceArea = @"The outside surface area (m^{2}) of the tubes that is exposed to air (i.e.~the outside area of the unfinned tubes minus the area of tubes covered by the fins).";
		public static string Field_TubeOutsideSurfaceArea => Value._Field_TubeOutsideSurfaceArea;

		private string _Field_TotalTubeInsideArea = @"The total surface area (m^{2}) inside the tubes (water side).";
		public static string Field_TotalTubeInsideArea => Value._Field_TotalTubeInsideArea;

		private string _Field_FinSurfaceArea = @"The total surface area (m^{2}) of the fins attached to the coil.";
		public static string Field_FinSurfaceArea => Value._Field_FinSurfaceArea;

		private string _Field_MinimumAirFlowArea = @"The minimum cross sectional area (m^{2}) available for air passage. Frequently calculated as


       Amin  = (Amin/Afr)\*Afr


where Afr is the frontal area of the heat exchanger, and (Amin/Afr) is the ratio of the minimum airflow area to frontal area.";
		public static string Field_MinimumAirFlowArea => Value._Field_MinimumAirFlowArea;

		private string _Field_CoilDepth = @"The distance (m) from the front of the coil to the back of the coil in the airflow direction. Also called the fin depth. Illustrated in the figure (Figure~\ref{fig:geometry-of-a-cooling-coil-cc}. Geometry of a Cooling Coil (CC)).";
		public static string Field_CoilDepth => Value._Field_CoilDepth;

		private string _Field_FinDiameter = @"The outside diameter (m) of the fins. Used instead of COIL HEIGHT";
		public static string Field_FinDiameter => Value._Field_FinDiameter;

		private string _Field_FinThickness = @"Thickness (m) of the air side fins.";
		public static string Field_FinThickness => Value._Field_FinThickness;

		private string _Field_TubeInsideDiameter = @"The inside diameter (m) of the tubes.";
		public static string Field_TubeInsideDiameter => Value._Field_TubeInsideDiameter;

		private string _Field_TubeOutsideDiameter = @"The outside diameter (m) of the tubes.";
		public static string Field_TubeOutsideDiameter => Value._Field_TubeOutsideDiameter;

		private string _Field_TubeThermalConductivity = @"The thermal conductivity (W/m-K) of the tube material.";
		public static string Field_TubeThermalConductivity => Value._Field_TubeThermalConductivity;

		private string _Field_FinThermalConductivity = @"The thermal conductivity (W/m-K) of the fin material.";
		public static string Field_FinThermalConductivity => Value._Field_FinThermalConductivity;

		private string _Field_FinSpacing = @"The spacing (m) of the fins, centerline to centerline.";
		public static string Field_FinSpacing => Value._Field_FinSpacing;

		private string _Field_TubeDepthSpacing = @"The spacing (m) of the tube rows, centerline to centerline. Also called tube longitudinal spacing.";
		public static string Field_TubeDepthSpacing => Value._Field_TubeDepthSpacing;

		private string _Field_NumberOfTubeRows = @"The number of tube rows in the direction of the airflow.";
		public static string Field_NumberOfTubeRows => Value._Field_NumberOfTubeRows;

		private string _Field_NumberOfTubesPerRow = @"The number of tubes per row. (NTPR in the above diagram)";
		public static string Field_NumberOfTubesPerRow => Value._Field_NumberOfTubesPerRow;

		private string _Field_WaterInletNodeName = @"The name of the water coil inlet from the chilled water loop, i.e.~Cooling Coil Water Inlet Node.";
		public static string Field_WaterInletNodeName => Value._Field_WaterInletNodeName;

		private string _Field_WaterOutletNodeName = @"The name of the water coil outlet from the chilled water loop, i.e.~Cooling Coil Water Outlet Node.";
		public static string Field_WaterOutletNodeName => Value._Field_WaterOutletNodeName;

		private string _Field_AirInletNodeName = @"The name of the air inlet to the water coil, i.e.~Cooling Coil Air Inlet Node.";
		public static string Field_AirInletNodeName => Value._Field_AirInletNodeName;

		private string _Field_AirOutletNodeName = @"The name of the air outlet from the water coil, i.e.~Cooling Coil Air Outlet Node.";
		public static string Field_AirOutletNodeName => Value._Field_AirOutletNodeName;

		private string _Field_CondensateCollectionWaterStorageTankName = @"This field is optional. It is used to describe where condensate from the coil is collected. If blank or omitted, then any coil condensate is discarded. Enter the name of Water Storage Tank object defined elsewhere and the condensate will then be collected in that tank.";
		public static string Field_CondensateCollectionWaterStorageTankName => Value._Field_CondensateCollectionWaterStorageTankName;

		private string _Field_DesignWaterTemperatureDifference = @"This input field is optional. If specified, it is used for sizing the {Design Water Flow Rate}. If blank or omitted, the {Loop Design Temperature Difference} value specified in {Sizing:Plant} object is used for sizing the {Design Water Flow Rate}.

Examples of these statements in an IDF are:



Coil:Cooling:Water:DetailedGeometry,
  Detailed Cooling Coil,   !Name of cooling coil
  CoolingCoilAvailSched,   !Cooling Coil Schedule
  0.0011,                   !Max Water Flow Rate of Coil m3/sec
  6.23816,                 !Tube Outside Surf Area
  6.20007018,           !Tube Inside Surf Area
  101.7158224,         !Fin Surf Area
  0.300606367,         !Min Air Flow Area
  0.165097968,         !Coil Depth
  0.43507152,           !Coil Height
  0.001499982,         !Fin Thickness
  0.014449958,         !Tube Inside Diameter
  0.015879775,         !Tube Outside Diameter
  386.0,                     !Tube Thermal Conductivity
  204.0,                     !Fin Thermal Conductivity
  0.001814292,         !Fin Spacing
  0.02589977,           !Tube Depth
  6,                             !Number of Tube Rows
  16,                           !Number of Tubes per Row
  NODE_32,NODE_33, !Coil Water Side Inlet & Outlet Node
  NODE_5, NODE_6;   !Coil Air Side Inlet & Outlet Node";
		public static string Field_DesignWaterTemperatureDifference => Value._Field_DesignWaterTemperatureDifference;

	

}

	public sealed class CoilCoolingDXSingleSpeed
    { 

		private string _name = @"Coil:Cooling:DX:SingleSpeed";
		private string _note = @"This DX cooling coil input requires an availability schedule, the gross rated total cooling capacity, the gross rated SHR, the gross rated COP, and the rated air volume flow rate. The latter 4 inputs determine the coil performance at the rating point (air entering the cooling coil at 26.7 ??C drybulb/19.4 ??C wetbulb and air entering the outdoor condenser coil at 35 ??C drybulb/23.9 ??C wetbulb). The rated air volume flow rate should be between .00004027 m^{3}/s and .00006041 m^{3}/s per watt of gross rated total cooling capacity (300 to 450 cfm/ton).

The rated volumetric air flow to total cooling capacity ratio for 100% dedicated outdoor air (DOAS) application DX cooling coils should be between 0.00001677 (m3/s)/W (125 cfm/ton) and 0.00003355 (m3/s)/W (250 cfm/ton).

Pumped refrigerant economizer integrated with the single speed DX cooling coil model will use exactly the same model except that performance curves use lookup table to cover the pumped refrigerant economizer and the compressor operating ranges. One or two independent variables may used to represent the performance data.

This model requires 5 curves as follows:


\def\labelenumi{\arabic{enumi}.}

  The total cooling capacity modifier curve (function of temperature) is a curve with two independent variables: wet-bulb temperature of the air entering the cooling coil, and dry-bulb temperature of the air entering the air-cooled condenser coil (wet-bulb temperature if modeling an evaporative-cooled condenser). The curve is normalized to 1 at 19.44 C indoor wet-bulb temperature and 35 C outdoor dry-bulb temperature. The output of this curve is multiplied by the gross rated total cooling capacity to give the gross total cooling capacity at specific temperature operating conditions (i.e., at temperatures different from the rating point temperatures). This curve is typically a biquadratic but any curve or table with two independent variables can be used.

  The total cooling capacity modifier curve (function of flow fraction) is a curve or lookup table with the independent variable being the ratio of the actual air flow rate across the cooling coil to the rated air flow rate (i.e., fraction of full load flow). The curve is normalized to have the value of 1.0 when the actual air flow rate equals the rated air flow rate. The output of this curve is multiplied by the gross rated total cooling capacity and the total cooling capacity modifier curve (function of temperature) to give the gross total cooling capacity at the specific temperature and air flow conditions at which the coil is operating. This curve is typically a quadratic or cubic but any curve or table with one independent variables can be used.

  The energy input ratio (EIR) modifier curve (function of temperature) is a curve with two independent variables: wet-bulb temperature of the air entering the cooling coil, and dry-bulb temperature of the air entering the air-cooled condenser coil (wet-bulb temperature if modeling an evaporative-cooled condenser). The curve is normalized to 1 at 19.44 C indoor wet-bulb temperature and 35 C outdoor dry-bulb temperature. The output of this curve is multiplied by the rated EIR (inverse of the rated COP) to give the EIR at specific temperature operating conditions (i.e., at temperatures different from the rating point temperatures). This curve is typically a biquadratic but any curve or table with two independent variables can be used.

  The energy input ratio (EIR) modifier curve (function of flow fraction) is a curve or lookup table with the independent variable being the ratio of the actual air flow rate across the cooling coil to the rated air flow rate (i.e., fraction of full load flow). The curve is normalized to have the value of 1.0 when the actual air flow rate equals the rated air flow rate. The output of this curve is multiplied by the rated EIR (inverse of the rated COP) and the EIR modifier curve (function of temperature) to give the EIR at the specific temperature and air flow conditions at which the coil is operating. This curve is typically a quadratic or cubic but any curve or table with one independent variables can be used.

  The part load fraction correlation (function of part load ratio) is a curve or a lookup table with the independent variable being part load ratio (sensible cooling load / steady-state sensible cooling capacity). The output of this curve is used in combination with the rated EIR and EIR modifier curves to give the effective EIR for a given simulation timestep. The part load fraction (PLF) correlation accounts for efficiency losses due to compressor cycling. The curve should be normalized to a value of 1.0 when the part-load ratio equals 1.0 (i.e., the compressor(s) run continuously for the simulation timestep). This curve is typically a quadratic or cubic but any curve or table with one independent variables can be used.


The curves are simply specified by name. Curve inputs are described in the curve manager section of this document (see Performance Curves in this document).

The next four input fields are optional and relate to the degradation of latent cooling capacity when the supply air fan operates continuously while the cooling coil/compressor cycle on and off to meet the cooling load. The fan operating mode is determined in the partent object and is considered to either be constant (e.g.~CoilSystem:Cooling:DX) or can be scheduled (e.g.~AirLoopHVAC:UnitaryHeatCool). When scheduled, the schedule value must be greater than 0 to calculate degradation of latent cooling capacity. At times when the parent object s supply air fan operating mode schedule is 0, latent degradation will be ignored. When modeling latent capacity degradation, these next four input fields must all have positive values.

The next input specifies the outdoor air node used to define the conditions of the air entering the outdoor condenser. If this field is left blank, the outdoor temperature entering the condenser is taken directly from the weather data. If this field is not blank, the node name specified must be listed in an OutdoorAir:Node object where the height of the node is taken into consideration when calculating outdoor temperature from the weather data. Alternately, the node name must be specified in an OutdoorAir:NodeList object where the outdoor temperature entering the condenser is taken directly from the weather data.

The next input describes the type of outdoor condenser coil used with the DX cooling coil (Air Cooled or Evap Cooled). The following three inputs are required when modeling an evaporative-cooled condenser: evaporative condenser effectiveness, evaporative condenser air volume flow rate, and the power consumed by the evaporative condenser pump. Crankcase heater capacity and cutout temperature are entered in the next two input fields. These two fields for this object define the name of the water storage tank for supply and condensate collection. See section DX Cooling Coil Model in the EnergyPlus Engineering Document for further details regarding this model.

The last two input fields following the Basin Heater Operating Schedule Name are the Sensible Heat Ratio (SHR) modifier cruve names for temperature and flow fraction. These two input fields are optional and used only when a user intends to override SHR calculated using the apparatus dew point (ADP) and bypass factor (BF) method. See section SHR Calculation Using User Specified SHR Modifier Curves in the EnergyPlus Engineering Document for further details.
";
		

		private static readonly System.Lazy<CoilCoolingDXSingleSpeed> instance = new System.Lazy<CoilCoolingDXSingleSpeed>(() => new CoilCoolingDXSingleSpeed());
        private static CoilCoolingDXSingleSpeed Value => instance.Value;
		public static string Name => Value._name;
        public static string Note => Value._note;
		private CoilCoolingDXSingleSpeed(){}

	private string _Field_Name = @"A unique user-assigned name for an instance of a DX cooling coil. Any reference to this DX coil by another object will use this name.";
		public static string Field_Name => Value._Field_Name;

		private string _Field_AvailabilityScheduleName = @"The name of the schedule (ref: Schedule) that denotes whether the DX cooling coil can run during a given time period. A schedule value greater than 0 (usually 1 is used) indicates that the unit can be on during a given time period. A value less than or equal to 0 (usually 0 is used) denotes that the unit must be off. If this field is blank, the schedule has values of 1 for all time periods.";
		public static string Field_AvailabilityScheduleName => Value._Field_AvailabilityScheduleName;

		private string _Field_GrossRatedTotalCoolingCapacity = @"The total, full load gross cooling capacity (sensible plus latent) in watts of the DX coil unit at rated conditions (air entering the cooling coil at 26.7 ??C drybulb/19.4 ??C wetbulb, air entering the outdoor condenser coil at 35 ??C drybulb/23.9 ??C wetbulb\protect\hyperlink{ux5fftn1}{[1]}, and a cooling coil air flow rate defined by field rated air flow rate below). Capacity should be gross (i.e., the effect of supply air fan heat is NOT accounted for). When used in a heat pump, the gross rated total cooling capacity should be within 20% of the gross rated heating capacity, otherwise a warning message is issued.";
		public static string Field_GrossRatedTotalCoolingCapacity => Value._Field_GrossRatedTotalCoolingCapacity;

		private string _Field_GrossRatedSensibleHeatRatio = @"The sensible heat ratio (SHR = gross sensible cooling capacity divided by gross total cooling capacity) of the DX cooling coil at rated conditions (air entering the cooling coil at 26.7 ??C drybulb/19.4 ??C wetbulb, air entering the outdoor condenser coil at 35 ??C drybulb/23.9 ??C wetbulb), and a cooling coil air flow rate defined by field rated air flow rate below). Both the sensible and total cooling capacities used to define the Rated SHR should be gross (i.e., the effect of supply air fan heat is NOT accounted for).";
		public static string Field_GrossRatedSensibleHeatRatio => Value._Field_GrossRatedSensibleHeatRatio;

		private string _Field_GrossRatedCoolingCOP = @"The coefficient of performance is the ratio of the gross total cooling capacity in watts to electrical power input in watts of the DX cooling coil unit at rated conditions (air entering the cooling coil at 26.7 ??C drybulb/19.4 ??C wetbulb, air entering the outdoor condenser coil at 35 ??C drybulb/ 23.9 ??C wetbulb, and a cooling coil air flow rate defined by field rated air flow rate below). The input power includes electric power for the compressor(s) and condenser fan(s) but does not include the power consumption of the supply air fan. The gross COP should NOT account for the supply air fan. If this input field is left blank, the default value is 3.0.";
		public static string Field_GrossRatedCoolingCOP => Value._Field_GrossRatedCoolingCOP;

		private string _Field_RatedAirFlowRate = @"The air volume flow rate, in m^{3} per second, across the DX cooling coil at rated conditions. The rated air volume flow rate should be between 0.00004027 m^{3}/s and 0.00006041 m^{3}/s per watt of gross rated total cooling capacity (300 to 450 cfm/ton). For DOAS applications the rated air volume flow rate should be between 0.00001677 m^{3}/s and 0.00003355 m^{3}/s per watt of gross rated total cooling capacity (125 to 250 cfm/ton). The gross rated total cooling capacity, gross rated SHR and gross rated COP should be performance information for the unit with air entering the cooling coil at 26.7 ??C drybulb/19.4 ??C wetbulb, air entering the outdoor condenser coil at 35 ??C drybulb/23.9 ??C wetbulb, and the rated air volume flow rate defined here.";
		public static string Field_RatedAirFlowRate => Value._Field_RatedAirFlowRate;

		private string _Field_RatedEvaporatorFanPowerPerVolumeFlowRate = @"This field is the electric power for the evaporator (cooling coil) fan per air volume flow rate through the coil at the rated conditions in W/(m^{3}/s). The default value is 773.3 W/(m^{3}/s) (365 W/1000 cfm) if this field is left blank. If a value is entered, it must be > = 0.0 and < = 1250 W/(m^{3}/s). This value is only used to calculate Seasonal Energy Efficiency Ratio (SEER), Energy Efficiency Ratio (EER), Integrated Energy Efficiency Ratio (IEER) and the Standard Rating (Net) Cooling Capacity which will be outputs in the EnergyPlus eio file (ref. EnergyPlus Engineering Reference, Single Speed DX Cooling Coil, Standard Ratings). This value is not used for modeling the evaporator (cooling coil) fan during simulations; instead, it is used for calculating SEER, EER, IEER and Standard Rating Cooling Capacity to assist the user in verifying their inputs for modeling this type of equipment.";
		public static string Field_RatedEvaporatorFanPowerPerVolumeFlowRate => Value._Field_RatedEvaporatorFanPowerPerVolumeFlowRate;

		private string _Field_AirInletNodeName = @"The name of the HVAC system node from which the DX cooling coil draws its inlet air.";
		public static string Field_AirInletNodeName => Value._Field_AirInletNodeName;

		private string _Field_AirOutletNodeName = @"The name of the HVAC system node to which the DX cooling coil sends its outlet air.";
		public static string Field_AirOutletNodeName => Value._Field_AirOutletNodeName;

		private string _Field_TotalCoolingCapacityFunctionOfTemperatureCurveName = @"The name of a performance curve (ref: Performance Curves) that parameterizes the variation of the gross total cooling capacity as a function of the wet-bulb temperature of the air entering the cooling coil, and the dry-bulb temperature of the air entering the air-cooled condenser coil (wet-bulb temperature if modeling an evaporative-cooled condenser). The output of this curve is multiplied by the gross rated total cooling capacity to give the gross total cooling capacity at specific temperature operating conditions (i.e., at temperatures different from the rating point temperatures). The curve is normalized to have the value of 1.0 at the rating point. This curve is typically a biquadratic but any curve or table with two independent variables can be used.";
		public static string Field_TotalCoolingCapacityFunctionOfTemperatureCurveName => Value._Field_TotalCoolingCapacityFunctionOfTemperatureCurveName;

		private string _Field_TotalCoolingCapacityFunctionOfFlowFractionCurveName = @"The name of a quadratic or cubic performance curve (ref: Performance Curves) that parameterizes the variation of the gross total cooling capacity as a function of the ratio of actual air flow rate across the cooling coil to the rated air flow rate (i.e., fraction of full load flow). The output of this curve is multiplied by the gross rated total cooling capacity and the total cooling capacity modifier curve (function of temperature) to give the gross total cooling capacity at the specific temperature and air flow conditions at which the coil is operating. The curve is normalized to have the value of 1.0 when the actual air flow rate equals the rated air flow rate.";
		public static string Field_TotalCoolingCapacityFunctionOfFlowFractionCurveName => Value._Field_TotalCoolingCapacityFunctionOfFlowFractionCurveName;

		private string _Field_EnergyInputRatioFunctionOfTemperatureCurveName = @"The name of a performance curve (ref: Performance Curves) that parameterizes the variation of the energy input ratio (EIR) as a function of the wet-bulb temperature of the air entering the cooling coil, and the dry-bulb temperature of the air entering the air-cooled condenser coil (wet-bulb temperature if modeling an evaporative-cooled condenser). The EIR is the inverse of the COP. The output of this curve is multiplied by the rated EIR (inverse of rated COP) to give the EIR at specific temperature operating conditions (i.e., at temperatures different from the rating point temperatures). The curve is normalized to a value of 1.0 at the rating point. This curve is typically a biquadratic but any curve or table with two independent variables can be used.";
		public static string Field_EnergyInputRatioFunctionOfTemperatureCurveName => Value._Field_EnergyInputRatioFunctionOfTemperatureCurveName;

		private string _Field_EnergyInputRatioFunctionOfFlowFractionCurveName = @"The name of a performance curve (Ref: Performance Curves) that parameterizes the variation of the energy input ratio (EIR) as a function of the ratio of actual air flow rate across the cooling coil to the rated air flow rate (i.e., fraction of full load flow). The EIR is the inverse of the COP. The output of this curve is multiplied by the rated EIR and the EIR modifier curve (function of temperature) to give the EIR at the specific temperature and air flow conditions at which the cooling coil is operating. This curve is normalized to a value of 1.0 when the actual air flow rate equals the rated air flow rate. This curve is typically a quadratic or cubic but any curve or table with one independent variables can be used.";
		public static string Field_EnergyInputRatioFunctionOfFlowFractionCurveName => Value._Field_EnergyInputRatioFunctionOfFlowFractionCurveName;

		private string _Field_PartLoadFractionCorrelationCurveName = @"This alpha field defines the name of a performance curve (Ref: Performance Curves) that parameterizes the variation of electrical power input to the DX unit as a function of the part load ratio (PLR, sensible cooling load/steady-state sensible cooling capacity). The product of the rated EIR and EIR modifier curves is divided by the output of this curve to give the effective EIR for a given simulation timestep. The part load fraction (PLF) correlation accounts for efficiency losses due to compressor cycling. This curve is typically a quadratic or cubic but any curve or table with one independent variables can be used.

The part load fraction correlation should be normalized to a value of 1.0 when the part load ratio equals 1.0 (i.e., no efficiency losses when the compressor(s) run continuously for the simulation timestep). For PLR values between 0 and 1 (0 < = PLR < 1), the following rules apply:

PLF > = 0.7 and PLF > = PLR

If PLF < 0.7 a warning message is issued, the program resets the PLF value to 0.7, and the simulation proceeds. The runtime fraction of the coil is defined as PLR/PLF. If PLF < PLR, then a warning message is issued and the runtime fraction of the coil is limited to 1.0.

A typical part load fraction correlation for a conventional, single-speed DX cooling coil (e.g., residential unit) would be:


       PLF = 0.85 + 0.15(PLR)


If the user wishes to model no efficiency degradation due to compressor cycling, the part load fraction correlation should be defined as follows:


       PLF = 1.0 + 0.0(PLR)";
		public static string Field_PartLoadFractionCorrelationCurveName => Value._Field_PartLoadFractionCorrelationCurveName;

		private string _Field_MinimumOutdoorDryBulbTemperatureForCompressorOperation = @"This numeric field defines the minimum outdoor air dry-bulb temperature where the cooling coil compressor turns off. If this input field is left blank, the default value is -25 ??C.";
		public static string Field_MinimumOutdoorDryBulbTemperatureForCompressorOperation => Value._Field_MinimumOutdoorDryBulbTemperatureForCompressorOperation;

		private string _Field_NominalTimeForCondensateRemovalToBegin = @"The nominal time (in seconds) after startup for condensate to begin leaving the coil's condensate drain line at the coil's rated airflow and temperature conditions, starting with a dry coil. Nominal time is equal to the ratio of the energy of the coil's maximum condensate holding capacity (J) to the coil's steady-state latent capacity (W). Suggested value is 1000; zero value means the latent degradation model is disabled. The default value for this field is zero. The supply air fan operating mode must be continuous (i.e., the supply air fan operating mode may be specified in other parent objects and is assumed continuous in some objects (e.g., CoilSystem:Cooling:DX) or can be scheduled in other objects [e.g., AirloopHVAC:UnitaryHeatCool]), and this field as well as the next three input fields for this object must have positive values in order to model latent capacity degradation.";
		public static string Field_NominalTimeForCondensateRemovalToBegin => Value._Field_NominalTimeForCondensateRemovalToBegin;

		private string _Field_RatioOfInitialMoistureEvaporationRateAndSteadyStateLatentCapacity = @"Ratio of the initial moisture evaporation rate from the cooling coil (when the compressor first turns off, in Watts) and the coil's steady-state latent capacity (Watts) at rated airflow and temperature conditions. Suggested value is 1.5; zero value means the latent degradation model is disabled. The default value for this field is zero. The supply air fan operating mode must be continuous (i.e., the supply air fan operating mode may be specified in other parent objects and is assumed continuous in some objects (e.g., CoilSystem:Cooling:DX) or can be scheduled in other objects [e.g., AirloopHVAC:UnitaryHeatCool]); and this field, the previous field and the next two fields must have positive values in order to model latent capacity degradation.";
		public static string Field_RatioOfInitialMoistureEvaporationRateAndSteadyStateLatentCapacity => Value._Field_RatioOfInitialMoistureEvaporationRateAndSteadyStateLatentCapacity;

		private string _Field_MaximumCyclingRate = @"The maximum on-off cycling rate for the compressor (cycles per hour), which occurs at 50% run time fraction. Suggested value is 3; zero value means latent degradation model is disabled. The default value for this field is zero. The supply air fan operating mode must be continuous (i.e., the supply air fan operating mode may be specified in other parent objects and is assumed continuous in some objects (e.g., CoilSystem:Cooling:DX) or can be scheduled in other objects [e.g., AirloopHVAC:UnitaryHeatCool]); and this field, the previous two fields and the next field must have positive values in order to model latent capacity degradation.";
		public static string Field_MaximumCyclingRate => Value._Field_MaximumCyclingRate;

		private string _Field_LatentCapacityTimeConstant = @"Time constant (in seconds) for the cooling coil's latent capacity to reach steady state after startup. Suggested value is 45: supply air fan operating mode must be continuous. That is, the supply air fan operating mode may be specified in other parent objects and is assumed continuous in some objects (e.g., CoilSystem:Cooling:DX) or can be scheduled in other objects (e.g., AirloopHVAC:UnitaryHeatCool), and this field as well as the previous three input fields for this object must have positive values in order to model latent capacity degradation.";
		public static string Field_LatentCapacityTimeConstant => Value._Field_LatentCapacityTimeConstant;

		private string _Field_CondenserAirInletNodeName = @"This optional alpha field specifies the outdoor air node name used to define the conditions of the air entering the outdoor condenser. If this field is left blank, the outdoor air temperature entering the condenser (dry-bulb or wet-bulb) is taken directly from the weather data. If this field is not blank, the node name specified must also be specified in an OutdoorAir:Node object where the height of the node is taken into consideration when calculating outdoor air temperature from the weather data. Alternately, the node name may be specified in an OutdoorAir:NodeList object where the outdoor air temperature is taken directly from the weather data.";
		public static string Field_CondenserAirInletNodeName => Value._Field_CondenserAirInletNodeName;

		private string _Field_CondenserType = @"The type of condenser used by the DX cooling coil. Valid choices for this input field are {AirCooled} or {EvaporativelyCooled}. The default for this field is {AirCooled}.";
		public static string Field_CondenserType => Value._Field_CondenserType;

		private string _Field_EvaporativeCondenserEffectiveness = @"The effectiveness of the evaporative condenser, which is used to determine the temperature of the air entering the outdoor condenser coil as follows:

\begin{equation}
Tcond\,inlet = \,\left( {Twb,o} \right)\,\, + \,\,\left( {1 - EvapCondEffectiveness} \right)\left( {Tdb,o\,\, - Twb,o} \right)
\end{equation}

where

{T_{cond\\ inlet}} = the temperature of the air entering the condenser coil (C)

{T_{wb,o}} = the wet-bulb temperature of the outdoor air (C)

{T_{db,o}} = the dry-bulb temperature of the outdoor air (C)

The resulting condenser inlet air temperature is used by the Total Cooling Capacity Modifier Curve (function of temperature) and the Energy Input Ratio Modifier Curve (function of temperature). The default value for this field is 0.9, although valid entries can range from 0.0 to 1.0. This field is not used when Condenser Type = Air Cooled.

If the user wants to model an air-cooled condenser, they should simply specify AirCooled in the field Condenser Type. In this case, the Total Cooling Capacity Modifier Curve (function of temperature) and the Energy Input Ratio Modifier Curve (function of temperature) input fields for this object should reference performance curves that are a function of outdoor dry-bulb temperature.

If the user wishes to model an evaporative-cooled condenser AND they have performance curves that are a function of the wet-bulb temperature of air entering the condenser coil, then the user should specify Condenser Type = Evap Cooled and the evaporative condenser effectiveness value should be entered as 1.0. In this case, the Total Cooling Capacity Modifier Curve (function of temperature) and the Energy Input Ratio Modifier Curve (function of temperature) input fields for this object should reference performance curves that are a function of the wet-bulb temperature of air entering the condenser coil.

If the user wishes to model an air-cooled condenser that has evaporative media placed in front of it to cool the air entering the condenser coil, then the user should specify Condenser Type = Evap Cooled. The user must also enter the appropriate evaporative effectiveness for the media. In this case, the Total Cooling Capacity Modifier Curve (function of temperature) and the Energy Input Ratio Modifier Curve (function of temperature) input fields for this object should reference performance curves that are a function of outdoor dry-bulb temperature. Be aware that the evaporative media will significantly reduce the dry-bulb temperature of the air entering the condenser coil, so the Total Cooling Capacity and EIR Modifier Curves must be valid for the expected range of dry-bulb temperatures that will be entering the condenser coil.";
		public static string Field_EvaporativeCondenserEffectiveness => Value._Field_EvaporativeCondenserEffectiveness;

		private string _Field_EvaporativeCondenserAirFlowRate = @"The air volume flow rate, in m^{3} per second, entering the evaporative condenser. This value is used to calculate the amount of water used to evaporatively cool the condenser inlet air. The minimum value for this field must be greater than zero, and this input field is autosizable (equivalent to 0.000144 m^{3}/s per watt of rated total cooling capacity [850 cfm/ton]). This field is not used when Condenser Type = Air Cooled.";
		public static string Field_EvaporativeCondenserAirFlowRate => Value._Field_EvaporativeCondenserAirFlowRate;

		private string _Field_EvaporativeCondenserPumpRatedPowerConsumption = @"The rated power of the evaporative condenser water pump in Watts. This value is used to calculate the power required to pump the water used to evaporatively cool the condenser inlet air. The default value for this input field is zero, but it is autosizable (equivalent to 0.004266 W per watt [15 W/ton] of rated total cooling capacity). This field is not used when Condenser Type = Air Cooled.";
		public static string Field_EvaporativeCondenserPumpRatedPowerConsumption => Value._Field_EvaporativeCondenserPumpRatedPowerConsumption;

		private string _Field_CrankcaseHeaterCapacity = @"This numeric field defines the crankcase heater capacity in Watts. When the outdoor air dry-bulb temperature is below the value specified in the input field Maximum Outdoor Dry-bulb Temperature for Crankcase Heater Operation (described below), the crankcase heater is enabled during the time that the compressor is not running. If this cooling coil is used as part of an air-to-air heat pump (Ref. AirLoopHVAC:UnitaryHeatPump:AirToAir or PackageTerminal: HeatPump:AirToAir), the crankcase heater defined for this DX cooling coil is ignored and the crankcase heater power defined for the DX heating coil (Ref. Coil:Heating:DX:SingleSpeed) is enabled during the time that the compressor is not running for either heating or cooling. The value for this input field must be greater than or equal to 0, and the default value is 0. To simulate a DX cooling coil without a crankcase heater, enter a value of 0.";
		public static string Field_CrankcaseHeaterCapacity => Value._Field_CrankcaseHeaterCapacity;

		private string _Field_MaximumOutdoorDryBulbTemperatureForCrankcaseHeaterOperation = @"This numeric field defines the outdoor air dry-bulb temperature above which the compressor s crankcase heater is disabled. The value for this input field must be greater than or equal to 0.0 ??C, and the default value is 10 ??C.";
		public static string Field_MaximumOutdoorDryBulbTemperatureForCrankcaseHeaterOperation => Value._Field_MaximumOutdoorDryBulbTemperatureForCrankcaseHeaterOperation;

		private string _Field_SupplyWaterStorageTankName = @"This field is optional. It is used to describe where the coil obtains water used for evaporative cooling of its condenser. If blank or omitted, then the unit will obtain water directly from the mains. If the name of a Water Storage Tank object is used here, then the unit will obtain its water from that tank. If a tank is specified, the unit will attempt to obtain all the water it uses from the tank. However if the tank cannot provide all the water the condenser needs, then the unit will still operate and obtain the rest of the water it needs from the mains (referred to as StarvedWater).";
		public static string Field_SupplyWaterStorageTankName => Value._Field_SupplyWaterStorageTankName;

		private string _Field_CondensateCollectionWaterStorageTankName = @"This field is optional. It is used to describe where condensate from the coil is collected. If blank or omitted, then any coil condensate is discarded. Enter the name of Water Storage Tank object defined elsewhere and the condensate will then be collected in that tank.";
		public static string Field_CondensateCollectionWaterStorageTankName => Value._Field_CondensateCollectionWaterStorageTankName;

		private string _Field_BasinHeaterCapacity = @"This numeric field contains the capacity of the DX coil s electric evaporative cooler basin heater in watts per degree Kelvin. This field only applies for Condenser Type = EvaporativelyCooled. This field is used in conjunction with the Basin Heater Setpoint Temperature described in the following field. The basin heater electric power is equal to this field multiplied by the difference between the basin heater set point temperature and the outdoor dry-bulb temperature. The basin heater only operates when the DX coil is off, regardless of the basin heater schedule described below. The basin heater capacity must be greater than or equal to zero, with a default value of zero if this field is left blank.";
		public static string Field_BasinHeaterCapacity => Value._Field_BasinHeaterCapacity;

		private string _Field_BasinHeaterSetpointTemperature = @"This numeric field contains the set point temperature (??C) for the basin heater described in the previous field. This field only applies for Condenser Type = EvaporativelyCooled. The basin heater is active when the outdoor air dry-bulb temperature falls below this setpoint temperature, as long as the DX coil is off. This set point temperature must be greater than or equal to 2??C, and the default value is 2??C if this field is left blank.";
		public static string Field_BasinHeaterSetpointTemperature => Value._Field_BasinHeaterSetpointTemperature;

		private string _Field_BasinHeaterOperatingScheduleName = @"This alpha field contains the name of the basin heater operating schedule. This field only applies for Condenser Type = EvaporativelyCooled. The basin heater operating schedule is assumed to be an on/off schedule and the heater is available to operate any time the schedule value is greater than 0. The basin heater operates when scheduled on and the outdoor air dry-bulb temperature is below the set point temperature described in the previous field. If this field is left blank, the basin heater is available to operate throughout the simulation. Regardless of this schedule, the basin heater may only operate when the DX coil is off.";
		public static string Field_BasinHeaterOperatingScheduleName => Value._Field_BasinHeaterOperatingScheduleName;

		private string _Field_SensibleHeatRatioFunctionOfTemperatureCurveName = @"The name of a biquadratic normalized curve (Ref: Performance Curves) that parameterizes the variation of the sensible heat ratio (SHR) as a function of DX cooling coil entering air wet-bulb and dry-bulb temperatures. The output of this curve is multiplied by the rated SHR and the SHR modifier curve (function of flow fraction) to give the SHR at the specific coil entering air temperature and air flow conditions at which the cooling coil is operating. This curve is normalized to a value of 1.0 at the rated condition. This input field is optional.";
		public static string Field_SensibleHeatRatioFunctionOfTemperatureCurveName => Value._Field_SensibleHeatRatioFunctionOfTemperatureCurveName;

		private string _Field_SensibleHeatRatioFunctionOfFlowFractionCurveName = @"The name of a quadratic or cubic normalized curve (Ref: Performance Curves) that parameterizes the variation of the sensible heat ratio (SHR) as a function of the ratio of actual air flow rate across the cooling coil to the rated air flow rate (i.e., fraction of full load flow). The output of this curve is multiplied by the rated SHR and the SHR modifier curve (function of temperature) to give the SHR at the specific temperature and air flow conditions at which the cooling coil is operating. This curve is normalized to a value of 1.0 when the actual air flow rate equals the rated air flow rate. This input field is optional.";
		public static string Field_SensibleHeatRatioFunctionOfFlowFractionCurveName => Value._Field_SensibleHeatRatioFunctionOfFlowFractionCurveName;

		private string _Field_ZoneNameForCondenserPlacement = @"This input field is name of a conditioned or unconditioned zone where the secondary coil (condenser) of DX system or a heat pump is to be placed. This is an optional input field specified only when user desires to reject the condenser heat into a zone. The heat rejected is modeled as sensible internal gain of a secondary zone.

Following is an example input for a Coil:Cooling:DX:SingleSpeed coil.



Coil:Cooling:DX:SingleSpeed,
  Zone1WindACDXCoil,               ! Coil Name
  FanAndCoilAvailSched,         ! Availability Schedule
  10548,           ! Gross Rated Total Cooling Capacity
  0.75,             ! Gross Rated Sensible Heat Ratio
  3.0,               ! Gross Rated Cooling COP
  0.637,           ! Rated Air Flow Rate (m3/s)
  773.3,           ! Rated Evaporator Fan Power Per Volume Flow Rate {W/(m3/s)}
  Zone1WindACFanOutletNode, ! Coil Air Inlet Node
  Zone1WindACAirOutletNode, ! Coil Air Outlet Node
  WindACCoolCapFT,                   ! Total Cooling Capacity Modifier Curve (function of temperature)
  WindACCoolCapFFF,                 ! Total Cooling Capacity Modifier Curve (function of flow fraction)
  WindACEIRFT,                           ! Energy Input Ratio Modifier Curve (function of temperature)
  WindACEIRFFF,                         ! Energy Input Ratio Modifier Curve (function of flow fraction)
  WindACPLFFPLR,                       ! Part Load Fraction Correlation (function of part load ratio)
  1000.,                         ! Nominal Time for Condensate Removal to Begin {s}
  1.5,                             ! Ratio of Initial Moisture Evaporation Rate and Steady-state Latent Capacity
  3.0,                             ! Maximum ON/OFF Cycling Rate {cycles/hr}
  45.0,                           ! Latent Capacity Time Constant {s}
  ,                                   ! Condenser Air Inlet Node Name
  AirCooled,               ! Condenser Type
  ,                                   ! Evaporative Condenser Effectiveness
  ,                                   ! Evaporative Condenser Air Volume Flow Rate {m3/s}
  ,                                   ! Evaporative Condenser Pump Rated Power Consumption {W}
  30.,                             ! Crankcase Heater Capacity {W}
  10.;                             ! Maximum Outdoor Dry-bulb Temperature for Crankcase Heater Operation {C}";
		public static string Field_ZoneNameForCondenserPlacement => Value._Field_ZoneNameForCondenserPlacement;

	

}

	public sealed class CoilCoolingDXTwoSpeed
    { 

		private string _name = @"Coil:Cooling:DX:TwoSpeed";
		private string _note = @"This component models a two-speed (or variable speed) DX compressor and fan. The method is based on the model used for the cycling, single speed DX unit. The single speed unit is described by single full load capacity, SHR, COP, and air flow rate at rated conditions. Off rated full load performance is obtained by the use of 4 modifier curves. At partial load the unit cycles on/off and the cycling losses are described by a part load fraction curve.

The multispeed unit is described by specifying the performance at two states: high speed compressor, high speed fan; and low speed compressor, low speed fan. When the unit load is above the high speed capacity, the unit runs with high speed compressor and fan. When the load on the unit is below the high speed capacity but above the low speed capacity, the unit will run with performance intermediate between high speed and low speed. When the load is less than the low speed capacity, the unit will cycle on/off just like the single speed unit.

The multispeed unit model requires 2 full sets of performance data. There must be a high and low speed capacity, SHR, COP, and evaporator air flow rate; as well as high and low speed performance curves total cooling capacity modifier curve (function of temperature) and energy input ratio modifier curve (function of temperature).

The multispeed DX component should be used for all cases in which a DX VAV system is being simulated. Obviously this model in which performance is obtained by interpolating between 2 specified states - is an oversimplification of how real multi-speed and variable speed DX cooling units are controlled. But detailed descriptions of how actual units perform and are controlled are not available. This model should give a good average prediction of multispeed and variable speed DX cooling unit performance. The last four input fields following the Basin Heater Operating Schedule Name are the Sensible Heat Ratio (SHR) modifier cruve names for temperature and flow fraction for high and low speed DX cooling coils. These four input fields are optional and used only when a user intends to override SHR calculated using the apparatus dew point (ADP) and bypass factor (BF) method. See section SHR Calculation Using User Specified SHR Modifier Curves in the EnergyPlus Engineering Document for further details..
";
		

		private static readonly System.Lazy<CoilCoolingDXTwoSpeed> instance = new System.Lazy<CoilCoolingDXTwoSpeed>(() => new CoilCoolingDXTwoSpeed());
        private static CoilCoolingDXTwoSpeed Value => instance.Value;
		public static string Name => Value._name;
        public static string Note => Value._note;
		private CoilCoolingDXTwoSpeed(){}

	private string _Field_Name = @"A unique user-assigned name for an instance of a multispeed DX cooling coil. Any reference to this DX coil by another object will use this name.";
		public static string Field_Name => Value._Field_Name;

		private string _Field_AvailabilityScheduleName = @"The name of the schedule (ref: Schedule) that denotes whether the DX cooling coil can run during a given time period. A schedule value greater than 0 (usually 1 is used) indicates that the unit can be on during the time period. A value less than or equal to 0 (usually 0 is used) denotes that the unit must be off for the time period. If this field is blank, the schedule has values of 1 for all time periods.";
		public static string Field_AvailabilityScheduleName => Value._Field_AvailabilityScheduleName;

		private string _Field_HighSpeedGrossRatedTotalCoolingCapacity = @"The total, full load gross cooling capacity (sensible plus latent) in watts of the DX coil unit for high speed compressor and high speed fan at rated conditions (air entering the cooling coil at 26.7 ??C drybulb/19.4 ??C wetbulb, air entering the outdoor condenser coil at 35 ??C drybulb/23.9 ??C wetbulb, and a cooling coil air flow rate defined by field rated air flow rate below). Capacity should be gross (i.e., the effect of supply air fan heat is NOT accounted for).";
		public static string Field_HighSpeedGrossRatedTotalCoolingCapacity => Value._Field_HighSpeedGrossRatedTotalCoolingCapacity;

		private string _Field_HighSpeedGrossRatedSensibleHeatRatio = @"The sensible heat ratio (gross sensible capacity divided by gross total cooling capacity) of the DX cooling coil for high speed compressor and high speed fan at rated conditions (air entering the cooling coil at 26.7 ??C drybulb/19.4 ??C wetbulb, air entering the outdoor condenser coil at 35 ??C drybulb/23.9 ??C wetbulb\protect\hyperlink{ux5fftn2}{[2]}, and a cooling coil air flow rate defined by field rated air flow rate below). Both the sensible and total cooling capacities used to define the Rated SHR should be gross (i.e., the effect of supply air fan heat is NOT accounted for).";
		public static string Field_HighSpeedGrossRatedSensibleHeatRatio => Value._Field_HighSpeedGrossRatedSensibleHeatRatio;

		private string _Field_HighSpeedGrossRatedCoolingCOP = @"The coefficient of performance is the ratio of the gross total cooling capacity in watts to electrical power input in watts) of the DX cooling coil unit for high speed compressor and high speed fan at rated conditions (air entering the cooling coil at 26.7 ??C drybulb/19.4 ??C wetbulb, air entering the outdoor condenser coil at 35 ??C drybulb/23.9 ??C wetbulb, and a cooling coil air flow rate defined by field rated air flow rate below). The input power includes electric power for the compressor(s) and condenser fan(s) but does not include the power consumption of the supply air fan. The gross COP should NOT account for the supply air fan. If this input field is left blank, the default value is 3.0.";
		public static string Field_HighSpeedGrossRatedCoolingCOP => Value._Field_HighSpeedGrossRatedCoolingCOP;

		private string _Field_HighSpeedRatedAirFlowRate = @"The high speed air volume flow rate, in m^{3} per second, across the DX cooling coil at rated conditions. The rated air volume flow rate should be between 0.00004027 m^{3}/s and 0.00006041 m^{3}/s per watt of gross rated total cooling capacity. For DOAS applications the rated air volume flow rate should be between 0.00001677 m^{3}/s and 0.00003355 m^{3}/s per watt of gross rated total cooling capacity (125 to 250 cfm/ton). The gross rated total cooling capacity, gross rated SHR and gross rated COP should be performance information for the unit with air entering the cooling coil at 26.7 ??C drybulb/19.4 ??C wetbulb, air entering the outdoor condenser coil at 35 ??C drybulb/23.9 ??C wetbulb, and the rated air volume flow rate defined here.";
		public static string Field_HighSpeedRatedAirFlowRate => Value._Field_HighSpeedRatedAirFlowRate;

		private string _Field_UnitInternalStaticAirPressure = @"If this coil is used with a Fan:VariableVolume to model a packaged variable-air-volume unit, then ratings for standard rated net capacity, EER, and IEER will be calculated per ANSI/AHRI Standard 340/360-2007 with Addenda 1 and 2. This field is to specify the internal static air pressure, in units of Pascals, associated with the unit s supply air flow for rating purposes. This field does not affect the performance during operation. This field is optional. If this field is used, then the internal static air pressure is used with the associated fan characteristics when calculating standard rated net capacity, EER, and IEER. If this field is not used, then the standard ratings are still performed but use a default for specific fan power of 773.3 (W/(m^{3}/s)). The air pressure drop/rise input here should be internal in the sense that it is for the entire package of unitary equipment as it would be tested in a laboratory (including other non-cooling sections inside the package for filters, dampers, and.or heating coils) but none of the external pressure drop for distributing supply air throughout the building. This is different from the input field called Pressure Rise in the fan object which includes both the external static pressure and the internal static pressure. The results of standard rating calculations are reported to the EIO file and to predefined output tables called DX Cooling Coils and VAV DX Cooling Standard Rating Details.";
		public static string Field_UnitInternalStaticAirPressure => Value._Field_UnitInternalStaticAirPressure;

		private string _Field_AirInletNode = @"The name of the HVAC system node from which the DX cooling coil draws its inlet air.";
		public static string Field_AirInletNode => Value._Field_AirInletNode;

		private string _Field_AirOutletNode = @"The name of the HVAC system node to which the DX cooling coil sends its outlet air.";
		public static string Field_AirOutletNode => Value._Field_AirOutletNode;

		private string _Field_TotalCoolingCapacityFunctionOfTemperatureCurveName = @"The name of a biquadratic performance curve (ref: Performance Curves) that parameterizes the variation of the gross total cooling capacity as a function of the wet-bulb temperature of the air entering the cooling coil, and the dry-bulb temperature of the air entering the air-cooled condenser (wet-bulb temperature if modeling an evaporative-cooled condenser). The curve is normalized to 1 at 19.44 C indoor wet-bulb temperature and 35 C outdoor dry-bulb temperature. The output of this curve is multiplied by the gross rated total cooling capacity to give the gross total cooling capacity at specific temperature operating conditions (i.e., at temperatures different from the rating point temperatures). The curve is normalized to have the value of 1.0 at the rating point. This curve is used for performance at the high speed compressor, high speed fan operating point.";
		public static string Field_TotalCoolingCapacityFunctionOfTemperatureCurveName => Value._Field_TotalCoolingCapacityFunctionOfTemperatureCurveName;

		private string _Field_TotalCoolingCapacityFunctionOfFlowFractionCurveName = @"The name of a quadratic performance curve (ref: Performance Curves) that parameterizes the variation of gross total cooling capacity as a function of the ratio of actual air flow rate across the cooling coil to the rated air flow rate (i.e., fraction of full load flow). The curve is normalized to have the value of 1.0 when the actual air flow rate equals the rated air flow rate. The output of this curve is multiplied by the gross rated total cooling capacity and the total cooling capacity modifier curve (function of temperature) to give the gross total cooling capacity at the specific temperature and air flow conditions at which the coil is operating. This curve is applied only at the high speed compressor, high speed fan operating point. There is no corresponding curve for the low speed operating point.";
		public static string Field_TotalCoolingCapacityFunctionOfFlowFractionCurveName => Value._Field_TotalCoolingCapacityFunctionOfFlowFractionCurveName;

		private string _Field_EnergyInputRatioFunctionOfTemperatureCurveName = @"The name of a biquadratic performance curve (ref: Performance Curves) that parameterizes the variation of the energy input ratio (EIR) as a function of the wet-bulb temperature of the air entering the cooling coil and the dry-bulb temperature of the air entering the air-cooled condenser (wet-bulb temperature if modeling an evaporative-cooled condenser). The curve is normalized to 1 at 19.44 C indoor wet-bulb temperature and 35 C outdoor dry-bulb temperature. The EIR is the inverse of the COP. The output of this curve is multiplied by the rated EIR (inverse of rated COP) to give the EIR at specific temperature operating conditions (i.e., at temperatures different from the rating point temperatures). The curve is normalized to a value of 1.0 at the rating point. This curve is used for performance at the high speed compressor, high speed fan operating point.";
		public static string Field_EnergyInputRatioFunctionOfTemperatureCurveName => Value._Field_EnergyInputRatioFunctionOfTemperatureCurveName;

		private string _Field_EnergyInputRatioFunctionOfFlowFractionCurveName = @"The name of a quadratic performance curve (Ref: Performance Curves) that parameterizes the variation of the energy input ratio (EIR) as a function of the ratio of actual air flow rate across the cooling coil to the rated air flow rate (i.e., fraction of full load flow). The curve is normalized to have the value of 1.0 when the actual air flow rate equals the rated air flow rate. The EIR is the inverse of the COP. The output of this curve is multiplied by the rated EIR and the EIR modifier curve (function of temperature) to give the EIR at the specific temperature and air flow conditions at which the cooling coil is operating. This curve is normalized to a value of 1.0 when the actual air flow rate equals the rated air flow rate. This curve is applied only at the high speed compressor, high speed fan operating point. There is no corresponding curve for the low speed operating point.";
		public static string Field_EnergyInputRatioFunctionOfFlowFractionCurveName => Value._Field_EnergyInputRatioFunctionOfFlowFractionCurveName;

		private string _Field_PartLoadFractionCorrelationCurveName = @"This alpha field defines the name of a quadratic or cubic performance curve (Ref: Performance Curves) that parameterizes the variation of electrical power input to the DX unit as a function of the part load ratio (PLR, sensible cooling load/steady-state sensible cooling capacity). The product of the rated EIR and EIR modifier curves is divided by the output of this curve to give the effective EIR for a given simulation timestep. The part load fraction (PLF) correlation accounts for efficiency losses due to compressor cycling.

The part load fraction correlation should be normalized to a value of 1.0 when the part load ratio equals 1.0 (i.e., no efficiency losses when the compressor(s) run continuously for the simulation timestep). For PLR values between 0 and 1 (0 < = PLR < 1), the following rules apply:

PLF > = 0.7 and PLF > = PLR

If PLF < 0.7 a warning message is issued, the program resets the PLF value to 0.7, and the simulation proceeds. The runtime fraction of the coil is defined as PLR/PLF. If PLF < PLR, then a warning message is issued and the runtime fraction of the coil is limited to 1.0.

A typical part load fraction correlation for a conventional, single-speed DX cooling coil (e.g., residential unit) would be:


       PLF = 0.85 + 0.15(PLR)


If the user wishes to model no efficiency degradation due to compressor cycling, the part load fraction correlation should be defined as follows:


       PLF = 1.0 + 0.0(PLR)";
		public static string Field_PartLoadFractionCorrelationCurveName => Value._Field_PartLoadFractionCorrelationCurveName;

		private string _Field_LowSpeedGrossRatedTotalCoolingCapacity = @"The total, full load gross total cooling capacity (sensible plus latent) in watts of the DX coil unit for low speed compressor and low speed fan at rated conditions (air entering the cooling coil at 26.7 ??C drybulb/19.4 ??C wetbulb, air entering the outdoor condenser coil at 35 ??C drybulb/23.9 ??C wetbulb, and a cooling coil air flow rate defined by field rated air flow rate, low speed below). Capacity should be gross (i.e., the effect of supply air fan heat is NOT accounted for).";
		public static string Field_LowSpeedGrossRatedTotalCoolingCapacity => Value._Field_LowSpeedGrossRatedTotalCoolingCapacity;

		private string _Field_LowSpeedGrossRatedSensibleHeatRatio = @"The sensible heat ratio (SHR = gross sensible capacity divided by gross total cooling capacity) of the DX cooling coil for low speed compressor and low speed fan at rated conditions (air entering the cooling coil at 26.7 ??C drybulb/19.4 ??C wetbulb, air entering the outdoor condenser coil at 35 ??C drybulb/23.9 ??C wetbulb, and a cooling coil air flow rate defined by field rated air flow rate, low speed below). Both the sensible and total cooling capacities used to define the Rated SHR should be gross (i.e., the effect of supply air fan heat is NOT accounted for).";
		public static string Field_LowSpeedGrossRatedSensibleHeatRatio => Value._Field_LowSpeedGrossRatedSensibleHeatRatio;

		private string _Field_LowSpeedGrossRatedCoolingCOP = @"The coefficient of performance is the ratio of gross total cooling capacity in watts to electrical power input in watts) of the DX cooling coil unit for low speed compressor and low speed fan at rated conditions (air entering the cooling coil at 26.7 ??C drybulb/19.4 ??C wetbulb, air entering the outdoor condenser coil at 35 ??C drybulb/23.9 ??C wetbulb, and a cooling coil air flow rate defined by field rated air volume flow rate, low speed below). The input power includes power for the compressor(s) and condenser fan(s) but does not include the power consumption of the supply air fan. The gross COP should NOT account for the supply air fan. If this input field is left blank, the default value is 3.0.";
		public static string Field_LowSpeedGrossRatedCoolingCOP => Value._Field_LowSpeedGrossRatedCoolingCOP;

		private string _Field_LowSpeedRatedAirFlowRate = @"The low speed volume air flow rate, in m^{3} per second, across the DX cooling coil at rated conditions. The rated air volume flow rate should be between 0.00004027 m^{3}/s and 0.00006041 m^{3}/s per watt of the gross rated total cooling capacity. For DOAS applications the rated air volume flow rate should be between 0.00001677 m^{3}/s and 0.00003355 m^{3}/s per watt of gross rated total cooling capacity (125 to 250 cfm/ton). The gross rated total cooling capacity, gross rated SHR and gross rated COP should be performance information for the unit with air entering the cooling coil at 26.7 ??C drybulb/19.4 ??C wetbulb, air entering the outdoor condenser coil at 35 ??C drybulb/23.9 ??C wetbulb, and the rated air volume flow rate defined here.";
		public static string Field_LowSpeedRatedAirFlowRate => Value._Field_LowSpeedRatedAirFlowRate;

		private string _Field_LowSpeedTotalCoolingCapacityFunctionOfTemperatureCurveName = @"The name of a biquadratic performance curve (ref: Performance Curves) that parameterizes the variation of the gross total cooling capacity as a function of the wet-bulb temperature of the air entering the cooling coil, and the dry-bulb temperature of the air entering the air-cooled condenser (wet-bulb temperature if modeling an evaporative-cooled condenser). The output of this curve is multiplied by the gross rated total cooling capacity to give the gross total cooling capacity at specific temperature operating conditions (i.e., at temperatures different from the rating point temperatures). The curve is normalized to have the value of 1.0 at the rating point. This curve is used for performance at the low speed compressor, low speed fan operating point.";
		public static string Field_LowSpeedTotalCoolingCapacityFunctionOfTemperatureCurveName => Value._Field_LowSpeedTotalCoolingCapacityFunctionOfTemperatureCurveName;

		private string _Field_LowSpeedEnergyInputRatioFunctionOfTemperatureCurveName = @"The name of a biquadratic performance curve (ref: Performance Curves) that parameterizes the variation of the energy input ratio (EIR) as a function of the wetbulb temperature of the air entering the cooling coil and the drybulb temperature of the air entering the air-cooled condenser (wetbulb temperature if modeling an evaporative-cooled condenser). The EIR is the inverse of the COP. The output of this curve is multiplied by the rated EIR (inverse of rated COP) to give the EIR at specific temperature operating conditions (i.e., at temperatures different from the rating point temperatures). The curve is normalized to a value of 1.0 at the rating point. This curve is used for performance at the low speed compressor, low speed fan operating point.";
		public static string Field_LowSpeedEnergyInputRatioFunctionOfTemperatureCurveName => Value._Field_LowSpeedEnergyInputRatioFunctionOfTemperatureCurveName;

		private string _Field_CondenserAirInletNodeName = @"This optional alpha field specifies the outdoor air node name used to define the conditions of the air entering the outdoor condenser. If this field is left blank, the outdoor air temperature entering the condenser (dry-bulb or wet-bulb) is taken directly from the weather data. If this field is not blank, the node name specified must also be specified in an OutdoorAir:Node object where the height of the node is taken into consideration when calculating outdoor air temperature from the weather data. Alternately, the node name may be specified in an OutdoorAir:NodeList object where the outdoor air temperature is taken directly from the weather data.";
		public static string Field_CondenserAirInletNodeName => Value._Field_CondenserAirInletNodeName;

		private string _Field_CondenserType = @"The type of condenser used by the multi-speed DX cooling coil. Valid choices for this input field are {AirCooled} or {EvaporativelyCooled}. The default for this field is {AirCooled}.";
		public static string Field_CondenserType => Value._Field_CondenserType;

		private string _Field_MinimumOutdoorDryBulbTemperatureForCompressorOperation = @"This numeric field defines the minimum outdoor air dry-bulb temperature where the cooling coil compressor turns off. If this input field is left blank, the value defaults to that specified in the IDD (e.g., -25 ??C). If this field is not included in the input, the default value is -25 ??C.";
		public static string Field_MinimumOutdoorDryBulbTemperatureForCompressorOperation => Value._Field_MinimumOutdoorDryBulbTemperatureForCompressorOperation;

		private string _Field_HighSpeedEvaporativeCondenserEffectiveness = @"The effectiveness of the evaporative condenser at high compressor/fan speed, which is used to determine the temperature of the air entering the outdoor condenser coil as follows:

\begin{equation}
Tcond\,inlet = \,\left( {Twb,o} \right)\,\, + \,\,\left( {1 - EvapCondEffectivenes{s_{HighSpeed}}} \right)\left( {Tdb,o\,\, - Twb,o} \right)
\end{equation}

where

{T_{cond\\ inlet}} = the temperature of the air entering the condenser coil (C)

{T_{wb,o}} = the wet-bulb temperature of the outdoor air (C)

{T_{db,o}} = the dry-bulb temperature of the outdoor air (C)

The resulting condenser inlet air temperature is used by the Total Cooling Capacity Modifier Curve (function of temperature) and the Energy Input Ratio Modifier Curve (function of temperature). The default value for this field is 0.9, although valid entries can range from 0.0 to 1.0. This field is not used when Condenser Type = Air Cooled.

If the user wants to model an air-cooled condenser, they should simply specify AirCooled in the field Condenser Type. In this case, the Total Cooling Capacity Modifier Curve (function of temperature) and the Energy Input Ratio Modifier Curve (function of temperature) input fields for this object should reference performance curves that are a function of outdoor dry-bulb temperature.

If the user wishes to model an evaporative-cooled condenser AND they have performance curves that are a function of the wet-bulb temperature of air entering the condenser coil, then the user should specify Condenser Type = Evap Cooled and the evaporative condenser effectiveness value should be entered as 1.0. In this case, the Total Cooling Capacity Modifier Curve (function of temperature) and the Energy Input Ratio Modifier Curve (function of temperature) input fields for this object should reference performance curves that are a function of the wet-bulb temperature of air entering the condenser coil.

If the user wishes to model an air-cooled condenser that has evaporative media placed in front of it to cool the air entering the condenser coil, then the user should specify Condenser Type = Evap Cooled. The user must also enter the appropriate evaporative effectiveness for the media. In this case, the Total Cooling Capacity Modifier Curve (function of temperature) and the Energy Input Ratio Modifier Curve (function of temperature) input fields for this object should reference performance curves that are a function of outdoor dry-bulb temperature. Be aware that the evaporative media will significantly reduce the dry-bulb temperature of the air entering the condenser coil, so the Total Cooling Capacity and EIR Modifier Curves must be valid for the expected range of dry-bulb temperatures that will be entering the condenser coil.";
		public static string Field_HighSpeedEvaporativeCondenserEffectiveness => Value._Field_HighSpeedEvaporativeCondenserEffectiveness;

		private string _Field_HighSpeedEvaporativeCondenserAirFlowRate = @"The air volume flow rate, in m^{3} per second, entering the evaporative condenser at high compressor/fan speed. This value is used to calculate the amount of water used to evaporatively cool the condenser inlet air. The minimum value for this field must be greater than zero, and this input field is autosizable (equivalent to 0.000144 m^{3}/s per watt of rated high-speed total cooling capacity [850 cfm/ton]). This field is not used when Condenser Type = Air Cooled.";
		public static string Field_HighSpeedEvaporativeCondenserAirFlowRate => Value._Field_HighSpeedEvaporativeCondenserAirFlowRate;

		private string _Field_HighSpeedEvaporativeCondenserPumpRatedPowerConsumption = @"The rated power of the evaporative condenser water pump in Watts at high compressor/fan speed. This value is used to calculate the power required to pump the water used to evaporatively cool the condenser inlet air. The default value for this input field is zero, but it is autosizable (equivalent to 0.004266 W per watt [15 W/ton] of rated high-speed total cooling capacity). This field is not used when Condenser Type = Air Cooled.";
		public static string Field_HighSpeedEvaporativeCondenserPumpRatedPowerConsumption => Value._Field_HighSpeedEvaporativeCondenserPumpRatedPowerConsumption;

		private string _Field_LowSpeedEvaporativeCondenserEffectiveness = @"The effectiveness of the evaporative condenser at low compressor/fan speed, which is used to determine the temperature of the air entering the outdoor condenser coil as follows:

\begin{equation}
Tcond\,inlet = \,\left( {Twb,o} \right)\,\, + \,\,\left( {1 - EvapCondEffectivenes{s_{LowSpeed}}} \right)\left( {Tdb,o\,\, - Twb,o} \right)
\end{equation}

where

{T_{cond\\ inlet}} = the temperature of the air entering the condenser coil (C)

{T_{wb,o}} = the wet-bulb temperature of the outdoor air (C)

{T_{db,o}} = the dry-bulb temperature of the outdoor air (C)

The resulting condenser inlet air temperature is used by the Total Cooling Capacity Modifier Curve, low speed (function of temperature) and the Energy Input Ratio Modifier Curve, low speed (function of temperature). The default value for this field is 0.9, although valid entries can range from 0.0 to 1.0. This field is not used when Condenser Type = Air Cooled. See field Evaporative Condenser Effectiveness, High Speed above for further information.";
		public static string Field_LowSpeedEvaporativeCondenserEffectiveness => Value._Field_LowSpeedEvaporativeCondenserEffectiveness;

		private string _Field_LowSpeedEvaporativeCondenserAirFlowRate = @"The air volume flow rate, in m^{3} per second, entering the evaporative condenser at low compressor/fan speed. This value is used to calculate the amount of water used to evaporatively cool the condenser inlet air. The minimum value for this field must be greater than zero, and this input field is autosizable (equivalent to 0.000048 m^{3}/s per watt of rated high-speed total cooling capacity [280 cfm/ton]). This field is not used when Condenser Type = Air Cooled.";
		public static string Field_LowSpeedEvaporativeCondenserAirFlowRate => Value._Field_LowSpeedEvaporativeCondenserAirFlowRate;

		private string _Field_LowSpeedEvaporativeCondenserPumpRatedPowerConsumption = @"The rated power of the evaporative condenser water pump in Watts at low compressor/fan speed. This value is used to calculate the power required to pump the water used to evaporatively cool the condenser inlet air. The default value for this input field is zero, but it is autosizable (equivalent to 0.001422 W per watt [5 W/ton] of rated high-speed total capacity). This field is not used when Condenser Type = Air Cooled.";
		public static string Field_LowSpeedEvaporativeCondenserPumpRatedPowerConsumption => Value._Field_LowSpeedEvaporativeCondenserPumpRatedPowerConsumption;

		private string _Field_SupplyWaterStorageTankName = @"This field is optional. It is used to describe where the coil obtains water used for evaporative cooling. If blank or omitted, then the cooler will obtain water directly from the mains. If the name of a Water Storage Tank object is used here, then the cooler will obtain its water from that tank. If a tank is specified, the coil will attempt to obtain all the water it uses from the tank. However if the tank cannot provide all the water the cooler needs, then the cooler will still operate and obtain the rest of the water it needs from the mains (referred to as StarvedWater).";
		public static string Field_SupplyWaterStorageTankName => Value._Field_SupplyWaterStorageTankName;

		private string _Field_CondensateCollectionWaterStorageTankName = @"This field is optional. It is used to describe where condensate from the coil is collected. If blank or omitted, then any coil condensate is discarded. Enter the name of Water Storage Tank object defined elsewhere and the condensate will then be collected in that tank.";
		public static string Field_CondensateCollectionWaterStorageTankName => Value._Field_CondensateCollectionWaterStorageTankName;

		private string _Field_BasinHeaterCapacity = @"This numeric field contains the capacity of the DX coil s electric evaporative cooler basin heater in watts per degree Kelvin. This field only applies for Condenser Type = EvaporativelyCooled. This field is used in conjunction with the Basin Heater Setpoint Temperature described in the following field. The basin heater electric power is equal to this field multiplied by the difference between the basin heater set point temperature and the outdoor dry-bulb temperature. The basin heater only operates when the DX coil is off, regardless of the basin heater schedule described below. The basin heater capacity must be greater than or equal to zero, with a default value of zero if this field is left blank.";
		public static string Field_BasinHeaterCapacity => Value._Field_BasinHeaterCapacity;

		private string _Field_BasinHeaterSetpointTemperature = @"This numeric field contains the set point temperature (??C) for the basin heater described in the previous field. This field only applies for Condenser Type = EvaporativelyCooled. The basin heater is active when the outdoor air dry-bulb temperature falls below this setpoint temperature, as long as the DX coil is off. This set point temperature must be greater than or equal to 2??C, and the default value is 2??C if this field is left blank.";
		public static string Field_BasinHeaterSetpointTemperature => Value._Field_BasinHeaterSetpointTemperature;

		private string _Field_BasinHeaterOperatingScheduleName = @"This alpha field contains the name of the basin heater operating schedule. This field only applies for Condenser Type = EvaporativelyCooled. The basin heater operating schedule is assumed to be an on/off schedule and the heater is available to operate any time the schedule value is greater than 0. The basin heater operates when scheduled on and the outdoor air dry-bulb temperature is below the set point temperature described in the previous field. If this field is left blank, the basin heater is available to operate throughout the simulation. Regardless of this schedule, the basin heater may only operate when the DX coil is off.";
		public static string Field_BasinHeaterOperatingScheduleName => Value._Field_BasinHeaterOperatingScheduleName;

		private string _Field_SensibleHeatRatioFunctionOfTemperatureCurveName = @"The name of a biquadratic normalized curve (Ref: Performance Curves) that parameterizes the variation of the sensible heat ratio (SHR) as a function of DX cooling coil entering air wet-bulb and dry-bulb temperatures. The output of this curve is multiplied by the rated SHR and the SHR modifier curve (function of flow fraction) to give the SHR at the specific coil entering air temperature and air flow conditions at which the cooling coil is operating. This curve is normalized to a value of 1.0 at the rated condition. This input field is optional.";
		public static string Field_SensibleHeatRatioFunctionOfTemperatureCurveName => Value._Field_SensibleHeatRatioFunctionOfTemperatureCurveName;

		private string _Field_SensibleHeatRatioFunctionOfFlowFractionCurveName = @"The name of a quadratic or cubic normalized curve (Ref: Performance Curves) that parameterizes the variation of the sensible heat ratio (SHR) as a function of the ratio of actual air flow rate across the cooling coil to the rated air flow rate (i.e., fraction of full load flow). The output of this curve is multiplied by the rated SHR and the SHR modifier curve (function of temperature) to give the SHR at the specific temperature and air flow conditions at which the cooling coil is operating. This curve is normalized to a value of 1.0 when the actual air flow rate equals the rated air flow rate. This input field is optional.";
		public static string Field_SensibleHeatRatioFunctionOfFlowFractionCurveName => Value._Field_SensibleHeatRatioFunctionOfFlowFractionCurveName;

		private string _Field_LowSensibleHeatRatioFunctionOfTemperatureCurveName = @"The name of a biquadratic normalized curve (Ref: Performance Curves) that parameterizes the variation of the sensible heat ratio (SHR) as a function of DX cooling coil entering air wet-bulb and dry-bulb temperatures. The output of this curve is multiplied by the rated SHR and the SHR modifier curve (function of flow fraction) to give the SHR at the specific coil entering air temperature and air flow conditions at which the cooling coil is operating. This curve is normalized to a value of 1.0 at the rated condition. This input field is optional.";
		public static string Field_LowSensibleHeatRatioFunctionOfTemperatureCurveName => Value._Field_LowSensibleHeatRatioFunctionOfTemperatureCurveName;

		private string _Field_LowSensibleHeatRatioFunctionOfFlowFractionCurveName = @"The name of a quadratic or cubic normalized curve (Ref: Performance Curves) that parameterizes the variation of the sensible heat ratio (SHR) as a function of the ratio of actual air flow rate across the cooling coil to the rated air flow rate (i.e., fraction of full load flow). The output of this curve is multiplied by the rated SHR and the SHR modifier curve (function of temperature) to give the SHR at the specific temperature and air flow conditions at which the cooling coil is operating. This curve is normalized to a value of 1.0 when the actual air flow rate equals the rated air flow rate. This input field is optional.";
		public static string Field_LowSensibleHeatRatioFunctionOfFlowFractionCurveName => Value._Field_LowSensibleHeatRatioFunctionOfFlowFractionCurveName;

		private string _Field_ZoneNameForCondenserPlacement = @"This input field is name of a conditioned or unconditioned zone where the secondary coil (condenser) of DX system or a heat pump is to be placed. This is an optional input field specified only when user desires to reject the condenser heat into a zone. The heat rejected is modeled as sensible internal gain of a secondary zone.

Following are example inputs for the object.



Coil:Cooling:DX:TwoSpeed,
  Main Cooling Coil 1,         !- Name
  CoolingCoilAvailSched,     !- Availability Schedule Name
  autosize,                               !- Gross Rated High Speed Total Cooling Capacity {W}
  0.68,                                       !- Gross Rated High Speed Sensible Heat Ratio
  3.0,                                         !- Gross Rated High Speed Cooling COP
  autosize,                               !- Rated High Speed Air Flow Rate {m3/s}
  ,                                               !- Unit Internal Static Air Pressure Drop {Pa}
  Mixed Air Node 1,               !- Air Inlet Node Name
  Main Cooling Coil 1 Outlet Node,   !- Air Outlet Node Name
  VarSpeedCoolCapFT,             !- Total Cooling Capacity Function of Temperature Curve Name
  PackagedRatedCoolCapFFlow,   !- Total Cooling Capacity Function of Flow Fraction Curve Name
  VarSpeedCoolEIRFT,             !- Energy Input Ratio Function of Temperature Curve Name
  PackagedRatedCoolEIRFFlow,   !- Energy Input Ratio Function of Flow Fraction Curve Name
  VarSpeedCyclingPLFFPLR,   !- Part Load Fraction Correlation Curve Name
  autosize,                               !- Rated Low Speed Total Cooling Capacity {W}
  0.69,                                       !- Rated Low Speed Sensible Heat Ratio
  4.2,                                         !- Rated Low Speed COP
  autosize,                               !- Rated Low Speed Air Flow Rate {m3/s}
  VarSpeedCoolCapLSFT,         !- Low Speed Total Cooling Capacity Function of Temperature Curve Name
  VarSpeedCoolEIRLSFT,         !- Low Speed Energy Input Ratio Function of Temperature Curve Name
  Main Cooling Coil 1 Condenser Node;   !- Condenser Air Inlet Node Name


  Coil:Cooling:DX:TwoSpeed,
  Main Cooling Coil 1,         !- Name
  CoolingCoilAvailSched,     !- Availability Schedule Name
  autosize,                               !- High Speed Rated Total Cooling Capacity {W}
  0.68,                                       !- High Speed Rated Sensible Heat Ratio
  3.0,                                         !- High Speed Rated Cooling COP
  autosize,                               !- High Speed Rated Air Flow Rate {m3/s}
  ,                                               !- Unit Internal Static Air Pressure Drop {Pa}
  Mixed Air Node 1,               !- Air Inlet Node Name
  Main Cooling Coil 1 Outlet Node,   !- Air Outlet Node Name
  VarSpeedCoolCapFT,             !- Total Cooling Capacity Function of Temperature Curve Name
  PackagedRatedCoolCapFFlow,   !- Total Cooling Capacity Function of Flow Fraction Curve Name
  VarSpeedCoolEIRFT,             !- Energy Input Ratio Function of Temperature Curve Name
  PackagedRatedCoolEIRFFlow,   !- Energy Input Ratio Function of Flow Fraction Curve Name
  VarSpeedCyclingPLFFPLR,   !- Part Load Fraction Correlation Curve Name
  autosize,                               !- Low Speed Rated Total Cooling Capacity {W}
  0.69,                                       !- Low Speed Rated Sensible Heat Ratio
  4.2,                                         !- Low Speed Rated Cooling COP
  autosize,                               !- Low Speed Rated Air Flow Rate {m3/s}
  VarSpeedCoolCapLSFT,         !- Low Speed Total Cooling Capacity Function of Temperature Curve Name
  VarSpeedCoolEIRLSFT,         !- Low Speed Energy Input Ratio Function of Temperature Curve Name
  Main Cooling Coil 1 Condenser Node;   !- Condenser Air Inlet Node Name
  ,                                               !- Condenser Type
  ,                                               !- High Speed Evaporative Condenser Effectiveness {dimensionless}
  ,                                               !- High Speed Evaporative Condenser Air Flow Rate {m3/s}
  ,                                               !- High Speed Evaporative Condenser Pump Rated Power Consumption {W}
  ,                                               !- Low Speed Evaporative Condenser Effectiveness {dimensionless}
  ,                                               !- Low Speed Evaporative Condenser Air Flow Rate {m3/s}
  ,                                               !- Low Speed Evaporative Condenser Pump Rated Power Consumption {W}
  ,                                               !- Supply Water Storage Tank Name
  ,                                               !- Condensate Collection Water Storage Tank Name
  ,                                               !- Basin Heater Capacity {W/K}
  ,                                               !- Basin Heater Setpoint Temperature {C}
  ,                                               !- Basin Heater Operating Schedule Name
  DOAS DX Coil SHR-FT,         !- High Speed Sensible Heat Ratio Function of Temperature Curve Name
  DOAS DX Coil SHR-FF,         !- High Speed Sensible Heat Ratio Function of Flow Fraction Curve Name
  DOAS DX Coil SHR-FT,         !- Low Speed Sensible Heat Ratio Function of Temperature Curve Name
  DOAS DX Coil SHR-FF;         !- Low Speed Sensible Heat Ratio Function of Flow Fraction Curve Name


  Curve:Quadratic,
  DOAS DX Coil SHR-FF,                                                                         !- Name
  0.9317,                                                                                                   !- Coefficient1 Constant
  -0.0077,                                                                                                   !- Coefficient2 x
  0.0760,                                                                                                   !- Coefficient3 x**2
  0.69,                                                                                                       !- Minimum Value of x
  1.30;                                                                                                       !- Maximum Value of x


  Curve:Biquadratic,
  DOAS DX Coil SHR-FT,                                                                         !- Name
  1.3294540786,                                                                                       !- Coefficient1 Constant
  -0.0990649255,                                                                                     !- Coefficient2 x
  0.0008310043,                                                                                       !- Coefficient3 x**2
  0.0652277735,                                                                                       !- Coefficient4 y
  -0.0000793358,                                                                                     !- Coefficient5 y**2
  -0.0005874422,                                                                                     !- Coefficient6 x*y
  24.44,                                                                                                     !- Minimum Value of x
  26.67,                                                                                                     !- Maximum Value of x
  29.44,                                                                                                     !- Minimum Value of y
  46.1,                                                                                                       !- Maximum Value of y
  0.6661,                                                                                                   !- Minimum Curve Output
  1.6009,                                                                                                   !- Maximum Curve Output
  Temperature,                                                                                         !- Input Unit Type for X
  Temperature,                                                                                         !- Input Unit Type for Y
  Dimensionless;                                                                                     !- Output Unit Type";
		public static string Field_ZoneNameForCondenserPlacement => Value._Field_ZoneNameForCondenserPlacement;

	

}

	public sealed class CoilCoolingDXTwoStageWithHumidityControlMode
    { 

		private string _name = @"Coil:Cooling:DX:TwoStageWithHumidityControlMode";
		private string _note = @"The multimode DX coil is functionally equivalent to Coil:Cooling:DX:SingleSpeed but with multiple performance modes. It is capable of modeling two-stage DX units and units with an enhanced dehumidification mode such as coil bypass or subcool reheat. This object contains one-time specifications for the DX unit such as node names and crankcase heater specifications. It references one or more CoilPerformance:DX:Cooling objects which define the performance for each mode of operation. It can have up to 4 performance modes to accommodate a 2-stage 2-mode unit.

The multimode DX coil can be used only as a component of CoilSystem:Cooling:DX or AirLoopHVAC:UnitaryHeatCool:VAVChangeoverBypass (parent object). These parent objects pass a load and dehumidification mode to this coil. If the coil has 2 capacity stages, the multimode coil model determines the stage sequencing.
";
		

		private static readonly System.Lazy<CoilCoolingDXTwoStageWithHumidityControlMode> instance = new System.Lazy<CoilCoolingDXTwoStageWithHumidityControlMode>(() => new CoilCoolingDXTwoStageWithHumidityControlMode());
        private static CoilCoolingDXTwoStageWithHumidityControlMode Value => instance.Value;
		public static string Name => Value._name;
        public static string Note => Value._note;
		private CoilCoolingDXTwoStageWithHumidityControlMode(){}

	private string _Field_Name = @"A unique user-assigned name for an instance of a DX cooling coil. Any reference to this DX coil by another object will use this name.";
		public static string Field_Name => Value._Field_Name;

		private string _Field_AvailabilityScheduleName = @"The name of the schedule (ref: Schedule) that denotes whether the DX cooling coil can run during a given time period. A schedule value greater than 0 (usually 1 is used) indicates that the unit can be on during a given time period. A value less than or equal to 0 (usually 0 is used) denotes that the unit must be off. If this field is blank, the schedule has values of 1 for all time periods.";
		public static string Field_AvailabilityScheduleName => Value._Field_AvailabilityScheduleName;

		private string _Field_AirInletNodeName = @"The name of the HVAC system node from which the DX cooling coil draws its inlet air.";
		public static string Field_AirInletNodeName => Value._Field_AirInletNodeName;

		private string _Field_AirOutletNodeName = @"The name of the HVAC system node to which the DX cooling coil sends its outlet air.";
		public static string Field_AirOutletNodeName => Value._Field_AirOutletNodeName;

		private string _Field_CrankcaseHeaterCapacity = @"This numeric field defines the crankcase heater capacity in Watts. When the outdoor air dry-bulb temperature is below the value specified in the input field Maximum Outdoor Dry-bulb Temperature for Crankcase Heater Operation (described below), the crankcase heater is enabled during the time that the compressor is not running. If this cooling coil is used as part of an air-to-air heat pump (Ref. AirLoopHVAC:UnitaryHeatCool:VAVChangeoverBypass), the crankcase heater defined for this DX cooling coil is ignored and the crankcase heater power defined for the DX heating coil (Ref. Coil:Heating:DX:SingleSpeed) is enabled during the time that the compressor is not running for either heating or cooling. The value for this input field must be greater than or equal to 0, and the default value is 0. To simulate a DX cooling coil without a crankcase heater, enter a value of 0.";
		public static string Field_CrankcaseHeaterCapacity => Value._Field_CrankcaseHeaterCapacity;

		private string _Field_MaximumOutdoorDryBulbTemperatureForCrankcaseHeaterOperation = @"This numeric field defines the outdoor air dry-bulb temperature above which the compressor s crankcase heater is disabled. The value for this input field must be greater than or equal to 0.0 ??C, and the default value is 10 ??C.";
		public static string Field_MaximumOutdoorDryBulbTemperatureForCrankcaseHeaterOperation => Value._Field_MaximumOutdoorDryBulbTemperatureForCrankcaseHeaterOperation;

		private string _Field_NumberOfCapacityStages = @"This integer field defines the number of capacity stages. The value for this input field must be either 1 or 2, and the default value is 1. Larger DX units often have two capacity stages, which are often two completely independent compressor/coil circuits with the evaporator coils arranged in parallel in the supply air stream. 2-stage operation affects cycling losses and latent degradation due to re-evaporation of moisture with continuous fan operation.";
		public static string Field_NumberOfCapacityStages => Value._Field_NumberOfCapacityStages;

		private string _Field_NumberOfEnhancedDehumidificationModes = @"This integer field defines the number of enhanced dehumidification modes available. The value for this input field must be 0 or 1, and the default value is 0. If the DX unit can switch operating modes to increase dehumidification based on a humidistat signal, then set this to 1. This field just specified the availability of enhanced dehumidification. Actual control of the operating mode is handled by the coil's parent component.";
		public static string Field_NumberOfEnhancedDehumidificationModes => Value._Field_NumberOfEnhancedDehumidificationModes;

		private string _Field_NormalModeStage1CoilPerformanceObjectType = @"";
		public static string Field_NormalModeStage1CoilPerformanceObjectType => Value._Field_NormalModeStage1CoilPerformanceObjectType;

		private string _Field_NormalModeStage1CoilPerformanceObjectName = @"This pair of fields specifies the object type and name for the coil performance object which specifies the DX coil performance for stage 1 operation without enhanced dehumidification (normal mode). The only valid performance object type is CoilPerformance:DX:Cooling.";
		public static string Field_NormalModeStage1CoilPerformanceObjectName => Value._Field_NormalModeStage1CoilPerformanceObjectName;

		private string _Field_NormalModeStage12CoilPerformanceObjectType = @"";
		public static string Field_NormalModeStage12CoilPerformanceObjectType => Value._Field_NormalModeStage12CoilPerformanceObjectType;

		private string _Field_NormalModeStage12CoilPerformanceObjectName = @"This pair of fields specifies the object type and name for the coil performance object which specifies the DX coil performance for stage 1+2 operation (both stages active) without enhanced dehumidification (normal mode). The only valid performance object type is CoilPerformance:DX:Cooling.";
		public static string Field_NormalModeStage12CoilPerformanceObjectName => Value._Field_NormalModeStage12CoilPerformanceObjectName;

		private string _Field_DehumidificationMode1Stage1CoilPerformanceObjectType = @"";
		public static string Field_DehumidificationMode1Stage1CoilPerformanceObjectType => Value._Field_DehumidificationMode1Stage1CoilPerformanceObjectType;

		private string _Field_DehumidificationMode1Stage1CoilPerformanceObjectName = @"This pair of fields specifies the object type and name for the coil performance object which specifies the DX coil performance for stage 1 operation with enhanced dehumidification active. The only valid performance object type is CoilPerformance:DX:Cooling.";
		public static string Field_DehumidificationMode1Stage1CoilPerformanceObjectName => Value._Field_DehumidificationMode1Stage1CoilPerformanceObjectName;

		private string _Field_DehumidificationMode1Stage12CoilPerformanceObjectType = @"";
		public static string Field_DehumidificationMode1Stage12CoilPerformanceObjectType => Value._Field_DehumidificationMode1Stage12CoilPerformanceObjectType;

		private string _Field_DehumidificationMode1Stage12CoilPerformanceObjectName = @"This pair of fields specifies the object type and name for the coil performance object which specifies the DX coil performance for stage 1+2 operation (both stages active) with enhanced dehumidification active. The only valid performance object type is CoilPerformance:DX:Cooling.";
		public static string Field_DehumidificationMode1Stage12CoilPerformanceObjectName => Value._Field_DehumidificationMode1Stage12CoilPerformanceObjectName;

		private string _Field_SupplyWaterStorageTankName = @"This field is optional. It is used to describe where the coil obtains water used for evaporative cooling. If blank or omitted, then the cooler will obtain water directly from the mains. If the name of a Water Storage Tank object is used here, then the cooler will obtain its water from that tank. If a tank is specified, the coil will attempt to obtain all the water it uses from the tank. However if the tank cannot provide all the water the cooler needs, then the cooler will still operate and obtain the rest of the water it needs from the mains (referred to as StarvedWater).";
		public static string Field_SupplyWaterStorageTankName => Value._Field_SupplyWaterStorageTankName;

		private string _Field_CondensateCollectionWaterStorageTankName = @"This field is optional. It is used to describe where condensate from the coil is collected. If blank or omitted, then any coil condensate is discarded. Enter the name of Water Storage Tank object defined elsewhere and the condensate will then be collected in that tank.";
		public static string Field_CondensateCollectionWaterStorageTankName => Value._Field_CondensateCollectionWaterStorageTankName;

		private string _Field_MinimumOutdoorDryBulbTemperatureForCompressorOperation = @"This numeric field defines the minimum outdoor air dry-bulb temperature where the cooling coil compressor turns off. If this input field is left blank, the value defaults to that specified in the IDD (e.g., -25 ??C). If this field is not included in the input, the default value is -25 ??C.";
		public static string Field_MinimumOutdoorDryBulbTemperatureForCompressorOperation => Value._Field_MinimumOutdoorDryBulbTemperatureForCompressorOperation;

		private string _Field_BasinHeaterCapacity = @"This numeric field contains the capacity of the DX coil s electric evaporative cooler basin heater in watts per degree Kelvin. This field only applies for Condenser Type = EvaporativelyCooled. This field is used in conjunction with the Basin Heater Setpoint Temperature described in the following field. The basin heater electric power is equal to this field multiplied by the difference between the basin heater set point temperature and the outdoor dry-bulb temperature. The basin heater only operates when the DX coil is off, regardless of the basin heater schedule described below. The basin heater capacity must be greater than or equal to zero, with a default value of zero if this field is left blank.";
		public static string Field_BasinHeaterCapacity => Value._Field_BasinHeaterCapacity;

		private string _Field_BasinHeaterSetpointTemperature = @"This numeric field contains the set point temperature (??C) for the basin heater described in the previous field. This field only applies for Condenser Type = EvaporativelyCooled. The basin heater is active when the outdoor air dry-bulb temperature falls below this setpoint temperature, as long as the DX coil is off. This set point temperature must be greater than or equal to 2??C, and the default value is 2??C if this field is left blank.";
		public static string Field_BasinHeaterSetpointTemperature => Value._Field_BasinHeaterSetpointTemperature;

		private string _Field_BasinHeaterOperatingScheduleName = @"This alpha field contains the name of the basin heater operating schedule. This field only applies for Condenser Type = EvaporativelyCooled. The basin heater operating schedule is assumed to be an on/off schedule and the heater is available to operate any time the schedule value is greater than 0. The basin heater operates when scheduled on and the outdoor air dry-bulb temperature is below the set point temperature described in the previous field. If this field is left blank, the basin heater is available to operate throughout the simulation. Regardless of this schedule, the basin heater may only operate when the DX coil is off.

Following is an example IDF use of the object:



Coil:Cooling:DX:TwoStageWithHumidityControlMode,
  DOAS Cooling Coil,                          !- Name
  HVACTemplate-Always 1,                      !- Availability Schedule Name
  DOAS Supply Fan Outlet,                     !- Air Inlet Node Name
  DOAS Cooling Coil Outlet,                   !- Air Outlet Node Name
  ,                                           !- Crankcase Heater Capacity
  ,                                           !- Maximum Outdoor Dry-Bulb Temperature for Crankcase Heater
  2,                                          !- Number of Capacity Stages
  1,                                          !- Number of Enhanced Dehumidification Modes
  CoilPerformance:DX:Cooling,                 !- Normal Mode Stage 1 Coil Performance Object Type
  DOAS Standard Perf 1,                       !- Normal Mode Stage 1 Coil Performance Name
  CoilPerformance:DX:Cooling,                 !- Normal Mode Stage 1+2 Coil Performance Object Type
  DOAS Standard Perf 1+2,                     !- Normal Mode Stage 1+2 Coil Performance Name
  CoilPerformance:DX:Cooling,                 !- Dehumidification Mode 1 Stage 1 Coil Performance Object Type
  DOAS Dehumid Perf 1,                        !- Dehumidification Mode 1 Stage 1 Coil Performance Name
  CoilPerformance:DX:Cooling,                 !- Dehumidification Mode 1 Stage 1+2 Coil Performance Object Type
  DOAS Dehumid Perf 1+2;                      !- Dehumidification Mode 1 Stage 1+2 Coil Performance Name";
		public static string Field_BasinHeaterOperatingScheduleName => Value._Field_BasinHeaterOperatingScheduleName;

	

}

	public sealed class CoilCoolingDXMultiSpeed
    { 

		private string _name = @"Coil:Cooling:DX:MultiSpeed";
		private string _note = @"This component models a DX cooling unit with multiple discrete levels of cooling capacity. Depending on input choices, the user can model a single compressor with multiple operating speeds, or a unit with a single cooling coil fed by multiple compressors (e.g., row split or intertwined coil circuiting). Currently, this cooling coil can only be referenced by a AirLoopHVAC:UnitaryHeatPump:AirToAir:Multispeed object. Refer to Coil:Cooling:DX:TwoStageWithHumidityControlMode if the user wishes to model a cooling coil with discrete levels of cooling and the possibility of air bypass during low speed operation (e.g.~face-split coil circuiting), or if cooling coil operation based on dehumidification requirements is desired.

The multispeed DX cooling coil can have from two to four operating speeds. When the coil operates at Speed 1 (the lowest speed), its performance is very similar to the single speed DX coil where the impacts of part-load ratio and latent capacity degradation can be included. When the coil operates at higher speeds (above Speed 1), the linear approximation methodology is applied. The coil outputs at two consecutive speeds are linearly interpolated to meet the required cooling capacity during an HVAC system timestep. When the coil performs above the lowest speed, the user can chose if they want to include part-load ratio and latent capacity degradation impacts at the higher speeds.

The multispeed unit is described by specifying the performance at different operating speeds. Each speed has its own set of input specifications: full load capacity, SHR, COP and air flow rate at rated conditions, along with modifier curves to determine performance when actual operating conditions are different from the rated conditions.

The coil operates to meet the sensible capacity being requested. When this requested capacity is above the sensible capacity of the highest operating speed, the coil runs continuously at the highest speed. When the requested capacity is between the sensible capacities of two consecutive speeds, the unit will operate a portion of the time at each speed to meet the request. When the requested capacity is less than the low speed (Speed 1) capacity, the unit will cycle on/off as needed.
";
		

		private static readonly System.Lazy<CoilCoolingDXMultiSpeed> instance = new System.Lazy<CoilCoolingDXMultiSpeed>(() => new CoilCoolingDXMultiSpeed());
        private static CoilCoolingDXMultiSpeed Value => instance.Value;
		public static string Name => Value._name;
        public static string Note => Value._note;
		private CoilCoolingDXMultiSpeed(){}

	private string _Field_Name = @"A unique user-assigned name for an instance of a multispeed DX cooling coil. Any reference to this DX coil by another object will use this name.";
		public static string Field_Name => Value._Field_Name;

		private string _Field_AvailabilityScheduleName = @"The name of the schedule (ref: Schedule) that denotes whether the DX cooling coil can run during a given time period. A schedule value greater than 0 (usually 1 is used) indicates that the unit can be on during the time period. A value less than or equal to 0 (usually 0 is used) denotes that the unit must be off for the time period. If this field is blank, the schedule has values of 1 for all time periods.";
		public static string Field_AvailabilityScheduleName => Value._Field_AvailabilityScheduleName;

		private string _Field_AirInletNodeName = @"The name of the HVAC system node from which the DX cooling coil draws its inlet air.";
		public static string Field_AirInletNodeName => Value._Field_AirInletNodeName;

		private string _Field_AirOutletNodeName = @"The name of the HVAC system node to which the DX cooling coil sends its outlet air.";
		public static string Field_AirOutletNodeName => Value._Field_AirOutletNodeName;

		private string _Field_CondenserAirInletNodeName = @"This optional alpha field specifies the outdoor air node name used to define the conditions of the air entering the outdoor condenser. If this field is left blank, the outdoor air temperature entering the condenser (dry-bulb or wet-bulb) is taken directly from the weather data. If this field is not blank, the node name specified must also be specified in an OutdoorAir:Node object where the height of the node is taken into consideration when calculating outdoor air temperature from the weather data. Alternately, the node name may be specified in an OutdoorAir:NodeList object where the outdoor air temperature is taken directly from the weather data.";
		public static string Field_CondenserAirInletNodeName => Value._Field_CondenserAirInletNodeName;

		private string _Field_CondenserType = @"The type of condenser used by the multispeed DX cooling coil. Valid choices for this input field are AirCooled or EvaporativelyCooled. The default for this field is AirCooled.";
		public static string Field_CondenserType => Value._Field_CondenserType;

		private string _Field_SupplyWaterStorageTankName = @"This field is optional. It is used to describe where the coil obtains water used for evaporative cooling. If blank or omitted, then the evaporative cooler will obtain water directly from the mains. If the name of a Water Storage Tank object is used here, then the cooler will obtain its water from that tank. If a tank is specified, the coil will attempt to obtain all the water it uses from the tank. However if the tank cannot provide all the water the cooler needs, then the cooler will still operate and obtain the rest of the water it needs from the mains (referred to as StarvedWater).";
		public static string Field_SupplyWaterStorageTankName => Value._Field_SupplyWaterStorageTankName;

		private string _Field_CondensateCollectionWaterStorageTankName = @"This field is optional. It is used to describe where condensate from the coil is collected. If blank or omitted, then any coil condensate is discarded. Enter the name of Water Storage Tank object defined elsewhere and the condensate will then be collected in that tank.";
		public static string Field_CondensateCollectionWaterStorageTankName => Value._Field_CondensateCollectionWaterStorageTankName;

		private string _Field_ApplyPartLoadFractionToSpeedsGreaterThan1 = @"This field determines whether part-load impacts on coil energy use are applied when the coil is operating at speeds greater than speed 1. The allowed choices are Yes or No, with the default being No if this field is left blank. Other input fields in this object allow the user to specify a part-load fraction correlation for each speed to account for compressor start up losses (cycle on/off). For the case of a single multi-speed compressor, the part load losses may only be significant when the compressor cycles between speed 1 and off, but the losses may be extremely small when the compressor operates between speed 1 and speed 2 (or between speeds 2 and 3, etc.). In this case, the user may chose to specify NO for this input field to neglect part-load impacts on energy use at higher operating speeds. If part-load impacts on coil energy use are thought to be significant (e.g., interwined cooling coil with multiple compressors feeding individual refrigerant circuits), then the user may chose to specify YES and the part-load fraction correlations specified for speeds 2 through 4 will be applied as appropriate. The selection for this input field does not affect part-load impacts when the compressor cycles between speed 1 and off (i.e., the part-load fraction correlation for speed 1 is always applied).";
		public static string Field_ApplyPartLoadFractionToSpeedsGreaterThan1 => Value._Field_ApplyPartLoadFractionToSpeedsGreaterThan1;

		private string _Field_ApplyLatentDegradationToSpeedsGreaterThan1 = @"This field determines whether latent capacity degradation is applied when the coil is operating at speeds greater than speed 1. The allowed choices are Yes or No, with the default being No if this field is left blank. Other input fields in this object allow the user to specify latent capacity degradation at each speed.

The latent capacity degradation model only applies when the ContinuousFanWithCyclingCompressor supply air fan operating mode is specified, to account for moisture evaporation from the wet cooling coil when the compressor cycles off but the supply air fan continues to operate. For the case of a single multi-speed compressor, latent capacity degradation may only be significant when the compressor cycles between speed 1 and off, but the losses may be extremely small when the compressor operates between speed 1 and speed 2 (or between speeds 2 and 3, etc.). In this case, the user may chose to specify NO for this input field to neglect latent capacity degradation impacts at higher operating speeds. If latent capacity degradation is thought to be significant (e.g., interwined or row-split cooling coil with multiple compressors feeding individual refrigerant circuits), then the user may chose to specify YES and the latent capacity degradation model will be applied for speeds 2 through 4 as appropriate. The selection for this input field does not affect latent capacity degradation between speed 1 and off.";
		public static string Field_ApplyLatentDegradationToSpeedsGreaterThan1 => Value._Field_ApplyLatentDegradationToSpeedsGreaterThan1;

		private string _Field_CrankcaseHeaterCapacity = @"This numeric field defines the crankcase heater capacity in Watts. When the outdoor air dry-bulb temperature is below the value specified in the input field Maximum Outdoor Dry-bulb Temperature for Crankcase Heater Operation (described below), the crankcase heater is enabled during the time that the compressor is not running. The value for this input field must be greater than or equal to 0. If this input field is left blank, the default value is 0. To simulate a unit without a crankcase heater, enter a value of 0.";
		public static string Field_CrankcaseHeaterCapacity => Value._Field_CrankcaseHeaterCapacity;

		private string _Field_MaximumOutdoorDryBulbTemperatureForCrankcaseHeaterOperation = @"This numeric field defines the outdoor air dry-bulb temperature above which the compressor s crankcase heater is disabled. The value for this input field must be greater than or equal to 0.0 ??C. If this input field is left blank, the default value is 10 ??C.";
		public static string Field_MaximumOutdoorDryBulbTemperatureForCrankcaseHeaterOperation => Value._Field_MaximumOutdoorDryBulbTemperatureForCrankcaseHeaterOperation;

		private string _Field_MinimumOutdoorDryBulbTemperatureForCompressorOperation = @"This numeric field defines the minimum outdoor air dry-bulb temperature where the cooling coil compressor turns off. If this input field is left blank, the value defaults to that specified in the IDD (e.g., -25 ??C).";
		public static string Field_MinimumOutdoorDryBulbTemperatureForCompressorOperation => Value._Field_MinimumOutdoorDryBulbTemperatureForCompressorOperation;

		private string _Field_BasinHeaterCapacity = @"This numeric field contains the capacity of the DX coil s electric evaporative cooler basin heater in watts per degree Kelvin. This field only applies for Condenser Type = EvaporativelyCooled. This field is used in conjunction with the Basin Heater Setpoint Temperature described in the following field. The basin heater electric power is equal to this field multiplied by the difference between the basin heater set point temperature and the outdoor dry-bulb temperature. The basin heater only operates when the DX coil is off, regardless of the basin heater schedule described below. The basin heater capacity must be greater than or equal to zero, with a default value of zero if this field is left blank.";
		public static string Field_BasinHeaterCapacity => Value._Field_BasinHeaterCapacity;

		private string _Field_BasinHeaterSetpointTemperature = @"This numeric field contains the set point temperature (??C) for the basin heater described in the previous field. This field only applies for Condenser Type = EvaporativelyCooled. The basin heater is active when the outdoor air dry-bulb temperature falls below this setpoint temperature, as long as the DX coil is off. This set point temperature must be greater than or equal to 2??C, and the default value is 2??C if this field is left blank.";
		public static string Field_BasinHeaterSetpointTemperature => Value._Field_BasinHeaterSetpointTemperature;

		private string _Field_BasinHeaterOperatingScheduleName = @"This alpha field contains the name of the basin heater operating schedule. This field only applies for Condenser Type = EvaporativelyCooled. The basin heater operating schedule is assumed to be an on/off schedule and the heater is available to operate any time the schedule value is greater than 0. The basin heater operates when scheduled on and the outdoor air dry-bulb temperature is below the set point temperature described in the previous field. If this field is left blank, the basin heater is available to operate throughout the simulation. Regardless of this schedule, the basin heater may only operate when the DX coil is off.";
		public static string Field_BasinHeaterOperatingScheduleName => Value._Field_BasinHeaterOperatingScheduleName;

		private string _Field_FuelType = @"This alpha field determines the type of fuel that this cooling coil uses. This field has seven choices: Electricity, NaturalGas, Propane, Coal, Diesel, Gasoline, FuelOil1, FuelOil2, OtherFuel1 and OtherFuel2. This is a required field with no default.";
		public static string Field_FuelType => Value._Field_FuelType;

		private string _Field_NumberOfSpeeds = @"This field specifies the number of sets of data being entered for rated specifications, performance curves, evaporative condenser data, latent degradation data, and waste heat specifications for each cooling speed. The rated specifications consist of gross rated capacity, gross rated SHR, gross rated COP, and rated air flow rate. The performance curves consist of a total capacity modifier curve as a function of temperature, total capacity modifier curve as a function of flow fraction, energy input ratio modifier curve as a function of temperature, energy input ratio modifier curve as a function of flow fraction, and part load fraction correlation as a function of part load ratio. The evaporative condenser data consists of effectiveness, condenser air volume flow rate, and rated pump power consumption. The latent degradation data consists of nominal time for condensate removal to begin, ratio of initial moisture evaporation rate and steady-state latent capacity, maximum On/Off cycling rate, and latent capacity time constant. The latent degradation data are only applied if the supply air fan operation mode is specified as ContinuousFanWithCyclingCompressor. The waste heat specifications include the fraction of energy input to the cooling coil at the fully loaded and rated conditions, and a temperature modifier. The minimum number of speeds for cooling is 2 and the maximum number is 4. The number of speeds should be the same as the number of speeds for cooling defined in its parent object (AirLoopHVAC:UnitaryHeatPump:AirToAir:MultiSpeed). The first set of performance inputs is for Speed 1 and should be for low speed, and the last set of performance inputs should be for high speed. For example, if only three cooling speeds are defined, the first set should be for low speed (Speed 1), the second set should be for medium speed (Speed 2), and the third set should be for high speed (Speed 3). In this example, any performance inputs for Speed 4 would be neglected (since this input field specifies that the coil only has three cooling speeds).";
		public static string Field_NumberOfSpeeds => Value._Field_NumberOfSpeeds;

		private string _Field_GroupRatedSpecificationPerformanceCurvesLatentCapacityDegradationInputsAndEvaporativeCooledCondenserData = @"The performance for each cooling speed must be specified as shown below. All inputs for Speed 1 are required first, followed by the inputs for Speed 2, Speed 3 and Speed 4.";
		public static string Field_GroupRatedSpecificationPerformanceCurvesLatentCapacityDegradationInputsAndEvaporativeCooledCondenserData => Value._Field_GroupRatedSpecificationPerformanceCurvesLatentCapacityDegradationInputsAndEvaporativeCooledCondenserData;

		private string _Field_SpeedXGrossRatedTotalCoolingCapacity = @"The total, full load gross cooling capacity (sensible plus latent) in watts of the DX coil unit for Speed <x> operation at rated conditions (air entering the cooling coil at 26.7 ??C drybulb/19.4 ??C wetbulb, air entering the outdoor condenser coil at 35 ??C drybulb/23.9 ??C wetbulb\protect\hyperlink{ux5fftn3}{[3]}, and a cooling coil air flow rate defined by field Rated Air Flow Rate, Speed <x> below). Capacity should be gross (i.e., the effect of supply air fan heat is NOT accounted for).";
		public static string Field_SpeedXGrossRatedTotalCoolingCapacity => Value._Field_SpeedXGrossRatedTotalCoolingCapacity;

		private string _Field_SpeedXGrossRatedSensibleHeatRatio = @"The sensible heat ratio (SHR = gross sensible capacity divided by gross total cooling capacity) of the DX cooling coil for Speed <x> operation at rated conditions (air entering the cooling coil at 26.7 ??C drybulb/19.4 ??C wetbulb, air entering the outdoor condenser coil at 35 ??C drybulb/23.9 ??C wetbulb, and a cooling coil air flow rate defined by field Rated Air Flow Rate, Speed <x> below). Both the sensible and total cooling capacities used to define the Rated SHR should be gross (i.e., the effect of supply air fan heat is NOT accounted for).";
		public static string Field_SpeedXGrossRatedSensibleHeatRatio => Value._Field_SpeedXGrossRatedSensibleHeatRatio;

		private string _Field_SpeedXGrossRatedCoolingCOP = @"The coefficient of performance is the ratio of the gross total cooling capacity in watts to electrical power input in watts) of the DX cooling coil unit for Speed <x> operation at rated conditions (air entering the cooling coil at 26.7 ??C drybulb/19.4 ??C wetbulb, air entering the outdoor condenser coil at 35 ??C drybulb/23.9 ??C wetbulb, and a cooling coil air flow rate defined by field Rated Air Flow Rate, Speed <x> below). The input power includes power for the compressor(s) and condenser fan(s) but does not include the power consumption of the supply air fan. The gross COP should NOT account for the supply air fan. If this input field is left blank, the default value is 3.0.";
		public static string Field_SpeedXGrossRatedCoolingCOP => Value._Field_SpeedXGrossRatedCoolingCOP;

		private string _Field_SpeedXRatedAirFlowRate = @"The volumetric air flow rate for Speed <x>, in m^{3} per second, across the DX cooling coil at rated conditions. The rated air volume flow rate for Speed <x> should be between 0.00004027 m^{3}/s and 0.00006041 m^{3}/s per watt of the gross rated total cooling capacity for Speed <x>. The gross rated total cooling capacity, gross rated SHR and gross rated COP for Speed <x> should be performance information for the unit with air entering the cooling coil at 26.7 ??C drybulb/19.4 ??C wetbulb, air entering the outdoor condenser coil at 35 ??C drybulb/23.9 ??C wetbulb, and the rated air volume flow rate defined here.";
		public static string Field_SpeedXRatedAirFlowRate => Value._Field_SpeedXRatedAirFlowRate;

		private string _Field_SpeedXRatedEvaporatorFanPowerPerVolumeFlowRate = @"This field is the electric power for the evaporator (cooling coil) fan per air volume flow rate through the coil at the rated conditions for Speed <x> in W/(m3/s). The default value is 773.3 W/(m3/s) (365 W/1000 cfm) if this field is left blank. If a value is entered, it must be > = 0.0 and < = 1250 W/(m3/s). This value is only used to calculate Seasonal Energy Efficiency Ratio (SEER), and the Standard Rating (Net) Cooling Capacity which will be outputs in the EnergyPlus eio file (ref. EnergyPlus Engineering Reference, Multi-Speed DX Cooling Coil, Standard Ratings). This value is not used for modeling the evaporator (cooling coil) fan during simulations; instead, it is used for calculating SEER and Standard Rating Cooling Capacity to assist the user in verifying their inputs for modeling this type of equipment.";
		public static string Field_SpeedXRatedEvaporatorFanPowerPerVolumeFlowRate => Value._Field_SpeedXRatedEvaporatorFanPowerPerVolumeFlowRate;

		private string _Field_SpeedXTotalCoolingCapacityFunctionOfTemperatureCurveName = @"The name of a biquadratic performance curve (ref: Performance Curves) that parameterizes the variation of the gross total cooling capacity for Speed <x> as a function of the wet-bulb temperature of the air entering the cooling coil, and the dry-bulb temperature of the air entering the air-cooled condenser (wet-bulb temperature if modeling an evaporative-cooled condenser). The curve is normalized to 1 at 19.44 C indoor wet-bulb temperature and 35 C outdoor dry-bulb temperature. The output of this curve is multiplied by the gross rated total cooling capacity for Speed <x> to give the gross total cooling capacity at specific temperature operating conditions (i.e., at temperatures different from the rating point temperatures). The curve is normalized to have the value of 1.0 at the rating point.";
		public static string Field_SpeedXTotalCoolingCapacityFunctionOfTemperatureCurveName => Value._Field_SpeedXTotalCoolingCapacityFunctionOfTemperatureCurveName;

		private string _Field_SpeedXTotalCoolingCapacityFunctionOfFlowFractionCurveName = @"The name of a quadratic performance curve (ref: Performance Curves) that parameterizes the variation of the gross total cooling capacity for Speed <x> as a function of the ratio of actual air flow rate across the cooling coil to the rated air flow rate for Speed <x> (i.e., fraction of full load flow). The output of this curve is multiplied by the gross rated total cooling capacity and the total cooling capacity modifier curve (function of temperature) to give the gross total cooling capacity for Speed <x> at the specific temperature and air flow conditions at which the coil is operating. The curve is normalized to have the value of 1.0 when the actual air flow rate equals the rated air flow rate for Speed <x>.";
		public static string Field_SpeedXTotalCoolingCapacityFunctionOfFlowFractionCurveName => Value._Field_SpeedXTotalCoolingCapacityFunctionOfFlowFractionCurveName;

		private string _Field_SpeedXEnergyInputRatioFunctionOfTemperatureCurveName = @"The name of a biquadratic performance curve (ref: Performance Curves) that parameterizes the variation of the energy input ratio (EIR) for Speed <x> as a function of the wetbulb temperature of the air entering the cooling coil and the drybulb temperature of the air entering the air-cooled condenser (wetbulb temperature if modeling an evaporative-cooled condenser). The curve is normalized to 1 at 19.44 C indoor wet-bulb temperature and 35 C outdoor dry-bulb temperature. The EIR is the inverse of the COP. The output of this curve is multiplied by the rated EIR for Speed <x> (inverse of rated COP for Speed <x>) to give the EIR for Speed <x> at specific temperature operating conditions (i.e., at temperatures different from the rating point temperatures).";
		public static string Field_SpeedXEnergyInputRatioFunctionOfTemperatureCurveName => Value._Field_SpeedXEnergyInputRatioFunctionOfTemperatureCurveName;

		private string _Field_SpeedXEnergyInputRatioFunctionOfFlowFractionCurveName = @"The name of a quadratic performance curve (Ref: Performance Curves) that parameterizes the variation of the energy input ratio (EIR) for Speed <x> as a function of the ratio of actual air flow rate across the cooling coil to the rated air flow rate for Speed <x> (i.e., fraction of full load flow). The EIR is the inverse of the COP. The output of this curve is multiplied by the rated EIR and the EIR modifier curve (function of temperature) to give the EIR for Speed <x> at the specific temperature and air flow conditions at which the cooling coil is operating. This curve is normalized to a value of 1.0 when the actual air flow rate equals the rated air flow rate for Speed <x>.";
		public static string Field_SpeedXEnergyInputRatioFunctionOfFlowFractionCurveName => Value._Field_SpeedXEnergyInputRatioFunctionOfFlowFractionCurveName;

		private string _Field_SpeedXPartLoadFractionCorrelationCurveName = @"This alpha field defines the name of a quadratic or cubic performance curve (Ref: Performance Curves) that parameterizes the variation of electrical power input to the DX unit as a function of the part load ratio (PLR, sensible cooling load/steady-state sensible cooling capacity for Speed <x>). The product of the rated EIR and EIR modifier curves is divided by the output of this curve to give the effective EIR for a given simulation timestep for Speed <x>. The part load fraction (PLF) correlation accounts for efficiency losses due to compressor cycling.

The part load fraction correlation should be normalized to a value of 1.0 when the part load ratio equals 1.0 (i.e., no efficiency losses when the compressor(s) run continuously for the simulation timestep). For PLR values between 0 and 1 (0 < = PLR < 1), the following rules apply:


       PLF > = 0.7     and     PLF > = PLR


If PLF < 0.7 a warning message is issued, the program resets the PLF value to 0.7, and the simulation proceeds. The runtime fraction of the coil is defined as PLR/PLF. If PLF < PLR, then a warning message is issued and the runtime fraction of the coil is limited to 1.0.

A typical part load fraction correlation for a conventional DX cooling coil (Speed <x>) would be:


       PLF = 0.85 + 0.15(PLR)


If the user wishes to model no efficiency degradation due to compressor cycling, the part load fraction correlation should be defined as follows:


       PLF = 1.0 + 0.0(PLR)";
		public static string Field_SpeedXPartLoadFractionCorrelationCurveName => Value._Field_SpeedXPartLoadFractionCorrelationCurveName;

		private string _Field_SpeedXNominalTimeForCondensateRemovalToBegin = @"For Speed <x>, the nominal time (in seconds) after startup for condensate to begin leaving the coil's condensate drain line at the coil's rated airflow and temperature conditions, starting with a dry coil. Nominal time is equal to the ratio of the energy of the coil's maximum condensate holding capacity (J) to the coil's steady-state latent capacity (W). Suggested value is 1000; zero value means the latent degradation model is disabled. The default value for this field is zero. The supply air fan operating mode must be continuous (i.e., the supply air fan operating mode may be specified in other parent objects and is assumed continuous in some objects (e.g., CoilSystem:Cooling:DX) or can be scheduled in other objects [e.g., AirloopHVAC:UnitaryHeatCool]), and this field as well as the next three input fields for this object must have positive values in order to model latent capacity degradation for Speed <x>.";
		public static string Field_SpeedXNominalTimeForCondensateRemovalToBegin => Value._Field_SpeedXNominalTimeForCondensateRemovalToBegin;

		private string _Field_SpeedXRatioOfInitialMoistureEvaporationRateAndSteadyStateLatentCapacity = @"For Speed <x>, the ratio of the initial moisture evaporation rate from the cooling coil (when the compressor first turns off, in Watts) and the coil's steady-state latent capacity (Watts) for Speed <x> at rated airflow and temperature conditions. Suggested value is 1.5; zero value means the latent degradation model is disabled. The default value for this field is zero. The supply air fan operating mode must be continuous (i.e., the supply air fan operating mode may be specified in other parent objects and is assumed continuous in some objects (e.g., CoilSystem:Cooling:DX) or can be scheduled in other objects [e.g., AirloopHVAC:UnitaryHeatCool]); and this field, the previous field and the next two fields must have positive values in order to model latent capacity degradation for Speed <x>.";
		public static string Field_SpeedXRatioOfInitialMoistureEvaporationRateAndSteadyStateLatentCapacity => Value._Field_SpeedXRatioOfInitialMoistureEvaporationRateAndSteadyStateLatentCapacity;

		private string _Field_SpeedXMaximumCyclingRate = @"For Speed <x>, the maximum on-off cycling rate for the compressor (cycles per hour), which occurs at 50% run time fraction. Suggested value is 3; zero value means latent degradation model is disabled. The default value for this field is zero. The supply air fan operating mode must be continuous (i.e., the supply air fan operating mode may be specified in other parent objects and is assumed continuous in some objects (e.g., CoilSystem:Cooling:DX) or can be scheduled in other objects [e.g., AirloopHVAC:UnitaryHeatCool]); and this field, the previous two fields and the next field must have positive values in order to model latent capacity degradation for Speed <x>.";
		public static string Field_SpeedXMaximumCyclingRate => Value._Field_SpeedXMaximumCyclingRate;

		private string _Field_SpeedXLatentCapacityTimeConstant = @"For Speed <x>, the time constant (in seconds) for the cooling coil's latent capacity to reach steady state after startup. Suggested value is 45; zero value means latent degradation model is disabled. The default value for this field is zero. The supply air fan operating mode must be continuous (i.e., the supply air fan operating mode may be specified in other parent objects and is assumed continuous in some objects (e.g., CoilSystem:Cooling:DX) or can be scheduled in other objects [e.g., AirloopHVAC:UnitaryHeatCool]), and this field as well as the previous three input fields for this object must have positive values in order to model latent capacity degradation for Speed <x>.";
		public static string Field_SpeedXLatentCapacityTimeConstant => Value._Field_SpeedXLatentCapacityTimeConstant;

		private string _Field_SpeedXRatedWasteHeatFractionOfPowerInput = @"The fraction of energy input to the cooling coil that is available as recoverable waste heat at full load and rated conditions for Speed <x>.";
		public static string Field_SpeedXRatedWasteHeatFractionOfPowerInput => Value._Field_SpeedXRatedWasteHeatFractionOfPowerInput;

		private string _Field_SpeedXWasteHeatFunctionOfTemperatureCurveName = @"The name of a biquadratic performance curve (ref: Performance Curves) that parameterizes the variation of the waste heat recovery as a function of outdoor dry-bulb temperature and the entering coil dry-bulb temperature at Speed <x>. The output of this curve is multiplied by the rated waste heat fraction at specific temperature operating conditions (i.e., at temperatures different from the rating point). The curve is normalized to a value of 1.0 at the rating point. When the fuel type is electricity, this field can remain blank since it is ignored by the program in this instance. When the fuel type is not electricity and the parent object AirLoopHVAC:UnitaryHeatPump:AirToAir:MultiSpeed does not require waste heat calculations, this field is ignored. If the field is blank, a warning will be issued and simulation continues. When the fuel type is not electricity and the parent object AirLoopHVAC:UnitaryHeatPump:AirToAir:MultiSpeed requires waste heat calculations, if this field is left blank, the program assumes a constant value of 1 to make simulation continue and a warning will be issued.";
		public static string Field_SpeedXWasteHeatFunctionOfTemperatureCurveName => Value._Field_SpeedXWasteHeatFunctionOfTemperatureCurveName;

		private string _Field_SpeedXEvaporativeCondenserEffectiveness = @"The effectiveness of the evaporative condenser at Speed <x>, which is used to determine the temperature of the air entering the outdoor condenser coil as follows:

\begin{equation}
Tcond\,inlet = \,\left( {Twb,o} \right)\,\, + \,\,\left( {1 - EvapCondEffectivenes{s_{Speed1}}} \right)\left( {Tdb,o\,\, - Twb,o} \right)
\end{equation}

where

{T_{cond\\ inlet}} = the temperature of the air entering the condenser coil (C)

{T_{wb,o}} = the wet-bulb temperature of the outdoor air (C)

{T_{db,o}} = the dry-bulb temperature of the outdoor air (C)

The resulting condenser inlet air temperature is used by the Total Cooling Capacity Modifier Curve, Speed <x> (function of temperature) and the Energy Input Ratio Modifier Curve, Speed <x> (function of temperature). The default value for this field is 0.9, although valid entries can range from 0.0 to 1.0. This field is not used when Condenser Type = Air Cooled.

If the user wants to model an air-cooled condenser, they should simply specify AirCooled in the field Condenser Type. In this case, the Total Cooling Capacity Modifier Curve, Speed <x> (function of temperature) and the Energy Input Ratio Modifier Curve, Speed <x> (function of temperature) input fields for this object should reference performance curves that are a function of outdoor dry-bulb temperature.

If the user wishes to model an evaporative-cooled condenser AND they have performance curves that are a function of the wet-bulb temperature of air entering the condenser coil, then the user should specify Condenser Type = Evap Cooled and the evaporative condenser effectiveness value should be entered as 1.0. In this case, the Total Cooling Capacity Modifier Curve, Speed <x> (function of temperature) and the Energy Input Ratio Modifier Curve, Speed <x> (function of temperature) input fields for this object should reference performance curves that are a function of the wet-bulb temperature of air entering the condenser coil.

If the user wishes to model an air-cooled condenser that has evaporative media placed in front of it to cool the air entering the condenser coil, then the user should specify Condenser Type = Evap Cooled. The user must also enter the appropriate evaporative effectiveness for the media. In this case, the Total Cooling Capacity Modifier Curve, Speed <x> (function of temperature) and the Energy Input Ratio Modifier Curve, Speed <x> (function of temperature) input fields for this object should reference performance curves that are a function of outdoor dry-bulb temperature. Be aware that the evaporative media will significantly reduce the dry-bulb temperature of the air entering the condenser coil, so the Total Cooling Capacity and EIR Modifier Curves for Speed <x> must be valid for the expected range of dry-bulb temperatures that will be entering the condenser coil.";
		public static string Field_SpeedXEvaporativeCondenserEffectiveness => Value._Field_SpeedXEvaporativeCondenserEffectiveness;

		private string _Field_SpeedXEvaporativeCondenserAirFlowRate = @"The air volume flow rate, in m^{3} per second, entering the evaporative condenser at Speed <x>. This value is used to calculate the amount of water used to evaporatively cool the condenser inlet air. The minimum value for this field must be greater than zero, and this input field is autosizable (equivalent to 0.000114 m^{3}/s per watt of rated total cooling capacity for Speed <x> [850 cfm/ton]). This field is not used when Condenser Type = Air Cooled.";
		public static string Field_SpeedXEvaporativeCondenserAirFlowRate => Value._Field_SpeedXEvaporativeCondenserAirFlowRate;

		private string _Field_SpeedXRatedEvaporativeCondenserPumpPowerConsumption = @"The rated power of the evaporative condenser water pump in Watts at Speed <x>. This value is used to calculate the power required to pump the water used to evaporatively cool the condenser inlet air. The default value for this input field is zero, but it is autosizable (equivalent to 0.004266 W per watt [15 W/ton] of rated total capacity for Speed <x>). This field is not used when Condenser Type = Air Cooled.";
		public static string Field_SpeedXRatedEvaporativeCondenserPumpPowerConsumption => Value._Field_SpeedXRatedEvaporativeCondenserPumpPowerConsumption;

		private string _Field_ZoneNameForCondenserPlacement = @"This input field is name of a conditioned or unconditioned zone where the secondary coil (condenser) of DX system or a heat pump is to be placed. This is an optional input field specified only when user desires to reject the condenser heat into a zone. The heat rejected is modeled as sensible internal gain of a secondary zone.

Following is an example input for this multispeed DX cooling coil.



Coil:Cooling:DX:MultiSpeed,
  Heat Pump ACDXCoil 1,       !- Coil Name
  FanAndCoilAvailSched,       !- Availability Schedule
  DX Cooling Coil Air Inlet Node,   !- Coil Air Inlet Node
  Heating Coil Air Inlet Node,         !- Coil Air Outlet Node
  Outdoor Condenser Air Node,           !- Condenser Air Inlet Node Name
  AirCooled,                           !- Condenser Type
  ,                                               !- Name of Water Storage Tank for Supply
  ,                                               !- Name of Water Storage Tank for Condensate Collection
  No,                                           !- Apply Part Load Fraction to Speeds greater than 1
  No,                                           !- Apply latent degradation to Speeds greater than 1
  200.0,                                     !- Crankcase Heater Capacity {W}
  10.0,                                       !- Maximum Outdoor Dry-bulb Temperature for Crankcase Heater Operation
  ,                                               !- Basin Heater Capacity {W/K}
  ,                                               !- Basin Heater Setpoint Temperature {C}
  ,                                               !- Basin Heater Operating Schedule Name
  NaturalGas,                           !- Fuel Type
  4,                                             !- Number of speeds
  7500,                                       !- Gross Rated Total Cooling Capacity, Speed 1 {W}
  0.75,                                       !- Gross Rated Sensible Heat Ratio, Speed 1 {dimensionless}
  3.0,                                         !- Gross Rated Cooling COP, Speed 1 {dimensionless}
  0.40,                                       !- Rated Air Flow Rate, Speed 1 {m3/s}
  ,                                               !- Rated Evaporator Fan Power Per Volume Flow Rate, Speed 1 {W/(m3/s)}
  HPACCoolCapFT Speed 1,     !- Total Cooling Capacity Modifier Curve, Speed 1 (temperature)
  HPACCoolCapFF Speed 1,     !- Total Cooling Capacity Modifier Curve, Speed 1 (flow fraction)
  HPACCOOLEIRFT Speed 1,     !- Energy Input Ratio Modifier Curve, Speed 1 (temperature)
  HPACCOOLEIRFF Speed 1,     !- Energy Input Ratio Modifier Curve, Speed 1 (flow fraction)
  HPACCOOLPLFFPLR Speed 1, !- Part Load Fraction Correlation, Speed 1 (part load ratio)
  1000.0,                                   !- Nominal Time for Condensate Removal to Begin, Speed 1 {s}
  1.5,                                         !- Ratio of Initial Moisture Evaporation Rate and Steady-state Latent
  3.0,                                         !- Maximum ON/OFF Cycling Rate, Speed 1 {cycles/hr}
  45.0,                                       !- Latent Capacity Time Constant, Speed 1 {s}
  0.2,                                         !- Rated waste heat fraction of power input, Speed 1 {dimensionless}
  HAPCCoolWHFT Speed 1,       !- Waste heat modifier curve, Speed 1 (temperature)
  0.9,                                         !- Evaporative Condenser Effectiveness, Speed 1 {dimensionless}
  0.05,                                       !- Evaporative Condenser Air Volume Flow Rate, Speed 1 {m3/s}
  50,                                           !- Evaporative Condenser Pump Rated Power Consumption, Speed 1 {W}
  17500,                                     !- Gross Rated Total Cooling Capacity, Speed 2 {W}
  0.75,                                       !- Gross Rated Sensible Heat Ratio, Speed 2 {dimensionless}
  3.0,                                         !- Gross Rated Cooling COP, Speed 2 {dimensionless}
  0.85,                                       !- Rated Air Flow Rate, Speed 2 {m3/s}
  ,                                               !- Rated Evaporator Fan Power Per Volume Flow Rate, Speed 2 {W/(m3/s)}
  HPACCoolCapFT Speed 2,     !- Total Cooling Capacity Modifier Curve, Speed 2 (temperature)
  HPACCoolCapFF Speed 2,     !- Total Cooling Capacity Modifier Curve, Speed 2 (flow fraction)
  HPACCOOLEIRFT Speed 2,     !- Energy Input Ratio Modifier Curve, Speed 2 (temperature)
  HPACCOOLEIRFF Speed 2,     !- Energy Input Ratio Modifier Curve, Speed 2 (flow fraction)
  HPACCOOLPLFFPLR Speed 1, !- Part Load Fraction Correlation, Speed 2 (part load ratio)
  1000.0,                                   !- Nominal Time for Condensate Removal to Begin, Speed 2
  1.5,                                         !- Ratio of Initial Moisture Evaporation Rate and Steady-state Latent
  3.0,                                         !- Maximum ON/OFF Cycling Rate, Speed 2
  45.0,                                       !- Latent Capacity Time Constant, Speed 2
  0.2,                                         !- Rated waste heat fraction of power input, Speed 2 {dimensionless}
  HAPCCoolWHFT Speed 2,       !- Waste heat modifier curve, Speed 2 (temperature)
  0.9,                                         !- Evaporative Condenser Effectiveness, Speed 2 {dimensionless}
  0.1,                                         !- Evaporative Condenser Air Volume Flow Rate, Speed 2 {m3/s}
  60,                                           !- Evaporative Condenser Pump Rated Power Consumption, Speed 2 {W}
  25500,                                     !- Gross Rated Total Cooling Capacity, Speed 3 {W}
  0.75,                                       !- Gross Rated Sensible Heat Ratio, Speed 3 {dimensionless}
  3.0,                                         !- Gross Rated Cooling COP, Speed 3 {dimensionless}
  1.25,                                       !- Rated Air Flow Rate, Speed 3 {m3/s}
  ,                                               !- Rated Evaporator Fan Power Per Volume Flow Rate, Speed 3 {W/(m3/s)}
  HPACCoolCapFT Speed 3,     !- Total Cooling Capacity Modifier Curve, Speed 3 (temperature)
  HPACCoolCapFF Speed 3,     !- Total Cooling Capacity Modifier Curve, Speed 3 (flow fraction)
  HPACCOOLEIRFT Speed 3,     !- Energy Input Ratio Modifier Curve, Speed 3 (temperature)
  HPACCOOLEIRFF Speed 3,     !- Energy Input Ratio Modifier Curve, Speed 3 (flow fraction)
  HPACCOOLPLFFPLR Speed 1, !- Part Load Fraction Correlation, Speed 3 (part load ratio)
  1000.0,                                   !- Nominal Time for Condensate Removal to Begin, Speed 3 {s}
  1.5,                                         !- Ratio of Initial Moisture Evaporation Rate and Steady-state Latent
  3.0,                                         !- Maximum ON/OFF Cycling Rate, Speed 3 {cycles/hr}
  45.0,                                       !- Latent Capacity Time Constant, Speed 3 {s}
  0.2,                                         !- Rated waste heat fraction of power input, Speed 3 {dimensionless}
  HAPCCoolWHFT Speed 3,       !- Waste heat modifier curve, Speed 3 (temperature)
  0.9,                                         !- Evaporative Condenser Effectiveness, Speed 3 {dimensionless}
  0.2,                                         !- Evaporative Condenser Air Volume Flow Rate, Speed 3 {m3/s}
  80,                                           !- Evaporative Condenser Pump Rated Power Consumption, Speed 3 {W}
  35500,                                     !- Gross Rated Total Cooling Capacity, Speed 4 {W}
  0.75,                                       !- Gross Rated Sensible Heat Ratio, Speed 4 {dimensionless}
  3.0,                                         !- Gross Rated Cooling COP, Speed 4 {dimensionless}
  1.75,                                       !- Rated Air Flow Rate, Speed 4 {m3/s}
  ,                                               !- Rated Evaporator Fan Power Per Volume Flow Rate, Speed 4 {W/(m3/s)}
  HPACCoolCapFT Speed 4,     !- Total Cooling Capacity Modifier Curve, Speed 4 (temperature)
  HPACCoolCapFF Speed 4,     !- Total Cooling Capacity Modifier Curve, Speed 4 (flow fraction)
  HPACCOOLEIRFT Speed 4,     !- Energy Input Ratio Modifier Curve, Speed 4 (temperature)
  HPACCOOLEIRFF Speed 4,     !- Energy Input Ratio Modifier Curve, Speed 4 (flow fraction)
  HPACCOOLPLFFPLR Speed 1, !- Part Load Fraction Correlation, Speed 4 (part load ratio)
  1000.0,                                   !- Nominal Time for Condensate Removal to Begin, Speed 4 {s}
  1.5,                                         !- Ratio of Initial Moisture Evaporation Rate and Steady-state Latent                                                     !- Capacity, Speed 4 {dimensionless}
  3.0,                                         !- Maximum ON/OFF Cycling Rate, Speed 4 {cycles/hr}
  45.0,                                       !- Latent Capacity Time Constant, Speed 4 {s}
  0.2,                                         !- Rated waste heat fraction of power input, Speed 4 {dimensionless}
  HAPCCoolWHFT Speed 4,       !- Waste heat modifier curve, Speed 4 (temperature)
  0.9,                                         !- Evaporative Condenser Effectiveness, Speed 4 {dimensionless}
  0.3,                                         !- Evaporative Condenser Air Volume Flow Rate, Speed 4 {m3/s}
  100;                                         !- Evaporative Condenser Pump Rated Power Consumption, Speed 4 {W}";
		public static string Field_ZoneNameForCondenserPlacement => Value._Field_ZoneNameForCondenserPlacement;

	

}

	public sealed class CoilCoolingDXVariableSpeed
    { 

		private string _name = @"Coil:Cooling:DX:VariableSpeed";
		private string _note = @"The Variable-Speed DX Cooling Coil is a collection of performance curves that represent the cooling coil at various speed levels. The performance curves should be generated from a Reference Unit data. This is an equation-fit model that resembles a black box with no usage of heat transfer equations. On the other hand, the model uses the bypass factor approach to calculate sensible heat transfer rate, similar to the one used in the single-speed DX coil. The number of speed levels can range from 1 to 10. The cooling coil has two indoor air side connections, and one optional condenser air node connection. The user needs to specify a nominal speed level, at which the gross rated total cooling capacity, and rated volumetric air rate are sized. The rated capacity and rated volumetric flow rate represent the real situation in the air loop, and are used to determine and flow rates at various speed levels in the parent objects, e.g.~of AirLoopHVAC:UnitaryHeatCool, ZoneHVAC:PackagedTerminalAirConditioner, AirLoopHVAC:UnitaryHeatPump:AirToAir and ZoneHVAC:PackagedTerminalHeatPump. It shall be mentioned that the performance correction curves, i.e.~the temperature and flow fraction correction curves, should be normalized to the capacity and flow rate at each individual speed and at the rated conditions, similar to the performance curves used in the single-speed DX coil. However, the performance values, e.g.~capacities, COPs, SHRs and flow rates at individual speed levels, should be given regarding a specific unit from the Reference Unit catalog data. In the following content, the statement started with Reference Unit means the actual Reference Unit catalog data. The rated conditions for obtaining the capacities, COPs and SHRs are at indoor dry-bulb temperature of 26.67 ??C (80 ??F), wet bulb temperature of 19.44 ??C (67 ??F), and the condenser entering air temperature of 35 ??C (95 ??F). Some equations are provided below to help explain the function of the various performance curves and data fields.
";
		

		private static readonly System.Lazy<CoilCoolingDXVariableSpeed> instance = new System.Lazy<CoilCoolingDXVariableSpeed>(() => new CoilCoolingDXVariableSpeed());
        private static CoilCoolingDXVariableSpeed Value => instance.Value;
		public static string Name => Value._name;
        public static string Note => Value._note;
		private CoilCoolingDXVariableSpeed(){}

	private string _Field_Name = @"This alpha field contains the identifying name for the variable-speed cooling coil.";
		public static string Field_Name => Value._Field_Name;

		private string _Field_AirInletNodeName = @"This alpha field contains the cooling coil load side inlet node name.";
		public static string Field_AirInletNodeName => Value._Field_AirInletNodeName;

		private string _Field_AirOutletNodeName = @"This alpha field contains the cooling coil load side outlet node name.";
		public static string Field_AirOutletNodeName => Value._Field_AirOutletNodeName;

		private string _Field_NumberOfSpeeds = @"This numeric field contains the maximum number of speed levels that the module uses. The number of speeds, for which the user input the performance data and curves, should be equal or higher than the maximum number. The performance inputs at higher speed levels are ignored.";
		public static string Field_NumberOfSpeeds => Value._Field_NumberOfSpeeds;

		private string _Field_NominalSpeedLevel = @"This numeric field defines the nominal speed level, at which the rated capacity and rated air rate are correlated.";
		public static string Field_NominalSpeedLevel => Value._Field_NominalSpeedLevel;

		private string _Field_GrossRatedTotalCoolingCapacityAtSelectedNominalSpeedLevel = @"This numeric field contains the gross rated total cooling capacity at the nominal speed level. This field is autosizable. The gross rated total cooling capacity is used to determine a capacity scaling factor, as compared to the Reference Unit capacity at the nominal speed level.

\begin{equation}
{\rm{CapacityScaleFactor}} = \frac{{{\rm{Gross RatedTotalCoolingCapacity}}}}{{{\rm{ReferenceUnitCapacity}}@{\rm{NominalSpeedLevel}}}}
\end{equation}

And then, this scaling factor is used to determine capacities at rated conditions for other speed levels, as below,

\begin{equation}
  \begin{array}{l}
    \rm{Gross RatedCapacity} @ \rm{SpeedLevel} \left( {\rm{x}} \right) = \\
    \quad \quad \quad \rm{CapacityScaleFactor} \times \\
    \quad \quad \quad \rm{ReferenceUnitCapacity} @ {\rm{SpeedLevel}}(\rm{x})
  \end{array}
\end{equation}";
		public static string Field_GrossRatedTotalCoolingCapacityAtSelectedNominalSpeedLevel => Value._Field_GrossRatedTotalCoolingCapacityAtSelectedNominalSpeedLevel;

		private string _Field_RatedAirFlowRateAtSelectedNominalSpeedLevel = @"This numeric field contains the rated volumetric air flow rate on the load side of the DX unit, corresponding to the nominal speed level. This field is autosizable. The value is used to determine an internal scaling factor, and calculate the air flow rates in the parent objects. It is recommended that the ratio of the rated volumetric air flow rate to the rated capacity is the same as the unit performance from the Reference Unit data.

\begin{equation}
\rm{AirFlowScaleFactor} = \frac{\rm{RatedVolumetricAirFlowRate}}{\rm{ReferenceUnitVolAirFlowRate} @ \rm{NominalSpeedLevel} \times \rm{CapacityScaleFactor}}
\end{equation}

And the volumetric air flow rates in the parent objects are calculated as below,

\begin{equation}
  \begin{array}{l}
    \rm{LoopVolumetricAirFlowRate} @ \rm{SpeedLevel} \left( \rm{x} \right) = \\
    \quad \quad \quad \rm{AirFlowScaleFactor} \times \\
    \quad \quad \quad \rm{ReferenceUnitVolAirFlowRate} @ \rm{SpeedLevel}(\rm{x}) \times \\
    \quad \quad \quad \rm{CapacityScaleFactor}
  \end{array}
\end{equation}";
		public static string Field_RatedAirFlowRateAtSelectedNominalSpeedLevel => Value._Field_RatedAirFlowRateAtSelectedNominalSpeedLevel;

		private string _Field_NominalTimeForCondensateRemovalToBegin = @"This numeric field defines the nominal time (in seconds) after startup for condensate to begin leaving the coil's condensate drain line at the coil's rated airflow and temperature conditions, starting with a dry coil. Nominal time is equal to the ratio of the energy of the coil's maximum condensate holding capacity (J) to the coil's steady-state latent capacity (W). Suggested value is 1000; zero value means the latent degradation model is disabled. The default value for this field is zero.";
		public static string Field_NominalTimeForCondensateRemovalToBegin => Value._Field_NominalTimeForCondensateRemovalToBegin;

		private string _Field_RatioOfInitialMoistureEvaporationRateAndSteadyStateLatentCapacity = @"This numeric field defines ratio of the initial moisture evaporation rate from the cooling coil (when the compressor first turns off, in Watts) and the coil's steady-state latent capacity (Watts) at rated airflow and temperature conditions. Suggested value is 1.5; zero value means the latent degradation model is disabled. The default value for this field is zero.";
		public static string Field_RatioOfInitialMoistureEvaporationRateAndSteadyStateLatentCapacity => Value._Field_RatioOfInitialMoistureEvaporationRateAndSteadyStateLatentCapacity;

		private string _Field_PartLoadFractionCorrelationCurveName = @"This alpha field defines the name of a quadratic or cubic performance curve (Ref: Performance Curves) that parameterizes the variation of electrical power input to the unit as a function of the part load ratio (PLR, sensible or latent load/steady-state sensible or latent cooling capacity for Speed 1), in the case that the unit operates under the lowest speed, i.e.~on/off. The product of the rated EIR and EIR modifier curves is divided by the output of this curve to give the effective EIR for a given simulation timestep for Speed 1. The part load fraction (PLF) correlation accounts for efficiency losses due to compressor cycling. The part load fraction correlation should be normalized to a value of 1.0 when the part load ratio equals 1.0 (i.e., no efficiency losses when the compressor(s) run continuously for the simulation timestep).";
		public static string Field_PartLoadFractionCorrelationCurveName => Value._Field_PartLoadFractionCorrelationCurveName;

		private string _Field_CondenserAirInletNodeName = @"This optional alpha field specifies the outdoor air node name used to define the conditions of the air entering the outdoor condenser. If this field is left blank, the outdoor air temperature entering the condenser (dry-bulb or wet-bulb) is taken directly from the weather data. If this field is not blank, the node name specified must also be specified in an OutdoorAir:Node object where the height of the node is taken into consideration when calculating outdoor air temperature from the weather data. Alternately, the node name may be specified in an OutdoorAir:NodeList object where the outdoor air temperature is taken directly from the weather data.";
		public static string Field_CondenserAirInletNodeName => Value._Field_CondenserAirInletNodeName;

		private string _Field_CondenserType = @"The type of condenser used by the DX cooling coil. Valid choices for this input field are AirCooled or EvaporativelyCooled. The default for this field is AirCooled.";
		public static string Field_CondenserType => Value._Field_CondenserType;

		private string _Field_EvaporativeCondenserPumpRatedPowerConsumption = @"The rated power of the evaporative condenser water pump in Watts. This value is used to calculate the power required to pump the water used to evaporatively cool the condenser inlet air. The default value for this input field is zero, but it is autosizable (equivalent to 0.004266 W per watt [15 W/ton] of rated total cooling capacity). This field is not used when Condenser Type = Air Cooled.";
		public static string Field_EvaporativeCondenserPumpRatedPowerConsumption => Value._Field_EvaporativeCondenserPumpRatedPowerConsumption;

		private string _Field_CrankcaseHeaterCapacity = @"This numeric field defines the crankcase heater capacity in Watts. When the outdoor air drybulb temperature is below the value specified in the input field Maximum Outdoor Dry-bulb Temperature for Crankcase Heater Operation (described below), the crankcase heater is enabled during the time that the compressor is not running. If this cooling coil is used as part of an air-to-air heat pump, the crankcase heater defined for this DX cooling coil is ignored and the crankcase heater power defined for the DX heating coil (Ref. Coil:Heating:DX:SingleSpeed) is enabled during the time that the compressor is not running for either heating or cooling. The value for this input field must be greater than or equal to 0, and the default value is 0. To simulate a DX cooling coil without a crankcase heater, enter a value of 0.";
		public static string Field_CrankcaseHeaterCapacity => Value._Field_CrankcaseHeaterCapacity;

		private string _Field_MaximumOutdoorDryBulbTemperatureForCrankcaseHeaterOperation = @"This numeric field defines the outdoor air dry-bulb temperature above which the compressor s crankcase heater is disabled. The value for this input field must be greater than or equal to 0.0 ??C, and the default value is 10 ??C.";
		public static string Field_MaximumOutdoorDryBulbTemperatureForCrankcaseHeaterOperation => Value._Field_MaximumOutdoorDryBulbTemperatureForCrankcaseHeaterOperation;

		private string _Field_MinimumOutdoorDryBulbTemperatureForCompressorOperation = @"This numeric field defines the minimum outdoor air dry-bulb temperature where the cooling coil compressor turns off. If this input field is left blank, the value defaults to that specified in the IDD (e.g., -25 ??C).";
		public static string Field_MinimumOutdoorDryBulbTemperatureForCompressorOperation => Value._Field_MinimumOutdoorDryBulbTemperatureForCompressorOperation;

		private string _Field_SupplyWaterStorageTankName = @"This field is optional. It is used to describe where the coil obtains water used for evaporative cooling of its condenser. If blank or omitted, then the unit will obtain water directly from the mains. If the name of a Water Storage Tank object is used here, the unit will obtain its water from that tank. If a tank is specified, the unit will attempt to obtain all the water it uses from the tank. However if the tank cannot provide all the water the condenser needs, then the unit will still operate and obtain the rest of the water it needs from the mains (referred to as StarvedWater).";
		public static string Field_SupplyWaterStorageTankName => Value._Field_SupplyWaterStorageTankName;

		private string _Field_CondensateCollectionWaterStorageTankName = @"This field is optional. It is used to describe where condensate from the coil is collected. If blank or omitted, then any coil condensate is discarded. Enter the name of Water Storage Tank object defined elsewhere and the condensate will then be collected in that tank.";
		public static string Field_CondensateCollectionWaterStorageTankName => Value._Field_CondensateCollectionWaterStorageTankName;

		private string _Field_BasinHeaterCapacity = @"This numeric field contains the capacity of the DX coil s electric evaporative cooler basin

heater in watts per degree Kelvin. This field only applies for Condenser Type = EvaporativelyCooled. This field is used in conjunction with the Basin Heater Setpoint temperature described in the following field. The basin heater electric power is equal to this field multiplied by the difference between the basin heater set point temperature and the outdoor dry-bulb temperature. The basin heater only operates when the DX coil is off, regardless of the basin heater schedule described below. The basin heater capacity must be greater than or equal to zero, with a default value of zero if this field is left blank.";
		public static string Field_BasinHeaterCapacity => Value._Field_BasinHeaterCapacity;

		private string _Field_BasinHeaterSetpointTemperature = @"This numeric field contains the set point temperature (??C) for the basin heater described in the previous field. This field only applies for Condenser Type = EvaporativelyCooled. The basin heater is active when the outdoor air dry-bulb temperature falls below this setpoint temperature, as long as the DX coil is off. This set point temperature must be greater than or equal to 2??C, and the default value is 2??C if this field is left blank.";
		public static string Field_BasinHeaterSetpointTemperature => Value._Field_BasinHeaterSetpointTemperature;

		private string _Field_BasinHeaterOperatingScheduleName = @"This alpha field contains the name of the basin heater operating schedule. This field only applies for Condenser Type = EvaporativelyCooled. The basin heater operating schedule is assumed to be an on/off schedule and the heater is available to operate any time the schedule value is greater than 0. The basin heater operates when scheduled on and the outdoor air dry-bulb temperature is below the set point temperature described in the previous field. If this field is left blank, the basin heater is available to operate throughout the simulation. Regardless of this schedule, the basin heater may only operate when the DX coil is off.";
		public static string Field_BasinHeaterOperatingScheduleName => Value._Field_BasinHeaterOperatingScheduleName;

		private string _Field_GroupRatedSpecificationPerformanceCurves = @"The performance for each cooling speed must be specified as shown below. They should be directly given from the Reference Unit catalog data. All inputs for Speed 1 are required, followed by the optional inputs for other speeds.";
		public static string Field_GroupRatedSpecificationPerformanceCurves => Value._Field_GroupRatedSpecificationPerformanceCurves;

		private string _Field_SpeedXReferenceUnitGrossRatedTotalCoolingCapacity = @"This numeric field defines the total, full load gross cooling capacity in watts of the air-to-air cooling coil unit at rated conditions for Speed <x> operation. The value entered here must be greater than 0. Capacity should not account for supply air fan heat.";
		public static string Field_SpeedXReferenceUnitGrossRatedTotalCoolingCapacity => Value._Field_SpeedXReferenceUnitGrossRatedTotalCoolingCapacity;

		private string _Field_SpeedXReferenceUnitGrossRatedSensibleHeatRatio = @"This numeric field defines sensible heat transfer ratio (SHR = gross sensible cooling capacity divided by gross total cooling capacity) of the cooling coil unit at rated conditions for Speed <x> operation. The value entered here must be greater than 0.0 and less than 1.0. This value should be obtained from the Reference Unit data.";
		public static string Field_SpeedXReferenceUnitGrossRatedSensibleHeatRatio => Value._Field_SpeedXReferenceUnitGrossRatedSensibleHeatRatio;

		private string _Field_SpeedXReferenceUnitGrossRatedCoolingCOP = @"This numeric field defines the coefficient of performance (COP = the gross total cooling capacity in watts divided by electrical power input in watts) of the cooling coil unit at rated conditions for Speed <x> operation. The value entered here must be greater than 0. The input power includes power for the compressor(s), condenser fan and accessories, but does not include the supply air fan. The gross COP should Not account for the supply air fan.";
		public static string Field_SpeedXReferenceUnitGrossRatedCoolingCOP => Value._Field_SpeedXReferenceUnitGrossRatedCoolingCOP;

		private string _Field_SpeedXReferenceUnitRatedAirFlowRate = @"This numeric field defines the volumetric air flow rate, in m^{3} per second, across the cooling coil at rated conditions for Speed <x> operation. The value entered here should be directly from the Reference Unit data, corresponding to the given cooling capacity and COP at the speed, as above.";
		public static string Field_SpeedXReferenceUnitRatedAirFlowRate => Value._Field_SpeedXReferenceUnitRatedAirFlowRate;

		private string _Field_SpeedXReferenceUnitRatedCondenserAirFlowRate = @"This numeric field defines the condenser volumetric air flow rate, in m^{3} per second, across the condenser coil at rated conditions for Speed <x> operation. The value entered here should be directly from the Reference Unit data. This field is used to calculate water evaporation rate for an evaporatively-cooled condenser. For an air-cooled condenser, this input is not used.";
		public static string Field_SpeedXReferenceUnitRatedCondenserAirFlowRate => Value._Field_SpeedXReferenceUnitRatedCondenserAirFlowRate;

		private string _Field_SpeedXReferenceUnitRatedPadEffectivenessOfEvapPrecooling = @"This numeric field defines the effectiveness of condenser evaporative precooling pad at rated condition. The values of effectiveness are given at individual speed levels, since varied condenser air flow rates impact the effectiveness.";
		public static string Field_SpeedXReferenceUnitRatedPadEffectivenessOfEvapPrecooling => Value._Field_SpeedXReferenceUnitRatedPadEffectivenessOfEvapPrecooling;

		private string _Field_SpeedXTotalCoolingCapacityFunctionOfTemperatureCurveName = @"This alpha field defines the name of a bi-quadratic performance curve for Speed <x> (ref: Performance Curves) that parameterizes the variation of the gross total cooling capacity as a function of the both the indoor wet-bulb and source side entering air temperature, from the Reference Unit. The output of this curve is multiplied by the gross rated total cooling capacity at the speed to give the gross total cooling capacity at specific temperature operating conditions (i.e., at an indoor air wet-bulb temperature or outdoor entering air temperature different from the rating point temperature). It should be noted that the curve is normalized to the cooling capacity at Speed<x> from the Reference Unit data, and have the value of 1.0 at the rating point.";
		public static string Field_SpeedXTotalCoolingCapacityFunctionOfTemperatureCurveName => Value._Field_SpeedXTotalCoolingCapacityFunctionOfTemperatureCurveName;

		private string _Field_SpeedXTotalCoolingCapacityFunctionOfAirFlowFractionCurveName = @"This alpha field defines the name of a quadratic or cubic performance curve for Speed <x> (ref: Performance Curves) that parameterizes the variation of the gross total cooling capacity as a function of the ratio of actual air flow rate across the cooling coil to the design air flow rate (i.e., fraction of full load flow at Speed <x>, from the Reference Unit data). The curve is normalized to have the value of 1.0 when the actual air flow rate equals the design air flow rate, at Speed <x>.";
		public static string Field_SpeedXTotalCoolingCapacityFunctionOfAirFlowFractionCurveName => Value._Field_SpeedXTotalCoolingCapacityFunctionOfAirFlowFractionCurveName;

		private string _Field_SpeedXEnergyInputRatioFunctionOfTemperatureCurveName = @"This alpha field defines the name of a bi-quadratic performance curve for Speed <x> (ref: Performance Curves) that parameterizes the variation of the energy input ratio (EIR) as a function of the both the indoor air wet-bulb and condenser entering air temperatures The EIR is the inverse of the COP. The output of this curve is multiplied by the rated EIR (inverse of rated COP at Speed <x> from the Reference Unit data) to give the EIR at specific temperature operating conditions (i.e., at an indoor air wet-bulb temperature or condenser entering air temperature different from the rating point temperature). The curve is normalized to have the value of 1.0 at the rating point.";
		public static string Field_SpeedXEnergyInputRatioFunctionOfTemperatureCurveName => Value._Field_SpeedXEnergyInputRatioFunctionOfTemperatureCurveName;

		private string _Field_SpeedXEnergyInputRatioFunctionOfAirFlowFractionCurveName = @"This alpha field defines the name of a quadratic or cubic performance curve for Speed <x> (ref: Performance Curves) that parameterizes the variation of the energy input ratio (EIR) as a function of the ratio of actual air flow rate across the cooling coil to the design air flow rate (i.e., fraction of full load flow, at Speed <x> from the Reference Unit data). The EIR is the inverse of the COP. This curve is normalized to a value of 1.0 when the actual air flow rate equals the design air flow rate.

An example of this statement in an IDF is:



Coil:Cooling:DX:VariableSpeed,
  Heat Pump ACDXCoil 1,                       !- Name
  DX Cooling Coil Air Inlet Node,   !- Air Inlet Node Name
  Heating Coil Air Inlet Node,         !- Air Outlet Node Name
  10.0,                                     !- Number of Speeds {dimensionless}
  10.0,                                     !- Nominal Speed Level {dimensionless}
  32000,                                   !- Gross Rated Total Cooling Capacity {W}
  1.7,                                       !- Rated Air Flow Rate {m3/s}
  0.0,                                       !- Nominal Time for Condensate to Begin Leaving the Coil {s}
  0.0,   !- Initial Moisture Evaporation Rate Divided by Steady-State AC Latent Capacity {dimensionless}
  HPACCOOLPLFFPLR,                     !- Part Load Fraction Correlation Curve Name
  ,                                      ! - Condenser Air Inlet Node Name
  AirCooled,                                ! - Condenser Type
  ,                                      ! - Evaporative Condenser Pump Rated Power Consumption
  200.0,                                      ! - Crankcase Heater Capacity, {w}
  10.0,                                     !- Maximum Outdoor Dry-Bulb Temperature for Crankcase Heater Operation {C}
  ,                               ! - Supply Water Storage Tank Name
  ,                                ! - Condensate Collection Water Storage Tank Name
  ,                                             ! - Basin Heater Capacity
  ,                               ! - Basin Heater Setpoint Temperature
  ,                                             ! - Basin Heater Operating Schedule Name
  1524.1,                                 !- Speed 1 Gross Rated Total Cooling Capacity {w}
  0.75,                                     !- Speed 1 Gross Rated Sensible Heat Ratio {dimensionless}
  4.0,                                       !- Speed 1 Gross Rated Cooling COP {dimensionless}
  0.1359072,                           !- Speed 1 Rated Air Flow Rate {m3/s}
  0.26,                                     ! - Speed 1 Rated Condenser Air Flow Rate {m3/s}, for evaporatively cooled
  ,                                             ! - Evaporative precooling effectiveness
  HPACCoolCapFT,                   !- Total Cooling Capacity Function of Temperature Curve Name
  HPACCoolCapFFF,                 !- Total Cooling Capacity Function of Flow Fraction Curve Name
  HPACCOOLEIRFT,                   !- Energy Input Ratio Function of Temperature Curve Name
  HPACCOOLEIRFFF,                 !- Energy Input Ratio Function of Flow Fraction Curve Name
  1877.9,                                 !- Speed 2 Gross Rated Total Cooling Capacity {w}
  0.75,                                     !- Speed 2 Gross Rated Sensible Heat Ratio {dimensionless}
  4.0,                                       !- Speed 2 Gross Rated Cooling COP {dimensionless}
  0.151008,                             !- Speed 2 Rated Air Flow Rate {m3/s}
  0.30,                                     ! - Speed 2 Rated Condenser Air Flow Rate {m3/s}, for evaporatively cooled
  ,                                             ! - Evaporative precooling effectiveness
  HPACCoolCapFT,                   !- Total Cooling Capacity Function of Temperature Curve Name
  HPACCoolCapFFF,                 !- Total Cooling Capacity Function of Flow Fraction Curve Name
  HPACCOOLEIRFT,                   !- Energy Input Ratio Function of Temperature Curve Name
  HPACCOOLEIRFFF,                 !- Energy Input Ratio Function of Flow Fraction Curve Name
  2226.6,                                 !- Speed 3 Gross Rated Total Cooling Capacity {w}
  0.75,                                     !- Speed 3 Gross Rated Sensible Heat Ratio {dimensionless}
  4.0,                                       !- Speed 3 Gross Rated Cooling COP {dimensionless}
  0.1661088,                           !- Speed 3 Rated Air Flow Rate {m3/s}
  0.33,                                     !- Speed 3 Rated Condenser Air Flow Rate {m3/s}, for evaporatively cooled
  ,                                             !- Evaporative precooling effectiveness
  HPACCoolCapFT,                   !- Total Cooling Capacity Function of Temperature Curve Name
  HPACCoolCapFFF,                 !- Total Cooling Capacity Function of Flow Fraction Curve Name
  HPACCOOLEIRFT,                   !- Energy Input Ratio Function of Temperature Curve Name
  HPACCOOLEIRFFF,                 !- Energy Input Ratio Function of Flow Fraction Curve Name
  2911.3,                                 !- Speed 4 Gross Rated Total Cooling Capacity {w}
  0.75,                                     !- Speed 4 Gross Rated Sensible Heat Ratio {dimensionless}
  4.0,                                       !- Speed 4 Gross Rated Cooling COP {dimensionless}
  0.1963104,                           !- Speed 4 Rated Air Flow Rate {m3/s}
  0.38,                                     !- Speed 4 Rated Condenser Air Flow Rate {m3/s}, for evaporatively cooled
  ,                                             !- Evaporative precooling effectiveness
  HPACCoolCapFT,                   !- Total Cooling Capacity Function of Temperature Curve Name
  HPACCoolCapFFF,                 !- Total Cooling Capacity Function of Flow Fraction Curve Name
  HPACCOOLEIRFT,                   !- Energy Input Ratio Function of Temperature Curve Name
  HPACCOOLEIRFFF,                 !- Energy Input Ratio Function of Flow Fraction Curve Name
  3581.7,                                 !- Speed 5 Gross Rated Total Cooling Capacity {w}
  0.75,                                     !- Speed 5 Gross Rated Sensible Heat Ratio {dimensionless}
  4.0,                                       !- Speed 5 Gross Rated Cooling COP {dimensionless}
  0.226512,                             !- Speed 5 Rated Air Flow Rate {m3/s}
  0.44,                                     !- Speed 5 Rated Condenser Air Flow Rate {m3/s}, for evaporatively cooled
  ,                                             !- Evaporative precooling effectiveness
  HPACCoolCapFT,                   !- Total Cooling Capacity Function of Temperature Curve Name
  HPACCoolCapFFF,                 !- Total Cooling Capacity Function of Flow Fraction Curve Name
  HPACCOOLEIRFT,                   !- Energy Input Ratio Function of Temperature Curve Name
  HPACCOOLEIRFFF,                 !- Energy Input Ratio Function of Flow Fraction Curve Name
  4239.5,                                 !- Speed 6 Gross Rated Total Cooling Capacity {w}
  0.75,                                     !- Speed 6 Gross Rated Sensible Heat Ratio {dimensionless}
  4.0,                                       !- Speed 6 Gross Rated Cooling COP {dimensionless}
  0.2567136,                           !- Speed 6 Rated Air Flow Rate {m3/s}
  0.50,                                     ! - Speed 6 Rated Condenser Air Flow Rate {m3/s}, for evaporatively cooled
  ,                                             ! - Evaporative precooling effectiveness
  HPACCoolCapFT,                   !- Total Cooling Capacity Function of Temperature Curve Name
  HPACCoolCapFFF,                 !- Total Cooling Capacity Function of Flow Fraction Curve Name
  HPACCOOLEIRFT,                   !- Energy Input Ratio Function of Temperature Curve Name
  HPACCOOLEIRFFF,                 !- Energy Input Ratio Function of Flow Fraction Curve Name
  4885.7,                                 !- Speed 7 Gross Rated Total Cooling Capacity {w}
  0.75,                                     !- Speed 7 Gross Rated Sensible Heat Ratio {dimensionless}
  4.0,                                       !- Speed 7 Gross Rated Cooling COP {dimensionless}
  0.2869152,                           !- Speed 7 Rated Air Flow Rate {m3/s}
  0.57,                                     ! - Speed 7 Rated Condenser Air Flow Rate {m3/s}, for evaporatively cooled
  ,                                             ! - Evaporative precooling effectiveness
  HPACCoolCapFT,                   !- Total Cooling Capacity Function of Temperature Curve Name
  HPACCoolCapFFF,                 !- Total Cooling Capacity Function of Flow Fraction Curve Name
  HPACCOOLEIRFT,                   !- Energy Input Ratio Function of Temperature Curve Name
  HPACCOOLEIRFFF,                 !- Energy Input Ratio Function of Flow Fraction Curve Name
  5520.7,                                 !- Speed 8 Gross Rated Total Cooling Capacity {w}
  0.75,                                     !- Speed 8 Gross Rated Sensible Heat Ratio {dimensionless}
  4.0,                                       !- Speed 8 Gross Rated Cooling COP {dimensionless}
  0.3171168,                           !- Speed 8 Rated Air Flow Rate {m3/s}
  0.63,                                     ! - Speed 8 Rated Condenser Air Flow Rate {m3/s}, for evaporatively cooled
  ,                                             ! - Evaporative precooling effectiveness
  HPACCoolCapFT,                   !- Total Cooling Capacity Function of Temperature Curve Name
  HPACCoolCapFFF,                 !- Total Cooling Capacity Function of Flow Fraction Curve Name
  HPACCOOLEIRFT,                   !- Energy Input Ratio Function of Temperature Curve Name
  HPACCOOLEIRFFF,                 !- Energy Input Ratio Function of Flow Fraction Curve Name
  6144.8,                                 !- Speed 9 Gross Rated Total Cooling Capacity {w}
  0.75,                                     !- Speed 9 Gross Rated Sensible Heat Ratio {dimensionless}
  4.0,                                       !- Speed 9 Rated Cooling COP {dimensionless}
  0.3473184,                           !- Speed 9 Rated Air Flow Rate {m3/s}
  0.69,                                     ! - Speed 9 Rated Condenser Air Flow Rate {m3/s}, for evaporatively cooled
  ,                                             ! - Evaporative precooling effectiveness
  HPACCoolCapFT,                   !- Total Cooling Capacity Function of Temperature Curve Name
  HPACCoolCapFFF,                 !- Total Cooling Capacity Function of Flow Fraction Curve Name
  HPACCOOLEIRFT,                   !- Energy Input Ratio Function of Temperature Curve Name
  HPACCOOLEIRFFF,                 !- Energy Input Ratio Function of Flow Fraction Curve Name
  6758.0,                                 !- Speed 10 Gross Rated Total Cooling Capacity {w}
  0.75,                                     !- Speed 10 Gross Rated Sensible Heat Ratio {dimensionless}
  4.0,                                       !- Speed 10 Gross Rated Cooling COP {dimensionless}
  0.37752,                               !- Speed 10 Rated Air Flow Rate {m3/s}
  0.74,                                     ! - Speed 10 Rated Condenser Air Flow Rate {m3/s}, for evaporatively cooled
  ,                                             ! - Evaporative precooling effectiveness
  HPACCoolCapFT,                   !- Total Cooling Capacity Function of Temperature Curve Name
  HPACCoolCapFFF,                 !- Total Cooling Capacity Function of Flow Fraction Curve Name
  HPACCOOLEIRFT,                   !- Energy Input Ratio Function of Temperature Curve Name
  HPACCOOLEIRFFF;                 !- Energy Input Ratio Function of Flow Fraction Curve Name";
		public static string Field_SpeedXEnergyInputRatioFunctionOfAirFlowFractionCurveName => Value._Field_SpeedXEnergyInputRatioFunctionOfAirFlowFractionCurveName;

	

}

	public sealed class CoilPerformanceDXCooling
    { 

		private string _name = @"CoilPerformance:DX:Cooling";
		private string _note = @"This coil performance object is used to specify DX coil performance for one mode of operation for a Coil:Cooling:DX:TwoStageWithHumidityControlMode. A single Coil:Cooling:DX:TwoStageWithHumidityControlMode object will reference one to four CoilPerformance:DX:Cooling objects depending on the number of available stages and dehumidification modes as specified in the two stage DX object. For example, a standard 2-stage DX system will use two of these performance objects, one to defined the capacity and performance for stage 1 operation, and a second one for stage 1+2 (both stages active) operation. In nearly all cases, the Rated Air Volume Flow Rate will be the same for all performance objects associated with a given multimode DX coil. If bypass is specified, the Rated Air Volume Flow Rate includes both the bypassed flow and the flow through the active coil.

This DX coil model is identical to Coil:Cooling:DX:SingleSpeed with addition of bypass and multi-stage capabilities. This DX cooling coil model and input are quite different from that for the heating and cooling water coils. The simple water coils use an NTU-effectiveness heat exchanger model. The single speed DX coil model uses performance information at rated conditions along with curve fits for variations in total capacity, energy input ratio and part-load fraction to determine performance at part-load conditions. Sensible/latent capacity splits are determined by the rated sensible heat ratio (SHR) and the apparatus dewpoint/bypass factor (ADP/BF) approach. This approach is analogous to the NTU-effectiveness calculations used for sensible-only heat exchanger calculations, extended to a cooling and dehumidifying coil.

An alternative to ADP/BF method for sensible/latent capacity split is to use SHR modifier curves for temperature and flow fraction. These two optional input fields are used only when a user specified SHR calculation method desired over the (ADP/BF) method. Sensible heat ratio calculated using these two SHR modifier curves override the value calculated by ADP/BF method. See section SHR Calculation Using User Specified SHR Modifier Curves in the EnergyPlus Engineering Document for further details.

The DX cooling coil input requires the gross rated total cooling capacity, the gross rated SHR, the gross rated COP, the rated air volume flow rate, and the fraction of air flow which is bypassed around the coil. The first 4 inputs determine the coil performance at the rating point (air entering the cooling coil at 26.7 ??C drybulb/19.4 ??C wetbulb and air entering the outdoor condenser coil at 35 ??C drybulb/23.9 ??C wetbulb). The rated air volume flow rate (less any bypassed fraction) should be between .00004027 m^{3}/s and .00006041 m^{3}/s per watt of gross rated total cooling capacity (300 to 450 cfm/ton). The rated volumetric air flow to gross total cooling capacity ratio for 100% dedicated outdoor air (DOAS) application DX cooling coils should be between 0.00001677 (m3/s)/W (125 cfm/ton) and 0.00003355 (m3/s)/W (250 cfm/ton).

This model requires 5 curves as follows:


\def\labelenumi{\arabic{enumi}.}

  The total cooling capacity modifier curve (function of temperature) is a biquadratic curve with two independent variables: wet-bulb temperature of the air entering the cooling coil, and dry-bulb temperature of the air entering the air-cooled condenser coil (wet-bulb temperature if modeling an evaporative-cooled condenser). The curve is normalized to 1 at 19.44 C indoor wet-bulb temperature and 35 C outdoor dry-bulb temperature. The output of this curve is multiplied by the gross rated total cooling capacity to give the gross total cooling capacity at specific temperature operating conditions (i.e., at temperatures different from the rating point temperatures).

  The total cooling capacity modifier curve (function of flow fraction) is a quadratic or cubic curve with the independent variable being the ratio of the actual air flow rate across the cooling coil to the rated air flow rate (i.e., fraction of full load flow). The curve is normalized to have the value of 1.0 when the actual air flow rate equals the rated air flow rate. The output of this curve is multiplied by the gross rated total cooling capacity and the total cooling capacity modifier curve (function of temperature) to give the gross total cooling capacity at the specific temperature and air flow conditions at which the coil is operating.

  The energy input ratio (EIR) modifier curve (function of temperature) is a biquadratic curve with two independent variables: wet-bulb temperature of the air entering the cooling coil, and dry-bulb temperature of the air entering the air-cooled condenser coil (wet-bulb temperature if modeling an evaporative-cooled condenser). The curve is normalized to 1 at 19.44 C indoor wet-bulb temperature and 35 C outdoor dry-bulb temperature. The output of this curve is multiplied by the rated EIR (inverse of the rated COP) to give the EIR at specific temperature operating conditions (i.e., at temperatures different from the rating point temperatures).

  The energy input ratio (EIR) modifier curve (function of flow fraction) is a quadratic or cubic curve with the independent variable being the ratio of the actual air flow rate across the cooling coil to the rated air flow rate (i.e., fraction of full load flow). The curve is normalized to have the value of 1.0 when the actual air flow rate equals the rated air flow rate. The output of this curve is multiplied by the rated EIR (inverse of the rated COP) and the EIR modifier curve (function of temperature) to give the EIR at the specific temperature and air flow conditions at which the coil is operating.

  The part load fraction correlation (function of part load ratio) is a quadratic or cubic curve with the independent variable being part load ratio (sensible cooling load / steady-state sensible cooling capacity). The output of this curve is used in combination with the rated EIR and EIR modifier curves to give the effective EIR for a given simulation timestep. The part load fraction (PLF) correlation accounts for efficiency losses due to compressor cycling. The curve should be normalized to a value of 1.0 when the part-load ratio equals 1.0 (i.e., the compressor(s) run continuously for the simulation timestep).


The curves are simply specified by name. Curve inputs are described in the curve manager section of this document (see Performance Curves in this document).

The next four input fields are optional and relate to the degradation of latent cooling capacity when the supply air fan operates continuously while the cooling coil/compressor cycle on and off to meet the cooling load. The fan operating mode is either considered to be constant (e.g.~CoilSystem:Cooling:DX) or can be scheduled in the parent object (e.g.~AirLoopHVAC:UnitaryHeatCool). When scheduled, the schedule value must be greater than 0 to calculate degradation of latent cooling capacity. At times when the parent object s supply air fan operating mode schedule is 0, latent degradation will be ignored. When used, these next four input fields must all have positive values in order to model latent capacity degradation.

The next input specifies the outdoor air node used to define the conditions of the air entering the outdoor condenser. If this field is not blank, the node name specified must be listed in an OutdoorAir:Node object where the height of the node is taken into consideration when calculating outdoor temperature from the weather data. Alternately, the node name must be specified in an OutdoorAir:NodeList object where the outdoor temperature entering the condenser is taken directly from the weather data. This field may also be left blank, if this is the case then the outdoor temperature entering the condenser is taken directly from the weather data.

The next input describes the type of outdoor condenser coil used with the DX cooling coil (Air Cooled or Evap Cooled). The following three inputs are required when modeling an evaporative-cooled condenser: evaporative condenser effectiveness, evaporative condenser air volume flow rate, and the power consumed by the evaporative condenser pump. See section DX Cooling Coil Model in the EnergyPlus Engineering Document for further details regarding this model.
";
		

		private static readonly System.Lazy<CoilPerformanceDXCooling> instance = new System.Lazy<CoilPerformanceDXCooling>(() => new CoilPerformanceDXCooling());
        private static CoilPerformanceDXCooling Value => instance.Value;
		public static string Name => Value._name;
        public static string Note => Value._note;
		private CoilPerformanceDXCooling(){}

	private string _Field_Name = @"This alpha field is a unique user-assigned name for an instance of DX cooling coil performance. Any reference to this DX coil performance object by another object will use this name.";
		public static string Field_Name => Value._Field_Name;

		private string _Field_GrossRatedTotalCoolingCapacity = @"The total, full load gross cooling capacity (sensible plus latent) in watts of the DX coil unit at rated conditions (air entering the cooling coil at 26.7 ??C drybulb/19.4 ??C wetbulb, air entering the outdoor condenser coil at 35 ??C drybulb/23.9 ??C wetbulb\protect\hyperlink{ux5fftn4}{[4]}, and a cooling coil air flow rate defined by field rated air flow rate below). Capacity should be gross (i.e., the effect of supply air fan heat is NOT accounted for).";
		public static string Field_GrossRatedTotalCoolingCapacity => Value._Field_GrossRatedTotalCoolingCapacity;

		private string _Field_GrossRatedSensibleHeatRatio = @"The sensible heat ratio (SHR = gross sensible capacity divided by gross total cooling capacity) of the DX cooling coil at rated conditions (air entering the cooling coil at 26.7 ??C drybulb/19.4 ??C wetbulb, air entering the outdoor condenser coil at 35 ??C drybulb/23.9 ??C wetbulb, and a cooling coil air flow rate defined by field rated air flow rate below). Both the sensible and total cooling capacities used to define the Rated SHR should be gross (i.e., the effect of supply air fan heat is NOT accounted for).";
		public static string Field_GrossRatedSensibleHeatRatio => Value._Field_GrossRatedSensibleHeatRatio;

		private string _Field_GrossRatedCoolingCOP = @"The coefficient of performance is the ratio of the gross total cooling capacity in watts to electrical power input in watts) of the DX cooling coil unit at rated conditions (air entering the cooling coil at 26.7 ??C drybulb/19.4 ??C wetbulb, air entering the outdoor condenser coil at 35 ??C drybulb/ 23.9 ??C wetbulb, and a cooling coil air flow rate defined by field rated air flow rate below). The input power includes electric power for the compressor(s) and condenser fan(s) but does not include the power consumption of the supply air fan. If this input field is left blank, the default value is 3.0.";
		public static string Field_GrossRatedCoolingCOP => Value._Field_GrossRatedCoolingCOP;

		private string _Field_RatedAirFlowRate = @"The air volume flow rate, in m^{3} per second, across the DX cooling coil at rated conditions. The gross rated total cooling capacity, gross rated SHR and gross rated COP should be performance information for the unit with air entering the cooling coil at 26.7 ??C drybulb/19.4 ??C wetbulb, air entering the outdoor condenser coil at 35 ??C drybulb/23.9 ??C wetbulb, and the rated air volume flow rate defined here.";
		public static string Field_RatedAirFlowRate => Value._Field_RatedAirFlowRate;

		private string _Field_FractionOfAirFlowBypassedAroundCoil = @"This numeric field specifies the fraction of the Rated Air Volume Flow Rate which bypasses the active cooling coil for this performance mode. The remaining portion of the flow should be between 0.00004027 m3/s and .00006041 m3/s per watt of gross rated total cooling capacity (300 to 450 cfm/ton) for this performance mode. For DOAS applications the remaining portion of rated air volume flow rate should be between 0.00001677 m^{3}/s and 0.00003355 m^{3}/s per watt of gross rated total cooling capacity (125 to 250 cfm/ton). This is used to model face-split coils on multi-stage units or bypass dampers. If total flow rate varies during simulation, the same fraction is bypassed. This input may range from 0.0 to <1.0. The default is 0.0. For a multi-stage face-split coil in which stage 1 is 60% of total capacity, this field would be set to 0.4 for the Stage 1 performance and set to 0.0 for the Stage 1+2 performance. For a DX system which activates a bypass damper for improved dehumidification, this field would be set to 0.0 for normal mode performance and set to something greater than zero for enhanced dehumidification mode performance.";
		public static string Field_FractionOfAirFlowBypassedAroundCoil => Value._Field_FractionOfAirFlowBypassedAroundCoil;

		private string _Field_TotalCoolingCapacityFunctionOfTemperatureCurveName = @"The name of a {biquadratic} performance curve (ref: Performance Curves) that parameterizes the variation of the total gross cooling capacity as a function of the wet-bulb temperature of the air entering the cooling coil, and the dry-bulb temperature of the air entering the air-cooled condenser coil (wet-bulb temperature if modeling an evaporative-cooled condenser). The output of this curve is multiplied by the gross rated total cooling capacity to give the gross total cooling capacity at specific temperature operating conditions (i.e., at temperatures different from the rating point temperatures). The curve is normalized to have the value of 1.0 at the rating point.";
		public static string Field_TotalCoolingCapacityFunctionOfTemperatureCurveName => Value._Field_TotalCoolingCapacityFunctionOfTemperatureCurveName;

		private string _Field_TotalCoolingCapacityFunctionOfFlowFractionCurveName = @"The name of a {quadratic} or {cubic} performance curve (ref: Performance Curves) that parameterizes the variation of the gross total cooling capacity as a function of the ratio of actual air flow rate across the cooling coil to the rated air flow rate (i.e., fraction of full load flow). The output of this curve is multiplied by the gross rated total cooling capacity and the total cooling capacity modifier curve (function of temperature) to give the gross total cooling capacity at the specific temperature and air flow conditions at which the coil is operating. The curve is normalized to have the value of 1.0 when the actual air flow rate equals the rated air flow rate.";
		public static string Field_TotalCoolingCapacityFunctionOfFlowFractionCurveName => Value._Field_TotalCoolingCapacityFunctionOfFlowFractionCurveName;

		private string _Field_EnergyInputRatioFunctionOfTemperatureCurveName = @"The name of a {biquadratic} performance curve (ref: Performance Curves) that parameterizes the variation of the energy input ratio (EIR) as a function of the wet-bulb temperature of the air entering the cooling coil, and the dry-bulb temperature of the air entering the air-cooled condenser coil (wet-bulb temperature if modeling an evaporative-cooled condenser). The EIR is the inverse of the COP. The output of this curve is multiplied by the rated EIR (inverse of rated COP) to give the EIR at specific temperature operating conditions (i.e., at temperatures different from the rating point temperatures). The curve is normalized to a value of 1.0 at the rating point.";
		public static string Field_EnergyInputRatioFunctionOfTemperatureCurveName => Value._Field_EnergyInputRatioFunctionOfTemperatureCurveName;

		private string _Field_EnergyInputRatioFunctionOfFlowFractionCurveName = @"The name of a {quadratic} or {cubic} performance curve (Ref: Performance Curves) that parameterizes the variation of the energy input ratio (EIR) as a function of the ratio of actual air flow rate across the cooling coil to the rated air flow rate (i.e., fraction of full load flow). The EIR is the inverse of the COP. The output of this curve is multiplied by the rated EIR and the EIR modifier curve (function of temperature) to give the EIR at the specific temperature and air flow conditions at which the cooling coil is operating. This curve is normalized to a value of 1.0 when the actual air flow rate equals the rated air flow rate.";
		public static string Field_EnergyInputRatioFunctionOfFlowFractionCurveName => Value._Field_EnergyInputRatioFunctionOfFlowFractionCurveName;

		private string _Field_PartLoadFractionCorrelationCurveName = @"This alpha field defines the name of a {quadratic} or {cubic} performance curve (Ref: Performance Curves) that parameterizes the variation of electrical power input to the DX unit as a function of the part load ratio (PLR, sensible cooling load/steady-state sensible cooling capacity). The product of the rated EIR and EIR modifier curves is divided by the output of this curve to give the effective EIR for a given simulation timestep. The part load fraction (PLF) correlation accounts for efficiency losses due to compressor cycling.

The part load fraction correlation should be normalized to a value of 1.0 when the part load ratio equals 1.0 (i.e., no efficiency losses when the compressor(s) run continuously for the simulation timestep). For PLR values between 0 and 1 (0 < = PLR < 1), the following rules apply:

PLF > = 0.7 and PLF > = PLR

If PLF < 0.7 a warning message is issued, the program resets the PLF value to 0.7, and the simulation proceeds. The runtime fraction of the coil is defined as PLR/PLF. If PLF < PLR, then a warning message is issued and the runtime fraction of the coil is limited to 1.0.

A typical part load fraction correlation for a conventional, single-speed DX cooling coil (e.g., residential unit) would be:


       PLF = 0.85 + 0.15(PLR)


If the user wishes to model no efficiency degradation due to compressor cycling, the part load fraction correlation should be defined as follows:


       PLF = 1.0 + 0.0(PLR)";
		public static string Field_PartLoadFractionCorrelationCurveName => Value._Field_PartLoadFractionCorrelationCurveName;

		private string _Field_NominalTimeForCondensateRemovalToBegin = @"The nominal time (in seconds) after startup for condensate to begin leaving the coil's condensate drain line at the coil's rated airflow and temperature conditions, starting with a dry coil. Nominal time is equal to the ratio of the energy of the coil's maximum condensate holding capacity (J) to the coil's steady-state latent capacity (W). Suggested value is 1000; zero value means the latent degradation model is disabled. The default value for this field is zero. The supply air fan operating mode must be continuous (i.e., the supply air fan operating mode may be specified in other parent objects and is assumed continuous in some objects (e.g., CoilSystem:Cooling:DX) or can be scheduled in other objects [e.g., AirloopHVAC:UnitaryHeatCool]), and this field as well as the next three input fields for this object must have positive values in order to model latent capacity degradation.";
		public static string Field_NominalTimeForCondensateRemovalToBegin => Value._Field_NominalTimeForCondensateRemovalToBegin;

		private string _Field_RatioOfInitialMoistureEvaporationRateAndSteadyStateLatentCapacity = @"Ratio of the initial moisture evaporation rate from the cooling coil (when the compressor first turns off, in Watts) and the coil's steady-state latent capacity (Watts) at rated airflow and temperature conditions. Suggested value is 1.5; zero value means the latent degradation model is disabled. The default value for this field is zero. The supply air fan operating mode must be continuous (i.e., the supply air fan operating mode may be specified in other parent objects and is assumed continuous in some objects (e.g., CoilSystem:Cooling:DX) or can be scheduled in other objects [e.g., AirloopHVAC:UnitaryHeatCool]); and this field, the previous field and the next two fields must have positive values in order to model latent capacity degradation.";
		public static string Field_RatioOfInitialMoistureEvaporationRateAndSteadyStateLatentCapacity => Value._Field_RatioOfInitialMoistureEvaporationRateAndSteadyStateLatentCapacity;

		private string _Field_MaximumCyclingRate = @"The maximum on-off cycling rate for the compressor (cycles per hour), which occurs at 50% run time fraction. Suggested value is 3; zero value means latent degradation model is disabled. The default value for this field is zero. The supply air fan operating mode must be continuous (i.e., the supply air fan operating mode may be specified in other parent objects and is assumed continuous in some objects (e.g., CoilSystem:Cooling:DX) or can be scheduled in other objects [e.g., AirloopHVAC:UnitaryHeatCool]); and this field, the previous two fields and the next field must have positive values in order to model latent capacity degradation.";
		public static string Field_MaximumCyclingRate => Value._Field_MaximumCyclingRate;

		private string _Field_LatentCapacityTimeConstant = @"Time constant (in seconds) for the cooling coil's latent capacity to reach steady state after startup. Suggested value is 45; zero value means latent degradation model is disabled. The default value for this field is zero. The supply air fan operating mode must be continuous (i.e., the supply air fan operating mode may be specified in other parent objects and is assumed continuous in some objects (e.g., CoilSystem:Cooling:DX) or can be scheduled in other objects [e.g., AirloopHVAC:UnitaryHeatCool]), and this field as well as the previous three input fields for this object must have positive values in order to model latent capacity degradation.";
		public static string Field_LatentCapacityTimeConstant => Value._Field_LatentCapacityTimeConstant;

		private string _Field_CondenserAirInletNodeName = @"This optional alpha field specifies the outdoor air node name used to define the conditions of the air entering the outdoor condenser. If this field is left blank, the outdoor air temperature entering the condenser (dry-bulb or wet-bulb) is taken directly from the weather data. If this field is not blank, the node name specified must also be specified in an OutdoorAir:Node object where the height of the node is taken into consideration when calculating outdoor air temperature from the weather data. Alternately, the node name may be specified in an OutdoorAir:NodeList object where the outdoor air temperature is taken directly from the weather data.";
		public static string Field_CondenserAirInletNodeName => Value._Field_CondenserAirInletNodeName;

		private string _Field_CondenserType = @"The type of condenser used by the DX cooling coil. Valid choices for this input field are {AirCooled} or {EvaporativelyCooled}. The default for this field is {AirCooled}.";
		public static string Field_CondenserType => Value._Field_CondenserType;

		private string _Field_EvaporativeCondenserEffectiveness = @"The effectiveness of the evaporative condenser, which is used to determine the temperature of the air entering the outdoor condenser coil as follows:

\begin{equation}
Tcond\,inlet = \,\left( {Twb,o} \right)\,\, + \,\,\left( {1 - EvapCondEffectiveness} \right)\left( {Tdb,o\,\, - Twb,o} \right)
\end{equation}

where

{T_{cond\\ inlet}} = the temperature of the air entering the condenser coil (C)

{T_{wb,o}} = the wet-bulb temperature of the outdoor air (C)

{T_{db,o}} = the dry-bulb temperature of the outdoor air (C)

The resulting condenser inlet air temperature is used by the Total Cooling Capacity Modifier Curve (function of temperature) and the Energy Input Ratio Modifier Curve (function of temperature). The default value for this field is 0.9, although valid entries can range from 0.0 to 1.0. This field is not used when Condenser Type = Air Cooled.

If the user wants to model an air-cooled condenser, they should simply specify AirCooled in the field Condenser Type. In this case, the Total Cooling Capacity Modifier Curve (function of temperature) and the Energy Input Ratio Modifier Curve (function of temperature) input fields for this object should reference performance curves that are a function of outdoor dry-bulb temperature.

If the user wishes to model an evaporative-cooled condenser AND they have performance curves that are a function of the wet-bulb temperature of air entering the condenser coil, then the user should specify Condenser Type = Evap Cooled and the evaporative condenser effectiveness value should be entered as 1.0. In this case, the Total Cooling Capacity Modifier Curve (function of temperature) and the Energy Input Ratio Modifier Curve (function of temperature) input fields for this object should reference performance curves that are a function of the wet-bulb temperature of air entering the condenser coil.

If the user wishes to model an air-cooled condenser that has evaporative media placed in front of it to cool the air entering the condenser coil, then the user should specify Condenser Type = Evap Cooled. The user must also enter the appropriate evaporative effectiveness for the media. In this case, the Total Cooling Capacity Modifier Curve (function of temperature) and the Energy Input Ratio Modifier Curve (function of temperature) input fields for this object should reference performance curves that are a function of outdoor dry-bulb temperature. Be aware that the evaporative media will significantly reduce the dry-bulb temperature of the air entering the condenser coil, so the Total Cooling Capacity and EIR Modifier Curves must be valid for the expected range of dry-bulb temperatures that will be entering the condenser coil.";
		public static string Field_EvaporativeCondenserEffectiveness => Value._Field_EvaporativeCondenserEffectiveness;

		private string _Field_EvaporativeCondenserAirFlowRate = @"The air volume flow rate, in m^{3} per second, entering the evaporative condenser. This value is used to calculate the amount of water used to evaporatively cool the condenser inlet air. The minimum value for this field must be greater than zero, and this input field is autosizable (equivalent to 0.000144 m^{3}/s per watt of rated total cooling capacity [850 cfm/ton]). This field is not used when Condenser Type = Air Cooled.";
		public static string Field_EvaporativeCondenserAirFlowRate => Value._Field_EvaporativeCondenserAirFlowRate;

		private string _Field_EvaporativeCondenserPumpRatedPowerConsumption = @"The rated power of the evaporative condenser water pump in Watts. This value is used to calculate the power required to pump the water used to evaporatively cool the condenser inlet air. The default value for this input field is zero, but it is autosizable (equivalent to 0.004266 W per watt [15 W/ton] of rated total cooling capacity). This field is not used when Condenser Type = AirCooled.";
		public static string Field_EvaporativeCondenserPumpRatedPowerConsumption => Value._Field_EvaporativeCondenserPumpRatedPowerConsumption;

		private string _Field_SensibleHeatRatioFunctionOfTemperatureCurveName = @"The name of a biquadratic normalized curve (Ref: Performance Curves) that parameterizes the variation of the sensible heat ratio (SHR) as a function of DX cooling coil entering air wet-bulb and dry-bulb temperatures. The output of this curve is multiplied by the rated SHR and the SHR modifier curve (function of flow fraction) to give the SHR at the specific coil entering air temperature and air flow conditions at which the cooling coil is operating. This curve is normalized to a value of 1.0 at the rated condition. This input field is optional.";
		public static string Field_SensibleHeatRatioFunctionOfTemperatureCurveName => Value._Field_SensibleHeatRatioFunctionOfTemperatureCurveName;

		private string _Field_SensibleHeatRatioFunctionOfFlowFractionCurveName = @"The name of a quadratic or cubic normalized curve (Ref: Performance Curves) that parameterizes the variation of the sensible heat ratio (SHR) as a function of the ratio of actual air flow rate across the cooling coil to the rated air flow rate (i.e., fraction of full load flow). The output of this curve is multiplied by the rated SHR and the SHR modifier curve (function of temperature) to give the SHR at the specific temperature and air flow conditions at which the cooling coil is operating. This curve is normalized to a value of 1.0 when the actual air flow rate equals the rated air flow rate. This input field is optional.

Following is an example input for a Coil:Cooling:DX:TwoStageWithHumidityControlMode with 2 capacity stages and one enhanced dehumidification mode so it requires four CoilPerformance:DX:Cooling objects.



Coil:Cooling:DX:TwoStageWithHumidityControlMode,
  DXSystem 1 Cooling Coil, !- Coil Name
  OfficeHeatCoolAvail,         !- Availability Schedule
  DXSystem 1 Mixed Air Node,   !- Coil Air Inlet Node
  DXSystem 1 Fan Air Inlet Node,   !- Coil Air Outlet Node
  ,                                               !- Crankcase Heater Capacity {W}
  ,                                               !- Maximum Outdoor Dry-bulb Temperature for Crankcase Heater Operation {C}
  2,                                             !- Number of Capacity Stages
  1,                                             !- Number of Enhanced Dehumidification Modes
  CoilPerformance:DX:Cooling,   !- Normal Mode Stage 1 Coil Performance Object Type
  DXSystem 1 DX Coil Standard Mode-Stage 1,   !- Normal Mode Stage 1 Coil Performance Object Name
  CoilPerformance:DX:Cooling,   !- Normal Mode Stage 1+2 Coil Perf Object Type
  DXSystem 1 DX Coil Standard Mode-Stage 1&2,   !- Normal Mode Stage 1+2 Coil Perf Object Name
  CoilPerformance:DX:Cooling,   !- Dehumid Mode 1 Stage 1 Coil Perf Object Type
  DXSystem 1 DX Coil SubCoolReheat Mode-Stage 1,   !- Dehumid Mode 1 Stage 1 Coil Perf Object Name
  CoilPerformance:DX:Cooling,   !- Dehumid Mode 1 Stage 1+2 Coil Perf Object Type
  DXSystem 1 DX Coil SubCoolReheat Mode-Stage 1&2;   !- Dehumid Mode 1 Stage 1+2 Coil Perf Object Name


  CoilPerformance:DX:Cooling,
  DXSystem 1 DX Coil Standard Mode-Stage 1,   !- Coil Performance Specification Name
  21327.57812,                         !- Gross Rated Total Cooling Capacity {W}
  0.68,                                       !- Gross Rated Sensible Heat Ratio
  3.56,                                       !- Gross Rated Cooling COP
  1.695372105,                         !- Rated Air Flow Rate {m3/s}
  0.4,                                         !- Fraction of Air Flow Bypassed Around Coil
  HPACCoolCapFT,                     !- Total Cooling Capacity Modifier Curve (function of temperature)
  HPACCoolCapFFF,                   !- Total Cooling Capacity Modifier Curve (function of flow fraction)
  HPACCOOLEIRFT,                     !- Energy Input Ratio Modifier Curve (function of temperature)
  HPACCOOLEIRFFF,                   !- Energy Input Ratio Modifier Curve (function of flow fraction)
  HPACCOOLPLFFPLR,                 !- Part Load Fraction Correlation (function of part load ratio)
  1000,                                       !- Nominal Time for Condensate Removal to Begin {s}
  1.5, !- Ratio of Initial Moisture Evaporation Rate and Steady-state Latent Capacity {dimensionless}
  3,                                             !- Maximum ON/OFF Cycling Rate {cycles/hr}
  45,                                           !- Latent Capacity Time Constant {s}
  ,                                               !- Condenser Air Inlet Node Name
  ,                                               !- Condenser Type
  ,                                               !- Evaporative Condenser Effectiveness
  ,                                               !- Evaporative Condenser Air Flow Rate
  ,                                               !- Evaporative Condenser Pump Rated Power Consumption
  DOAS DX Coil SHR-FT,         !- Sensible Heat Ratio Function of Temperature Curve Name
  DOAS DX Coil SHR-FF;         !- Sensible Heat Ratio Function of Flow Fraction Curve Name


  CoilPerformance:DX:Cooling,
  DXSystem 1 DX Coil Standard Mode-Stage 1&2,   !- Coil Performance Specification Name
  35545.96484,                         !- Gross Rated Total Cooling Capacity {W}
  0.68,                                       !- Gross Rated Sensible Heat Ratio
  3.56,                                       !- Gross Rated Cooling COP
  1.695372105,                         !- Rated Air Flow Rate {m3/s}
  0.0,                                         !- Fraction of Air Flow Bypassed Around Coil
  HPACCoolCapFT,                     !- Total Cooling Capacity Modifier Curve (function of temperature)
  HPACCoolCapFFF,                   !- Total Cooling Capacity Modifier Curve (function of flow fraction)
  HPACCOOLEIRFT,                     !- Energy Input Ratio Modifier Curve (function of temperature)
  HPACCOOLEIRFFF,                   !- Energy Input Ratio Modifier Curve (function of flow fraction)
  HPACCOOLPLFFPLR,                 !- Part Load Fraction Correlation (function of part load ratio)
  1000,                                       !- Nominal Time for Condensate Removal to Begin {s}
  1.5, !- Ratio of Initial Moisture Evaporation Rate and Steady-state Latent Capacity {dimensionless}
  3,                                             !- Maximum ON/OFF Cycling Rate {cycles/hr}
  45,                                           !- Latent Capacity Time Constant {s}
  ,                                               !- Condenser Air Inlet Node Name
  ,                                               !- Condenser Type
  ,                                               !- Evaporative Condenser Effectiveness
  ,                                               !- Evaporative Condenser Air Flow Rate
  ,                                               !- Evaporative Condenser Pump Rated Power Consumption
  DOAS DX Coil SHR-FT,         !- Sensible Heat Ratio Function of Temperature Curve Name
  DOAS DX Coil SHR-FF;         !- Sensible Heat Ratio Function of Flow Fraction Curve Name


  CoilPerformance:DX:Cooling,
  DXSystem 1 DX Coil SubCoolReheat Mode-Stage 1,   !- Coil Performance Specification Name
  19962.61328,                         !- Gross Rated Total Cooling Capacity (gross) {W}
  0.60,                                       !- Gross Rated SHR
  3.31,                                       !- Gross Rated Cooling COP
  1.695372105,                         !- Rated Air Flow Rate {m3/s}
  0.4,                                         !- Fraction of Air Flow Bypassed Around Coil
  SubCoolReheatCoolCapFT,   !- Total Cooling Capacity Modifier Curve (function of temperature)
  SubCoolReheatCoolCapFFF, !- Total Cooling Capacity Modifier Curve (function of flow fraction)
  SubCoolReheatCOOLEIRFT,   !- Energy Input Ratio Modifier Curve (function of temperature)
  SubCoolReheatCoolEIRFFF, !- Energy Input Ratio Modifier Curve (function of flow fraction)
  SubCoolReheatCoolPLFFPLR, !- Part Load Fraction Correlation (function of part load ratio)
  1000,                                       !- Nominal Time for Condensate Removal to Begin {s}
  1.5, !- Ratio of Initial Moisture Evaporation Rate and Steady-state Latent Capacity {dimensionless}
  3,                                             !- Maximum ON/OFF Cycling Rate {cycles/hr}
  45,                                           !- Latent Capacity Time Constant {s}
  ,                                               !- Condenser Air Inlet Node Name
  ,                                               !- Condenser Type
  ,                                               !- Evaporative Condenser Effectiveness
  ,                                               !- Evaporative Condenser Air Flow Rate
  ,                                               !- Evaporative Condenser Pump Rated Power Consumption
  DOAS DX Coil SHR-FT,         !- Sensible Heat Ratio Function of Temperature Curve Name
  DOAS DX Coil SHR-FF;         !- Sensible Heat Ratio Function of Flow Fraction Curve Name


  CoilPerformance:DX:Cooling,
  DXSystem 1 DX Coil SubCoolReheat Mode-Stage 1&2,   !- Coil Performance Specification Name
  33271.01953,                         !- Gross Rated Total Cooling Capacity (gross) {W}
  0.60,                                       !- Gross Rated SHR
  3.31,                                       !- Gross Rated Cooling COP
  1.695372105,                         !- Rated Air Flow Rate {m3/s}
  0.0,                                         !- Fraction of Air Flow Bypassed Around Coil
  SubCoolReheatCoolCapFT,   !- Total Cooling Capacity Modifier Curve (function of temperature)
  SubCoolReheatCoolCapFFF, !- Total Cooling Capacity Modifier Curve (function of flow fraction)
  SubCoolReheatCOOLEIRFT,   !- Energy Input Ratio Modifier Curve (function of temperature)
  SubCoolReheatCoolEIRFFF, !- Energy Input Ratio Modifier Curve (function of flow fraction)
  SubCoolReheatCoolPLFFPLR, !- Part Load Fraction Correlation (function of part load ratio)
  1000,                                       !- Nominal Time for Condensate Removal to Begin {s}
  1.5, !- Ratio of Initial Moisture Evaporation Rate and Steady-state Latent Capacity {dimensionless}
  3,                                             !- Maximum ON/OFF Cycling Rate {cycles/hr}
  45,                                           !- Latent Capacity Time Constant {s}
  ,                                               !- Condenser Air Inlet Node Name
  ,                                               !- Condenser Type
  ,                                               !- Evaporative Condenser Effectiveness
  ,                                               !- Evaporative Condenser Air Flow Rate
  ,                                               !- Evaporative Condenser Pump Rated Power Consumption
  DOAS DX Coil SHR-FT,         !- Sensible Heat Ratio Function of Temperature Curve Name
  DOAS DX Coil SHR-FF;         !- Sensible Heat Ratio Function of Flow Fraction Curve Name";
		public static string Field_SensibleHeatRatioFunctionOfFlowFractionCurveName => Value._Field_SensibleHeatRatioFunctionOfFlowFractionCurveName;

	

}

	public sealed class CoilHeatingDXSingleSpeed
    { 

		private string _name = @"Coil:Heating:DX:SingleSpeed";
		private string _note = @"The single speed heating DX coil model uses performance information at rated conditions along with curve fits for variations in total capacity, energy input ratio and part load fraction to determine performance at part-load conditions. The impacts of various defrost strategies (reverse cycle, resistive, timed or on-demand) are modeled based on a combination of user inputs and empirical models taken from the air-to-air heat pump algorithms in DOE-2.1E.

The single speed heating DX coil input requires an availability schedule, the gross rated heating capacity, the gross rated COP and the rated air volume flow rate. The latter 3 inputs determine the coil performance at the rating point (outdoor air dry-bulb temperature of 8.33 C, outdoor air wet-bulb temperature of 6.11 C, coil entering air dry-bulb temperature of 21.11 C, coil entering air wet-bulb temperature of 15.55 C). The rated air volume flow rate should be between .00004027 m^{3}/s and .00006041 m^{3}/s per watt of gross rated heating capacity.

Up to 6 curves are required depending on the defrost strategy selected.




  The heating capacity modifier curve (function of temperature) can be a function of both the outdoor and indoor air dry-bulb temperature or only the outdoor air dry-bulb temperature. User has the choice of a bi-quadratic curve with two independent variables or a quadratic curve as well as a cubic curve with a single independent variable. The curve is normalized to 1 at 8.33 outdoor dry-bulb temperature and if a biquadratic curve is used also at 21.11 C indoor dry-bulb temperature. The bi-quadratic curve is recommended if sufficient manufacturer data is available as it provides sensitivity to the indoor air dry-bulb temperature and a more realistic output. The output of this curve is multiplied by the gross rated heating capacity to give the gross heating capacity at specific temperature operating conditions (i.e., at an outdoor or indoor air temperature different from the rating point temperature).

  The heating capacity modifier curve (function of flow fraction) is a quadratic or cubic curve with the independent variable being the ratio of the actual air flow rate across the heating coil to the rated air flow rate (i.e., fraction of full load flow). The curve is normalized to have the value of 1.0 when the actual air flow rate equals the rated air flow rate. The output of this curve is multiplied by the gross rated heating capacity and the heating capacity modifier curve (function of temperature) to give the gross heating capacity at the specific temperature and air flow conditions at which the coil is operating.

  The energy input ratio (EIR) modifier curve (function of temperature) can be a function of both the outdoor and indoor air dry-bulb temperature or only the outdoor air dry-bulb temperature. User has the choice of a bi-quadratic curve with two independent variables or a quadratic curve as well as a cubic curve with a single independent variable. The curve is normalized to 1 at 8.33 outdoor dry-bulb temperature and if a biquadratic curve is used also at 21.11 C indoor dry-bulb temperature. The bi-quadratic curve is recommended if sufficient manufacturer data is available as it provides sensitivity to the indoor air dry-bulb temperature and a more realistic output. The output of this curve is multiplied by the rated EIR (inverse of the rated COP) to give the EIR at specific temperature operating conditions (i.e., at an outdoor or indoor air temperature different from the rating point temperature).

  The energy input ratio (EIR) modifier curve (function of flow fraction) is a quadratic or cubic curve with the independent variable being the ratio of the actual air flow rate across the heating coil to the rated air flow rate (i.e., fraction of full load flow). The curve is normalized to have the value of 1.0 when the actual air flow rate equals the rated air flow rate. The output of this curve is multiplied by the rated EIR (inverse of the rated COP) and the EIR modifier curve (function of temperature) to give the EIR at the specific temperature and air flow conditions at which the coil is operating.

  The part load fraction correlation (function of part load ratio) is a quadratic or cubic curve with the independent variable being part load ratio (sensible heating load / steady-state heating capacity). The output of this curve is used in combination with the rated EIR and EIR modifier curves to give the effective EIR for a given simulation timestep. The part load fraction correlation accounts for efficiency losses due to compressor cycling.

  The defrost energy input ratio (EIR) modifier curve (function of temperature) is a bi-quadratic curve with two independent variables: the heating coil entering air wet-bulb temperature (variable x) and the outdoor air dry-bulb temperature (variable y). The output of this curve is multiplied by the heating coil capacity, the fractional defrost time period and the runtime fraction of the heating coil to give the defrost power at the specific temperatures at which the coil is operating. This curve is only required when a reverse-cycle defrost strategy is specified.


The curves are simply specified by name. Curve inputs are described in the curve manager section of this document (ref. Performance Curves).

The next input item for the coil is the supply air fan operation mode. Either the supply air fan runs continuously while the DX coil cycles on/off, or the fan and coil cycle on/off together. The next two inputs define the minimum outdoor dry-bulb temperature that the heat pump compressor will operate and the maximum outdoor dry-bulb temperature for defrost operation. Crankcase heater capacity and cutout temperature are entered in the following two inputs. The final four inputs cover the type of defrost strategy (reverse-cycle or resistive), defrost control (timed or on-demand), the fractional defrost time period (timed defrost control only), and the resistive defrost heater capacity if a resistive defrost strategy is selected.
";
		

		private static readonly System.Lazy<CoilHeatingDXSingleSpeed> instance = new System.Lazy<CoilHeatingDXSingleSpeed>(() => new CoilHeatingDXSingleSpeed());
        private static CoilHeatingDXSingleSpeed Value => instance.Value;
		public static string Name => Value._name;
        public static string Note => Value._note;
		private CoilHeatingDXSingleSpeed(){}

	private string _Field_Name = @"This alpha field defines a unique user-assigned name for an instance of a DX heating coil. Any reference to this DX heating coil by another object will use this name.";
		public static string Field_Name => Value._Field_Name;

		private string _Field_AvailabilityScheduleName = @"This alpha field defines the name of the schedule (ref: Schedule) that denotes whether the DX heating coil can run during a given time period. A schedule value greater than 0 (usually 1 is used) indicates that the unit can be on during the time period. A value less than or equal to 0 (usually 0 is used) denotes that the unit must be off for the time period. If this field is blank, the schedule has values of 1 for all time periods.";
		public static string Field_AvailabilityScheduleName => Value._Field_AvailabilityScheduleName;

		private string _Field_GrossRatedHeatingCapacity = @"This numeric field defines the total, full load gross heating capacity in watts of the DX coil unit at rated conditions (outdoor air dry-bulb temperature of 8.33 C, outdoor air wet-bulb temperature of 6.11 C, heating coil entering air dry-bulb temperature of 21.11 C, heating coil entering air wet-bulb temperature of 15.55 C, and a heating coil air flow rate defined by field rated air flow volume below). The value entered here must be greater than 0. Capacity should not account for supply air fan heat. The gross rated heating capacity should be within 20% of the gross rated total cooling capacity, otherwise a warning message is issued. The gross heating capacity should NOT include the effect of supply air fan heat.";
		public static string Field_GrossRatedHeatingCapacity => Value._Field_GrossRatedHeatingCapacity;

		private string _Field_GrossRatedHeatingCOP = @"This numeric field defines the coefficient of performance (COP = the gross heating capacity in watts divided by electrical power input in watts) of the DX heating coil unit at rated conditions (outdoor air dry-bulb temperature of 8.33 C, outdoor air wet-bulb temperature of 6.11 C, coil entering air dry-bulb temperature of 21.11 C, coil entering air wet-bulb temperature of 15.55 C, and a heating coil air flow rate defined by field rated air flow volume rate below). The value entered here must be greater than 0. The input power includes power for the compressor(s) and outdoor fan(s) but does not include the power consumption of the indoor supply air fan. The gross COP should NOT account for the supply air fan.";
		public static string Field_GrossRatedHeatingCOP => Value._Field_GrossRatedHeatingCOP;

		private string _Field_RatedAirFlowRate = @"This numeric field defines the volume air flow rate, in m^{3} per second, across the DX heating coil at rated conditions. The value entered here must be greater than 0. The rated air volume flow rate should be between 0.00004027 m^{3}/s and 0.00006041 m^{3}/s per watt of the gross rated heating capacity. The gross rated heating capacity and gross rated COP should be performance information for the unit with outdoor air dry-bulb temperature of 8.33 C, outdoor air wet-bulb temperature of 6.11 C, heating coil entering air dry-bulb temperature of 21.11 C, heating coil entering air wet-bulb temperature of 15.55 C, and the rated air volume flow rate defined here.";
		public static string Field_RatedAirFlowRate => Value._Field_RatedAirFlowRate;

		private string _Field_RatedEvaporatorFanPowerPerVolumeFlowRate = @"This field is the electric power for the evaporator (heating coil) fan per air volume flow rate through the coil at the rated conditions in W/(m^{3}/s). The default value is 773.3 W/(m^{3}/s) (365 W/1000 cfm) if this field is left blank. If a value is entered, it must be > = 0.0 and < = 1250 W/(m^{3}/s). This value is only used to calculate High Temperature Heating Standard (Net) Rating Capacity, Low Temperature Heating Standard (Net) Rating Capacity and Heating Seasonal Performance Factor (HSPF) which will be outputs in the EnergyPlus eio file (ref. EnergyPlus Engineering Reference, Single Speed DX Heating Coil, Standard Ratings). This value is not used for modeling the evaporator (heating coil) fan during simulations; instead, it is used for calculating the above standard ratings to assist the user in verifying their inputs for modeling this type of equipment.";
		public static string Field_RatedEvaporatorFanPowerPerVolumeFlowRate => Value._Field_RatedEvaporatorFanPowerPerVolumeFlowRate;

		private string _Field_AirInletNodeName = @"This alpha field defines the name of the HVAC system node from which the DX heating coil draws its inlet air.";
		public static string Field_AirInletNodeName => Value._Field_AirInletNodeName;

		private string _Field_AirOutletNodeName = @"This alpha field defines the name of the HVAC system node to which the DX heating coil sends its outlet air.";
		public static string Field_AirOutletNodeName => Value._Field_AirOutletNodeName;

		private string _Field_HeatingCapacityFunctionOfTemperatureCurveName = @"This alpha field defines the name of a bi-quadratic, quadratic or cubic performance curve (ref: Performance Curves) that parameterizes the variation of the total heating capacity as a function of the both the indoor and outdoor air dry-bulb temperature or just the outdoor air dry-bulb temperature depending on the type of curve selected. The bi-quadratic curve is recommended if sufficient manufacturer data is available as it provides sensitivity to the indoor air dry-bulb temperature and a more realistic output. The output of this curve is multiplied by the gross rated heating capacity to give the gross total heating capacity at specific temperature operating conditions (i.e., at an indoor air dry-bulb temperature or outdoor air dry-bulb temperature different from the rating point temperature). The curve is normalized to have the value of 1.0 at the rating point.";
		public static string Field_HeatingCapacityFunctionOfTemperatureCurveName => Value._Field_HeatingCapacityFunctionOfTemperatureCurveName;

		private string _Field_HeatingCapacityFunctionOfFlowFractionCurveName = @"This alpha field defines the name of a quadratic or cubic performance curve (ref: Performance Curves) that parameterizes the variation of total heating capacity as a function of the ratio of actual air flow rate across the heating coil to the rated air flow rate (i.e., fraction of full load flow). The output of this curve is multiplied by the gross rated heating capacity and the heating capacity modifier curve (function of temperature) to give the gross heating capacity at the specific temperature and air flow conditions at which the coil is operating. The curve is normalized to have the value of 1.0 when the actual air flow rate equals the rated air flow rate.";
		public static string Field_HeatingCapacityFunctionOfFlowFractionCurveName => Value._Field_HeatingCapacityFunctionOfFlowFractionCurveName;

		private string _Field_EnergyInputRatioFunctionOfTemperatureCurveName = @"This alpha field defines the name of a bi-quadratic, quadratic or cubic performance curve (ref: Performance Curves) that parameterizes the variation of the energy input ratio (EIR) as a function of the both the indoor and outdoor air dry-bulb temperature or just the outdoor air dry-bulb temperature depending on the type of curve selected. The bi-quadratic curve is recommended if sufficient manufacturer data is available as it provides sensitivity to the indoor air dry-bulb temperature and a more realistic output. The EIR is the inverse of the COP. The output of this curve is multiplied by the rated EIR (inverse of rated COP) to give the EIR at specific temperature operating conditions (i.e., at an indoor air dry-bulb temperature or outdoor air dry-bulb temperature different from the rating point temperature). The curve is normalized to have the value of 1.0 at the rating point.";
		public static string Field_EnergyInputRatioFunctionOfTemperatureCurveName => Value._Field_EnergyInputRatioFunctionOfTemperatureCurveName;

		private string _Field_EnergyInputRatioFunctionOfFlowFractionCurveName = @"This alpha field defines the name of a quadratic or cubic performance curve (ref: Performance Curves) that parameterizes the variation of the energy input ratio (EIR) as a function of the ratio of actual air flow rate across the heating coil to the rated air flow rate (i.e., fraction of full load flow). The EIR is the inverse of the COP. The output of this curve is multiplied by the rated EIR and the EIR modifier curve (function of temperature) to give the EIR at the specific temperature and air flow conditions at which the coil is operating. This curve is normalized to a value of 1.0 when the actual air flow rate equals the rated air flow rate.";
		public static string Field_EnergyInputRatioFunctionOfFlowFractionCurveName => Value._Field_EnergyInputRatioFunctionOfFlowFractionCurveName;

		private string _Field_PartLoadFractionCorrelationCurveName = @"This alpha field defines the name of a quadratic or cubic performance curve (Ref: Performance Curves) that parameterizes the variation of electrical power input to the DX unit as a function of the part load ratio (PLR, sensible cooling load/steady-state sensible cooling capacity). The product of the rated EIR and EIR modifier curves is divided by the output of this curve to give the effective EIR for a given simulation timestep. The part load fraction (PLF) correlation accounts for efficiency losses due to compressor cycling.

The part load fraction correlation should be normalized to a value of 1.0 when the part load ratio equals 1.0 (i.e., no efficiency losses when the compressor(s) run continuously for the simulation timestep). For PLR values between 0 and 1 (0 < = PLR < 1), the following rules apply:

PLF > = 0.7 and PLF > = PLR

If PLF < 0.7 a warning message is issued, the program resets the PLF value to 0.7, and the simulation proceeds. The runtime fraction of the coil is defined as PLR/PLF. If PLF < PLR, then a warning message is issued and the runtime fraction of the coil is limited to 1.0.

A typical part load fraction correlation for a conventional, single-speed DX cooling coil (e.g., residential unit) would be:


       PLF = 0.85 + 0.15(PLR)


If the user wishes to model no efficiency degradation due to compressor cycling, the part load fraction correlation should be defined as follows:


       PLF = 1.0 + 0.0(PLR)";
		public static string Field_PartLoadFractionCorrelationCurveName => Value._Field_PartLoadFractionCorrelationCurveName;

		private string _Field_DefrostEnergyInputRatioFunctionOfTemperatureCurveName = @"This alpha field defines the name of a bi-quadratic performance curve (ref: Performance Curves) that parameterizes the variation of the energy input ratio (EIR) during reverse-cycle defrost periods as a function of the wet-bulb temperature of the air entering the indoor coil (variable x) and the outdoor air dry-bulb temperature (variable y). The EIR is the inverse of the COP. The output of this curve is multiplied by the coil capacity, the fractional defrost time period and the runtime fraction of the heating coil to give the defrost power at the specific temperatures at which the indoor and outdoor coils are operating. This curve is only required when a reverse-cycle defrost strategy is selected. The curve is normalized to a value of 1.0 at the rating point conditions.";
		public static string Field_DefrostEnergyInputRatioFunctionOfTemperatureCurveName => Value._Field_DefrostEnergyInputRatioFunctionOfTemperatureCurveName;

		private string _Field_MinimumOutdoorDryBulbTemperatureForCompressorOperation = @"";
		public static string Field_MinimumOutdoorDryBulbTemperatureForCompressorOperation => Value._Field_MinimumOutdoorDryBulbTemperatureForCompressorOperation;

		private string _Field_OutdoorDryBulbTemperatureToTurnOnCompressor = @"This numeric field defines the outdoor air dry-bulb temperature when the compressor is automatically turned back on following an automatic shut off because of low outdoor temperature. This field is only used for the calculation heating seasonal performance factor (HSPF) of heating coil. If this field is not provided, outdoor bin temperature is always considered to be greater than this temperature and Minimum Outdoor dry-bulb Temperature for Compressor Operation field described above.";
		public static string Field_OutdoorDryBulbTemperatureToTurnOnCompressor => Value._Field_OutdoorDryBulbTemperatureToTurnOnCompressor;

		private string _Field_MaximumOutdoorDryBulbTemperatureForDefrostOperation = @"This numeric field defines the outdoor air dry-bulb temperature above which outdoor coil defrosting is disabled. The temperature for this input field must be greater than or equal to 0 C and less than or equal to 7.22 C. If this input field is left blank, the default value is 5 C.";
		public static string Field_MaximumOutdoorDryBulbTemperatureForDefrostOperation => Value._Field_MaximumOutdoorDryBulbTemperatureForDefrostOperation;

		private string _Field_CrankcaseHeaterCapacity = @"This numeric field defines the crankcase heater capacity in Watts. When the outdoor air dry-bulb temperature is below the value specified in the input field Maximum Outdoor Dry-bulb Temperature for Crankcase Heater Operation (described below), the crankcase heater is enabled during the time that the compressor is not running. If this heating coil is used as part of an air-to-air heat pump (Ref. AirLoopHVAC:UnitaryHeatPump:AirToAir or ZoneHVAC:PackagedTerminalHeatPump), the crankcase heater defined for this DX heating coil is enabled during the time that the compressor is not running for either heating or cooling (and the crankcase heater power defined in the DX cooling coil object is disregarded in this case). The value for this input field must be greater than or equal to 0. If this input field is left blank, the default value is 0. To simulate a unit without a crankcase heater, enter a value of 0.";
		public static string Field_CrankcaseHeaterCapacity => Value._Field_CrankcaseHeaterCapacity;

		private string _Field_MaximumOutdoorDryBulbTemperatureForCrankcaseHeaterOperation = @"This numeric field defines the outdoor air dry-bulb temperature above which the compressor s crankcase heater is disabled. The value for this input field must be greater than or equal to 0.0 C. If this input field is left blank, the default value is 10 C.";
		public static string Field_MaximumOutdoorDryBulbTemperatureForCrankcaseHeaterOperation => Value._Field_MaximumOutdoorDryBulbTemperatureForCrankcaseHeaterOperation;

		private string _Field_DefrostStrategy = @"This alpha field has two choices: reverse-cycle or resistive. If the reverse-cycle strategy is selected, the heating cycle is reversed periodically to provide heat to melt frost accumulated on the outdoor coil. If a resistive defrost strategy is selected, the frost is melted using an electric resistance heater. If this input field is left blank, the default defrost strategy is reverse-cycle.";
		public static string Field_DefrostStrategy => Value._Field_DefrostStrategy;

		private string _Field_DefrostControl = @"This alpha field has two choices: timed or on-demand. If timed control is selected, the defrost time period is calculated based on a fixed value or compressor runtime whether or not frost has actually accumulated. For timed defrost control, the fractional amount of time the unit is in defrost is entered in the input field Defrost Time Period Fraction described below. If on-demand defrost control is selected, the defrost time period is calculated based on outdoor weather (humidity ratio) conditions. Regardless of which defrost control is selected, defrost does not occur above the user specified outdoor temperature entered in the input field Maximum Outdoor Dry-bulb Temperature for Defrost Operation described above. If this input field is left blank, the default defrost control is timed.";
		public static string Field_DefrostControl => Value._Field_DefrostControl;

		private string _Field_DefrostTimePeriodFraction = @"This numeric field defines the fraction of compressor runtime when the defrost cycle is active, and only applies to timed defrost (see Defrost Control input field above). For example, if the defrost cycle is active for 3.5 minutes for every 60 minutes of compressor runtime, then the user should enter 3.5/60 = 0.058333. The value for this input field must be greater than or equal to 0. If this input field is left blank, the default value is 0.058333.";
		public static string Field_DefrostTimePeriodFraction => Value._Field_DefrostTimePeriodFraction;

		private string _Field_ResistiveDefrostHeaterCapacity = @"This numeric field defines the capacity of the resistive defrost heating element in Watts. This input field is used only when the selected defrost strategy is resistive (see input field Defrost Strategy above). The value for this input field must be greater than or equal to 0. If this input field is left blank, the default value is 0.";
		public static string Field_ResistiveDefrostHeaterCapacity => Value._Field_ResistiveDefrostHeaterCapacity;

		private string _Field_RegionNumber = @"This optional numeric field defines the region number which is used to calculate HSPF of heating coil. The value for this input field must be between 1 and 6. If this input field is left blank, the default value is 4.";
		public static string Field_RegionNumber => Value._Field_RegionNumber;

		private string _Field_EvaporatorAirInletNodeName = @"This optional alpha field specifies the outdoor air node name used to define the conditions of the air entering the outdoor evaporator. If this field is left blank, the outdoor air temperature entering the evaporator is taken directly from the weather data. If this field is not blank, the node name specified must also be specified in an OutdoorAir:Node object where the height of the node is taken into consideration when calculating outdoor air temperature from the weather data. Alternately, the node name may be specified in an OutdoorAir:NodeList object where the outdoor air temperature is taken directly from the weather data.";
		public static string Field_EvaporatorAirInletNodeName => Value._Field_EvaporatorAirInletNodeName;

		private string _Field_ZoneNameForEvaporatorPlacement = @"This input field is name of a conditioned or unconditioned zone where the secondary coil (evaporator) of a heat pump is installed. This is an optional input field specified only when user desires to extract heat from the zone via secondary coil. Heat extracted is modeled as internal gain. If the primary DX system is a heat pump, then the zone name should be the same as the zone name specified for placing the secondary cooling DX coil.";
		public static string Field_ZoneNameForEvaporatorPlacement => Value._Field_ZoneNameForEvaporatorPlacement;

		private string _Field_SecondaryCoilAirFlowRate = @"This input value is the secondary coil (evaporator) air flow rate when the heat pump is working in heating mode or the secondary coil (condenser) air flow rate when the heat pump is working in cooling mode. This input field is auto-sizable.";
		public static string Field_SecondaryCoilAirFlowRate => Value._Field_SecondaryCoilAirFlowRate;

		private string _Field_SecondaryCoilFanFlowScalingFactor = @"This input field is scaling factor for autosizing the secondary DX coil fan flow rate. The secondary air flow rate is determined by multiplying the primary DX coil rated air flow rate by the fan flow scaling factor. Default value is 1.25. If the secondary coil fan flow rate is not autosized, then the secondary coil fan flow scaling factor is set to 1.0.";
		public static string Field_SecondaryCoilFanFlowScalingFactor => Value._Field_SecondaryCoilFanFlowScalingFactor;

		private string _Field_NominalSensibleHeatRatioOfSecondaryCoil = @"This input value is the nominal sensible heat ratio used to split the heat extracted by a secondary DX coil (evaporator) of a heat pump into sensible and latent components. This is an optional input field. If this input field is left blank, then pure sensible internal heat gain is assumed, i.e., sensible heat ratio of 1.0.";
		public static string Field_NominalSensibleHeatRatioOfSecondaryCoil => Value._Field_NominalSensibleHeatRatioOfSecondaryCoil;

		private string _Field_SensibleHeatRatioModifierFunctionOfTemperatureCurveName = @"This input field is name of sensible heat ratio modifier biquadratic curve. The value of this curve modifies the nominal sensible heat ratio for current time step depending on the secondary zone air node wet-bulb temperature and the heating DX coil entering air dry-bulb temperature. This is an optional input field. If this input field is left blank, then the nominal sensible heat ratio modifier curve value for temperature is set to 1.0.";
		public static string Field_SensibleHeatRatioModifierFunctionOfTemperatureCurveName => Value._Field_SensibleHeatRatioModifierFunctionOfTemperatureCurveName;

		private string _Field_SensibleHeatRatioModifierFunctionOfFlowFractionCurveName = @"This input field is name of sensible heat ratio modifier curve as function of secondary air flow fraction. The value of this curve modifies the nominal sensible heat ratio for current time step depending on the secondary coil air flow fraction. This is an optional input field. If this input field is left blank, then the sensible heat ratio modifier curve value for flow fraction is set to 1.0.

Following is an example input for the object.



Coil:Heating:DX:SingleSpeed,
  Heat Pump DX Heating Coil 1,     ! Name of heating coil
  FanAndCoilAvailSched,                   ! Heating coil schedule
  35000,                                                 ! Gross Rated Heating Capacity
  2.75,                                                   ! Gross Rated Heating COP
  1.7,                                                     !rated air flow rate (m3/s)
  ,                                                       !rated evaporator fan power per volume flow rate (m3/s)
  Heating Coil Air Inlet Node,     !heating coil air side inlet node
  SuppHeating Coil Air Inlet Node, !Heating coil air side outlet node
  HPACHeatCapFT,     ! heating cap modifier curve (temperature, C)
  HPACHeatCapFFF,   ! heating cap modifier curve (flow fraction)
  HPACHeatEIRFT,     ! energy input ratio modifier curve (temperature, C)
  HPACHeatEIRFFF,   ! energy input ratio modifier curve (flow fraction)
  HPACCOOLPLFFPLR, ! part load fraction modifier curve (function of part load ratio)
  ,                 ! defrost EIR modifier curve (temp, C) not required for resistive defrost
  -5.0,                       ! minimum OAT for compressor operation   (C)
  ,                               ! outdoor dry-bulb temperature to turn on compressor   (C)
  5.0,                         ! maximum outdoor dry-bulb temp for defrost operation (C)
  200.0,                     ! Crankcase heater capacity (W)
  10.0,                       ! Maximum outdoor temp for crankcase heater operation (C)
  Resistive,             ! Defrost strategy (resistive or reverse-cycle)
  Timed,                     ! Defrost control (timed or on-demand)
  0.166667,             ! Defrost time period fraction (used for timed defrost control only)
  20000;! Resistive defrost heater capacity (used for resistive defrost strategy only)";
		public static string Field_SensibleHeatRatioModifierFunctionOfFlowFractionCurveName => Value._Field_SensibleHeatRatioModifierFunctionOfFlowFractionCurveName;

	

}

	public sealed class CoilHeatingDXMultiSpeed
    { 

		private string _name = @"Coil:Heating:DX:MultiSpeed";
		private string _note = @"This component models a DX heating unit with multiple discrete levels of heating capacity. Currently, this heating coil can only be referenced by a AirLoopHVAC:UnitaryHeatPump:AirToAir:MultiSpeed compound object. The multispeed DX heating coil can have from two to four operating speeds. When the coil operates at Speed 1 (the lowest speed), its performance is very similar to the Coil:Heating:DX:SingleSpeed object where the impacts of part-load ratio can be included. When the coil operates at higher speeds (above Speed 1), the linear approximation methodology is applied. The coil outputs at two consecutive speeds are linearly interpolated to meet the required heating capacity during an HVAC system timestep. When the coil performs above the lowest speed, the user can choose if they want to include part-load ratio impacts at the higher speeds.

The multispeed unit is described by specifying the performance at different operating speeds. Each speed has its own set of input specifications: full load capacity, COP and air flow rate at rated conditions, along with modifier curves to determine performance when actual operating conditions are different from the rated conditions.

The coil operates to meet the sensible capacity being requested. When this requested capacity is above the sensible capacity of the highest operating speed, the coil runs continuously at the highest speed. When the requested capacity is between the sensible capacities of two consecutive speeds, the unit will operate a portion of the time at each speed to meet the request. When the requested capacity is less than the low speed (Speed 1) capacity, the unit will cycle on/off as needed.

The next input defines the minimum outdoor dry-bulb temperature where the compressor will operate. The followed two inputs are related to crankcase heater operation: capacity and maximum outdoor dry-bulb temperature for crankcase heater operation. The next six inputs cover defrost operation: defrost EIR modifier curve, the maximum outdoor dry-bulb temperature for defrost operation, the type of defrost strategy (reverse-cycle or resistive), defrost control (timed or on-demand), the fractional defrost time period (timed defrost control only), and the resistive defrost heater capacity if a resistive defrost strategy is selected. The activation of defrost is dependent on outdoor conditions. The capacity reduction and energy use modification are independent of speed. The defrost EIR modifier is described below:

The defrost energy input ratio (EIR) modifier curve (function of temperature) is a bi-quadratic curve with two independent variables: the heating coil entering air wet-bulb temperature (variable x) and the outdoor air dry-bulb temperature (variable y). The output of this curve is multiplied by the heating coil capacity, the fractional defrost time period and the runtime fraction of the heating coil to give the defrost power at the specific temperatures at which the coil is operating. This curve is only required when a reverse-cycle defrost strategy is specified.

The next input allows the user to choose whether to apply the part load fraction correlation to speeds greater than 1 or not. The following input is the type of fuel.

Then the number of speed for heating is entered. The rest of inputs are speed dependent. Each set of data consists of gross rated heating capacity, gross rated COP, and the rated air volume flow rate. These three inputs determine the coil performance at the rating point (outdoor air dry-bulb temperature of 8.33 ??C, outdoor air wet-bulb temperature of 6.11 ??C, coil entering air dry-bulb temperature of 21.11 ??C, coil entering air wet-bulb temperature of 15.55 ??C). The rated air volume flow rate should be between .00004027 m^{3}/s and .00006041 m^{3}/s per watt of gross rated heating capacity. The rated waste heat fraction is needed to calculate how much waste heat is available at the rated conditions. In addition, up to 6 modifier curves are required per speed.




  The heating capacity modifier curve (function of temperature) can be a function of both the outdoor and indoor air dry-bulb temperature or only the outdoor air dry-bulb temperature. User has the choice of a bi-quadratic curve with two independent variables or a quadratic curve as well as a cubic curve with a single independent variable. The curve is normalized to 1 at 8.33 outdoor dry-bulb temperature and if a biquadratic curve is used also at 21.11 C indoor dry-bulb temperature. The bi-quadratic curve is recommended if sufficient manufacturer data is available as it provides sensitivity to the indoor air dry-bulb temperature and a more realistic output. The output of this curve is multiplied by the gross rated heating capacity to give the gross total heating capacity at specific temperature operating conditions (i.e., at an outdoor or indoor air temperature different from the rating point temperature).

  The heating capacity modifier curve (function of flow fraction) is a quadratic or cubic curve with the independent variable being the ratio of the actual air flow rate across the heating coil to the rated air flow rate (i.e., fraction of full load flow). The curve is normalized to have the value of 1.0 when the actual air flow rate equals the rated air flow rate. The output of this curve is multiplied by the gross rated heating capacity and the heating capacity modifier curve (function of temperature) to give the gross heating capacity at the specific temperature and air flow conditions at which the coil is operating.

  The energy input ratio (EIR) modifier curve (function of temperature) can be a function of both the outdoor and indoor air dry-bulb temperature or only the outdoor air dry-bulb temperature. User has the choice of a bi-quadratic curve with two independent variables or a quadratic curve as well as a cubic curve with a single independent variable. The curve is normalized to 1 at 8.33 outdoor dry-bulb temperature and if a biquadratic curve is used also at 21.11 C indoor dry-bulb temperature. The bi-quadratic curve is recommended if sufficient manufacturer data is available as it provides sensitivity to the indoor air dry-bulb temperature and a more realistic output. The output of this curve is multiplied by the rated EIR (inverse of the rated COP) to give the EIR at specific temperature operating conditions (i.e., at an outdoor or indoor air temperature different from the rating point temperature).

  The energy input ratio (EIR) modifier curve (function of flow fraction) is a quadratic or cubic curve with the independent variable being the ratio of the actual air flow rate across the heating coil to the rated air flow rate (i.e., fraction of full load flow). The curve is normalized to have the value of 1.0 when the actual air flow rate equals the rated air flow rate. The output of this curve is multiplied by the rated EIR (inverse of the rated COP) and the EIR modifier curve (function of temperature) to give the EIR at the specific temperature and air flow conditions at which the coil is operating.

  The part load fraction correlation (function of part load ratio) is a quadratic or cubic curve with the independent variable being part load ratio (sensible heating load / steady-state heating capacity). The output of this curve is used in combination with the rated EIR and EIR modifier curves to give the effective EIR for a given simulation timestep. The part load fraction correlation accounts for efficiency losses due to compressor cycling.

  The waste heat modifier curve (function of temperature) is a bi-quadratic curve with two independent variables: outdoor air dry-bulb temperature and the heating coil entering air dry-bulb temperature. The output of this curve is multiplied by the heating input energy, the waste heat fraction of heat input to give the recoverable waste heat.


The curves are simply specified by name. Curve inputs are described in the curve manager section of this document (ref. Performance Curves).
";
		

		private static readonly System.Lazy<CoilHeatingDXMultiSpeed> instance = new System.Lazy<CoilHeatingDXMultiSpeed>(() => new CoilHeatingDXMultiSpeed());
        private static CoilHeatingDXMultiSpeed Value => instance.Value;
		public static string Name => Value._name;
        public static string Note => Value._note;
		private CoilHeatingDXMultiSpeed(){}

	private string _Field_Name = @"This alpha field defines a unique user-assigned name for an instance of a multispeed DX heating coil. Any reference to this DX heating coil by another object will use this name. The only allowed parent is AirLoopHVAC:UnitaryHeatPump:AirToAir:MultiSpeed.";
		public static string Field_Name => Value._Field_Name;

		private string _Field_AvailabilityScheduleName = @"This alpha field defines the name of the schedule (ref: Schedule) that denotes whether the multispeed DX heating coil can run during a given time period. A schedule value greater than 0 (usually 1 is used) indicates that the unit can be on during the time period. A value less than or equal to 0 (usually 0 is used) denotes that the unit must be off for the time period. If this field is blank, the schedule has values of 1 for all time periods.";
		public static string Field_AvailabilityScheduleName => Value._Field_AvailabilityScheduleName;

		private string _Field_AirInletNodeName = @"This alpha field defines the name of the HVAC system node from which the DX heating coil draws its inlet air.";
		public static string Field_AirInletNodeName => Value._Field_AirInletNodeName;

		private string _Field_AirOutletNodeName = @"This alpha field defines the name of the HVAC system node to which the DX heating coil sends its outlet air.";
		public static string Field_AirOutletNodeName => Value._Field_AirOutletNodeName;

		private string _Field_MinimumOutdoorDryBulbTemperatureForCompressorOperation = @"This numeric field defines the minimum outdoor air dry-bulb temperature where the heating coil compressor turns off. If this input field is left blank, the default value is -8 ??C.";
		public static string Field_MinimumOutdoorDryBulbTemperatureForCompressorOperation => Value._Field_MinimumOutdoorDryBulbTemperatureForCompressorOperation;

		private string _Field_CrankcaseHeaterCapacity = @"This numeric field defines the crankcase heater capacity in Watts. When the outdoor air dry-bulb temperature is below the value specified in the input field Maximum Outdoor Dry-bulb Temperature for Crankcase Heater Operation (described below), the crankcase heater is enabled during the time that the compressor is not running. The value for this input field must be greater than or equal to 0. If this input field is left blank, the default value is 0. To simulate a unit without a crankcase heater, enter a value of 0.";
		public static string Field_CrankcaseHeaterCapacity => Value._Field_CrankcaseHeaterCapacity;

		private string _Field_MaximumOutdoorDryBulbTemperatureForCrankcaseHeaterOperation = @"This numeric field defines the outdoor air dry-bulb temperature above which the compressor s crankcase heater is disabled. The value for this input field must be greater than or equal to 0.0 ??C. If this input field is left blank, the default value is 10 ??C.";
		public static string Field_MaximumOutdoorDryBulbTemperatureForCrankcaseHeaterOperation => Value._Field_MaximumOutdoorDryBulbTemperatureForCrankcaseHeaterOperation;

		private string _Field_DefrostEnergyInputRatioFunctionOfTemperatureCurveName = @"This alpha field defines the name of a bi-quadratic performance curve (ref: Performance Curves) that parameterizes the variation of the energy input ratio (EIR) during reverse-cycle defrost periods as a function of the wet-bulb temperature of the air entering the indoor coil (variable x) and the outdoor air dry-bulb temperature (variable y). The EIR is the inverse of the COP. The output of this curve is multiplied by the coil capacity, the fractional defrost time period and the runtime fraction of the heating coil to give the defrost power at the specific temperatures at which the indoor and outdoor coils are operating. This curve is only required when a reverse-cycle defrost strategy is selected. The curve is normalized to a value of 1.0 at the rating point conditions.";
		public static string Field_DefrostEnergyInputRatioFunctionOfTemperatureCurveName => Value._Field_DefrostEnergyInputRatioFunctionOfTemperatureCurveName;

		private string _Field_MaximumOutdoorDryBulbTemperatureForDefrostOperation = @"This numeric field defines the outdoor air dry-bulb temperature above which outdoor coil defrosting is disabled. The temperature for this input field must be greater than or equal to 0 ??C and less than or equal to 7.22 ??C. If this input field is left blank, the default value is 5 ??C.";
		public static string Field_MaximumOutdoorDryBulbTemperatureForDefrostOperation => Value._Field_MaximumOutdoorDryBulbTemperatureForDefrostOperation;

		private string _Field_DefrostStrategy = @"This alpha field has two choices: reverse-cycle or resistive. If the reverse-cycle strategy is selected, the heating cycle is reversed periodically to provide heat to melt frost accumulated on the outdoor coil. If a resistive defrost strategy is selected, the frost is melted using an electric resistance heater. If this input field is left blank, the default defrost strategy is reverse-cycle.";
		public static string Field_DefrostStrategy => Value._Field_DefrostStrategy;

		private string _Field_DefrostControl = @"This alpha field has two choices: timed or on-demand. If timed control is selected, the defrost time period is calculated based on a fixed value or compressor runtime whether or not frost has actually accumulated. For timed defrost control, the fractional amount of time the unit is in defrost is entered in the input field Defrost Time Period Fraction described below. If on-demand defrost control is selected, the defrost time period is calculated based on outdoor weather (humidity ratio) conditions. Regardless of which defrost control is selected, defrost does not occur above the user specified outdoor temperature entered in the input field Maximum Outdoor Dry-bulb Temperature for Defrost Operation described above. If this input field is left blank, the default defrost control is timed.";
		public static string Field_DefrostControl => Value._Field_DefrostControl;

		private string _Field_DefrostTimePeriodFraction = @"This numeric field defines the fraction of compressor runtime when the defrost cycle is active, and only applies to timed defrost (see Defrost Control input field above). For example, if the defrost cycle is active for 3.5 minutes for every 60 minutes of compressor runtime, then the user should enter 3.5/60 = 0.058333. The value for this input field must be greater than or equal to 0. If this input field is left blank, the default value is 0.058333.";
		public static string Field_DefrostTimePeriodFraction => Value._Field_DefrostTimePeriodFraction;

		private string _Field_ResistiveDefrostHeaterCapacity = @"This numeric field defines the capacity of the resistive defrost heating element in Watts. This input field is used only when the selected defrost strategy is resistive (see input field Defrost Strategy above). The value for this input field must be greater than or equal to 0. If this input field is left blank, the default value is 0.";
		public static string Field_ResistiveDefrostHeaterCapacity => Value._Field_ResistiveDefrostHeaterCapacity;

		private string _Field_ApplyPartLoadFractionToSpeedsGreaterThan1 = @"This field determines whether part-load impacts on coil energy use are applied when the coil is operating at speeds greater than speed 1. The allowed choices are Yes or No, with the default being No if this field is left blank. Other input fields in this object allow the user to specify a part-load fraction correlation for each speed to account for compressor start up losses (cycle on/off). For the case of a single multi-speed compressor, the part load losses may only be significant when the compressor cycles between speed 1 and off, but the losses may be extremely small when the compressor operates between speed 1 and speed 2 (or between speeds 2 and 3, etc.). In this case, the user may chose to specify {No} for this input field to neglect part-load impacts on energy use at higher operating speeds. If part-load impacts on coil energy use are thought to be significant (e.g., interwined cooling coil with multiple compressors feeding individual refrigerant circuits), then the user may chose to specify {Yes} and the part-load fraction correlations specified for speeds 2 through 4 will be applied as appropriate. The selection for this input field does not affect part-load impacts when the compressor cycles between speed 1 and off (i.e., the part-load fraction correlation for speed 1 is always applied).";
		public static string Field_ApplyPartLoadFractionToSpeedsGreaterThan1 => Value._Field_ApplyPartLoadFractionToSpeedsGreaterThan1;

		private string _Field_FuelType = @"This alpha field determines the type of fuel that the chiller uses. This field has seven choices: Electricity, NaturalGas, Propane, Coal, Diesel, Gasoline, FuelOil1, FuelOil2, OtherFuel1 and OtherFuel2. This is a required field with no default.";
		public static string Field_FuelType => Value._Field_FuelType;

		private string _Field_NumberOfSpeeds = @"This field specifies the number of sets of data being entered for rated specifications, performance curves, and waste heat specifications for each cooling speed. The rated specifications consist of gross rated capacity, gross rated COP, and rated air flow rate. The performance curves consist of a total capacity modifier curve as a function of temperature, total capacity modifier curve as a function of flow fraction, energy input ratio modifier curve as a function of temperature, energy input ratio modifier curve as a function of flow fraction, and part load fraction correlation as a function of part load ratio. The waste heat specifications include the fraction of energy input to the heating coil at the fully loaded and rated conditions, and a temperature modifier. The minimum number of speeds for heating is 2 and the maximum number is 4. The number of speeds should be the same as the number of speeds for heating defined in its parent object (AirLoopHVAC:UnitaryHeatPump:AirToAir:MultiSpeed). The first set of performance inputs is for Speed 1 and should be for low speed, and the last set of performance inputs should be for high speed. For example, if only three heating speeds are defined, the first set should be for low speed (Speed 1), the second set should be for medium speed (Speed 2), and the third set should be for high speed (Speed 3). In this example, any performance inputs for Speed 4 would be neglected (since this input field specifies that the coil only has three heating speeds).";
		public static string Field_NumberOfSpeeds => Value._Field_NumberOfSpeeds;

		private string _Field_GroupRatedSpecificationPerformanceCurvesAndWasteHeatData = @"The performance for each heating speed must be specified as shown below. All inputs for Speed 1 are required first, followed by the inputs for Speed 2, Speed 3 and Speed 4.";
		public static string Field_GroupRatedSpecificationPerformanceCurvesAndWasteHeatData => Value._Field_GroupRatedSpecificationPerformanceCurvesAndWasteHeatData;

		private string _Field_SpeedXGrossRatedHeatingCapacity = @"This numeric field defines the total, full load gross heating capacity in watts of the DX coil unit at rated conditions for Speed <x> operation (outdoor air dry-bulb temperature of 8.33 ??C, outdoor air wet-bulb temperature of 6.11 ??C, heating coil entering air dry-bulb temperature of 21.11 ??C, heating coil entering air wet-bulb temperature of 15.55 ??C, and a heating coil air flow rate defined by field Rated Air Flow Rate, Speed <x> below). The value entered here must be greater than 0. The gross heating capacity should not account for the effect of supply air fan heat.";
		public static string Field_SpeedXGrossRatedHeatingCapacity => Value._Field_SpeedXGrossRatedHeatingCapacity;

		private string _Field_SpeedXGrossRatedHeatingCOP = @"This numeric field defines the coefficient of performance (COP = gross heating capacity in watts divided by electrical power input in watts) of the DX heating coil unit at rated conditions for Speed <x> operation (outdoor air dry-bulb temperature of 8.33 ??C, outdoor air wet-bulb temperature of 6.11 ??C, coil entering air dry-bulb temperature of 21.11 ??C, coil entering air wet-bulb temperature of 15.55 ??C, and a heating coil air flow rate defined by field Speed <x> Rated Air Flow Rate below). The value entered here must be greater than 0. The input power includes power for the compressor(s) and outdoor fan(s) but does not include the power consumption of the indoor supply air fan. The gross heating capacity is the value entered above in the field Gross Rated Heating Capacity . The gross COP should NOT account for the supply air fan.";
		public static string Field_SpeedXGrossRatedHeatingCOP => Value._Field_SpeedXGrossRatedHeatingCOP;

		private string _Field_SpeedXRatedAirFlowRate = @"This numeric field defines the volume air flow rate, in m^{3} per second, across the DX heating coil at rated conditions for Speed <x> operation. The value entered here must be greater than 0. The rated air volume flow rate should be between 0.00004027 m^{3}/s and 0.00006041 m^{3}/s per watt of gross rated heating capacity. The gross rated heating capacity and gross rated COP should be performance information for the unit with outdoor air dry-bulb temperature of 8.33 ??C, outdoor air wet-bulb temperature of 6.11 ??C, heating coil entering air dry-bulb temperature of 21.11 ??C, heating coil entering air wet-bulb temperature of 15.55 ??C, and the rated air volume flow rate defined here.";
		public static string Field_SpeedXRatedAirFlowRate => Value._Field_SpeedXRatedAirFlowRate;

		private string _Field_SpeedXHeatingCapacityFunctionOfTemperatureCurveName = @"This alpha field defines the name of a bi-quadratic, quadratic or cubic performance curve for Speed <x> (ref: Performance Curves) that parameterizes the variation of the total heating capacity as a function of the both the indoor and outdoor air dry-bulb temperature or just the outdoor air dry-bulb temperature depending on the type of curve selected. The bi-quadratic curve is recommended if sufficient manufacturer data is available as it provides sensitivity to the indoor air dry-bulb temperature and a more realistic output. The output of this curve is multiplied by the gross rated heating capacity to give the gross total heating capacity at specific temperature operating conditions (i.e., at an indoor air dry-bulb temperature or outdoor air dry-bulb temperature different from the rating point temperature). The curve is normalized to have the value of 1.0 at the rating point.";
		public static string Field_SpeedXHeatingCapacityFunctionOfTemperatureCurveName => Value._Field_SpeedXHeatingCapacityFunctionOfTemperatureCurveName;

		private string _Field_SpeedXHeatingCapacityFunctionOfFlowFractionCurveName = @"This alpha field defines the name of a quadratic or cubic performance curve for Speed <x> (ref: Performance Curves) that parameterizes the variation of heating capacity as a function of the ratio of actual air flow rate across the heating coil to the rated air flow rate (i.e., fraction of full load flow). The output of this curve is multiplied by the gross rated heating capacity and the gross heating capacity modifier curve (function of temperature) to give the gross heating capacity at the specific temperature and air flow conditions at which the coil is operating. The curve is normalized to have the value of 1.0 when the actual air flow rate equals the rated air flow rate.";
		public static string Field_SpeedXHeatingCapacityFunctionOfFlowFractionCurveName => Value._Field_SpeedXHeatingCapacityFunctionOfFlowFractionCurveName;

		private string _Field_SpeedXEnergyInputRatioFunctionOfTemperatureCurveName = @"This alpha field defines the name of a bi-quadratic, quadratic or cubic performance curve for Speed <x> (ref: Performance Curves) that parameterizes the variation of the energy input ratio (EIR) as a function of the both the indoor and outdoor air dry-bulb temperature or just the outdoor air dry-bulb temperature depending on the type of curve selected. The bi-quadratic curve is recommended if sufficient manufacturer data is available as it provides sensitivity to the indoor air dry-bulb temperature and a more realistic output. The EIR is the inverse of the COP. The output of this curve is multiplied by the rated EIR (inverse of rated COP) to give the EIR at specific temperature operating conditions (i.e., at an indoor air dry-bulb temperature or outdoor air dry-bulb temperature different from the rating point temperature). The curve is normalized to have the value of 1.0 at the rating point.";
		public static string Field_SpeedXEnergyInputRatioFunctionOfTemperatureCurveName => Value._Field_SpeedXEnergyInputRatioFunctionOfTemperatureCurveName;

		private string _Field_SpeedXEnergyInputRatioFunctionOfFlowFractionCurveName = @"This alpha field defines the name of a quadratic or cubic performance curve for Speed <x> (ref: Performance Curves) that parameterizes the variation of the energy input ratio (EIR) as a function of the ratio of actual air flow rate across the heating coil to the rated air flow rate (i.e., fraction of full load flow). The EIR is the inverse of the COP. The output of this curve is multiplied by the rated EIR and the EIR modifier curve (function of temperature) to give the EIR at the specific temperature and air flow conditions at which the coil is operating. This curve is normalized to a value of 1.0 when the actual air flow rate equals the rated air flow rate.";
		public static string Field_SpeedXEnergyInputRatioFunctionOfFlowFractionCurveName => Value._Field_SpeedXEnergyInputRatioFunctionOfFlowFractionCurveName;

		private string _Field_SpeedXPartLoadFractionCorrelationCurveName = @"This alpha field defines the name of a quadratic or cubic performance curve for Speed <x> (Ref: Performance Curves) that parameterizes the variation of electrical power input to the DX unit as a function of the part load ratio (PLR, sensible cooling load/steady-state sensible cooling capacity). The product of the rated EIR and EIR modifier curves is divided by the output of this curve to give the effective EIR for a given simulation timestep. The part load fraction (PLF) correlation accounts for efficiency losses due to compressor cycling.

The part load fraction correlation should be normalized to a value of 1.0 when the part load ratio equals 1.0 (i.e., no efficiency losses when the compressor(s) run continuously for the simulation timestep). For PLR values between 0 and 1 (0 < = PLR < 1), the following rules apply:


       PLF > = 0.7     and     PLF > = PLR


If PLF < 0.7 a warning message is issued, the program resets the PLF value to 0.7, and the simulation proceeds. The runtime fraction of the coil is defined as PLR/PLF. If PLF < PLR, then a warning message is issued and the runtime fraction of the coil is limited to 1.0.

A typical part load fraction correlation for a conventional DX heating coil (Speed <x>) would be:


       PLF = 0.85 + 0.15(PLR)


If the user wishes to model no efficiency degradation due to compressor cycling, the part load fraction correlation should be defined as follows:


       PLF = 1.0 + 0.0(PLR)";
		public static string Field_SpeedXPartLoadFractionCorrelationCurveName => Value._Field_SpeedXPartLoadFractionCorrelationCurveName;

		private string _Field_SpeedXRatedWasteHeatFractionOfPowerInput = @"The fraction of heat input to heating that is available as recoverable waste heat at full load and rated conditions for Speed <x> operation.";
		public static string Field_SpeedXRatedWasteHeatFractionOfPowerInput => Value._Field_SpeedXRatedWasteHeatFractionOfPowerInput;

		private string _Field_SpeedXWasteHeatFunctionOfTemperatureCurveName = @"The name of a bi-quadratic performance curve (ref: Performance Curves) that parameterizes the variation of the waste heat recovery as a function of outdoor dry-bulb temperature and the entering coil dry-bulb temperature for Speed <x>. The output of this curve is multiplied by the rated recoverable waste heat at specific temperature operating conditions (i.e., at temperatures different from the rating point). The curve is normalized to a value of 1.0 at the rating point. When the fuel type is electricity, the field is either left blank or ignored by the program. When the fuel type is not electricity and the parent object AirLoopHVAC:UnitaryHeatPump:AirToAir:MultiSpeed does not require waste heat calculations, this field is ignored. If the field is blank, a warning will be issued and simulation continues. When the fuel type is not electricity and the parent object AirLoopHVAC:UnitaryHeatPump:AirToAir:MultiSpeed requires waste heat calculations, if this field is left blank, the program assumes a constant value of 1 to make simulation continue and a warning will be issued.";
		public static string Field_SpeedXWasteHeatFunctionOfTemperatureCurveName => Value._Field_SpeedXWasteHeatFunctionOfTemperatureCurveName;

		private string _Field_ZoneNameForEvaporatorPlacement = @"This input field is name of a conditioned or unconditioned zone where the secondary coil (evaporator) of a heat pump is installed. This is an optional input field specified only when user desires to extract heat from the zone via secondary coil. Heat extracted is modeled as internal gain. If the primary DX system is a heat pump, then the zone name should be the same as the zone name specified for placing the secondary cooling DX coil.";
		public static string Field_ZoneNameForEvaporatorPlacement => Value._Field_ZoneNameForEvaporatorPlacement;

		private string _Field_SpeedXSecondaryCoilAirFlowRate = @"This input value is the secondary coil (evaporator) air flow rate when the heat pump is working in heating mode or the secondary coil (condenser) air flow rate when the heat pump is working in cooling mode. This input field is auto-sizable.";
		public static string Field_SpeedXSecondaryCoilAirFlowRate => Value._Field_SpeedXSecondaryCoilAirFlowRate;

		private string _Field_SpeedXSecondaryCoilFanFlowScalingFactor = @"This input field is scaling factor for autosizing the secondary DX coil fan flow rate. The secondary air flow rate is determined by multiplying the primary DX coil rated air flow rate by the fan flow scaling factor. Default value is 1.25. If the secondary coil fan flow rate is not autosized, then the secondary coil fan flow scaling factor is set to 1.0.";
		public static string Field_SpeedXSecondaryCoilFanFlowScalingFactor => Value._Field_SpeedXSecondaryCoilFanFlowScalingFactor;

		private string _Field_SpeedXNominalSensibleHeatRatioOfSecondaryCoil = @"This input value is the nominal sensible heat ratio used to split the heat extracted by a secondary DX coil (evaporator) of a heat pump into sensible and latent components. This is an optional input field. If this input field is left blank, then pure sensible internal heat gain is assumed, i.e., sensible heat ratio of 1.0.";
		public static string Field_SpeedXNominalSensibleHeatRatioOfSecondaryCoil => Value._Field_SpeedXNominalSensibleHeatRatioOfSecondaryCoil;

		private string _Field_SpeedXSensibleHeatRatioModifierFunctionOfTemperatureCurveName = @"This input field is name of sensible heat ratio modifier biquadratic curve. The value of this curve modifies the nominal sensible heat ratio for current time step depending on the secondary zone air node wet-bulb temperature and the heating DX coil entering air dry-bulb temperature. This is an optional input field. If this input field is left blank, then the nominal sensible heat ratio modifier curve value for temperature is set to 1.0.";
		public static string Field_SpeedXSensibleHeatRatioModifierFunctionOfTemperatureCurveName => Value._Field_SpeedXSensibleHeatRatioModifierFunctionOfTemperatureCurveName;

		private string _Field_SpeedXSensibleHeatRatioModifierFunctionOfFlowFractionCurveName = @"This input field is name of sensible heat ratio modifier curve as function of secondary air flow fraction. The value of this curve modifies the nominal sensible heat ratio for current time step depending on the secondary coil air flow fraction. This is an optional input field. If this input field is left blank, then the sensible heat ratio modifier curve value for flow fraction is set to 1.0.

Following is an example input for a multi-speed heating DX coil.



COIL:Heating:DX:MultiSpeed,
  Heat Pump DX Heating Coil 1,   !- Name of heat pump heating coil
  FanAndCoilAvailSched,       !- Availability Schedule
  Heating Coil Air Inlet Node,   !- Coil Air Inlet Node
  SuppHeating Coil Air Inlet Node,   !- Coil Air Outlet Node
  -8.0,                                       !- Minimum Outdoor Dry-bulb Temperature for Compressor Operation {C}
  200.0,                                     !- Crankcase Heater Capacity {W}
  10.0,                                       !- Maximum Outdoor Dry-bulb Temperature for Crankcase Heater Operation {C}
  HPACDefrostCAPFT,               !- Defrost energy input ratio modifier curve (temperature)
  7.22,                                       !- Maximum Outdoor Dry-bulb Temperature for Defrost Operation
  reverse-cycle,                     !- Defrost Strategy
  timed,                                     !- Defrost Control
  0.058333,                               !- Defrost Time Period Fraction
  2000.0,                                   !- Resistive Defrost Heater Capacity {W}
  No,                                           !- Apply Part Load Fraction to Speeds greater than 1
  NaturalGas,                           !- Fuel type
  4,                                             !- Number of speeds
  7500,                                       !- Gross Rated Heating Capacity, Speed 1 {W}
  2.75,                                       !- Gross Rated Heating COP, Speed 1
  0.45,                                       !- Rated Air Flow Rate, Speed 1 {m3/s}
  HPACHeatCapFT Speed 1,     !- Heating Capacity Modifier Curve, Speed 1 (temperature)
  HPACHeatCapFF Speed 1,     !- Heating capacity modifier curve, Speed 1 (flow fraction)
  HPACHeatEIRFT Speed 1,     !- Energy input ratio modifier curve, Speed 1 (temperature)
  HPACHeatEIRFF Speed 1,     !- Energy input ratio modifier curve, Speed 1 (flow fraction)
  HPACHeatPLFFPLR Speed 1, !- Part load fraction correlation, Speed 1 (part load ratio)
  0.2,                                         !- Rated waste heat fraction of power input, Speed 1
  HAPCHeatWHFT Speed 1,       !- Waste heat modifier curve, Speed 1 (temperature)
  17500,                                     !- Gross Rated Heating Capacity, Speed 2 {W}
  2.75,                                       !- Gross Rated Heating COP, Speed 2
  0.85,                                       !- Rated Air Flow Rate, Speed 2 {m3/s}
  HPACHeatCapFT Speed 2,     !- Heating Capacity Modifier Curve, Speed 2 (temperature)
  HPACHeatCapFF Speed 2,     !- Heating capacity modifier curve, Speed 2 (flow fraction)
  HPACHeatEIRFT Speed 2,     !- Energy input ratio modifier curve, Speed 2 (temperature)
  HPACHeatEIRFF Speed 2,     !- Energy input ratio modifier curve, Speed 2 (flow fraction)
  HPACHeatPLFFPLR Speed 2, !- Part load fraction correlation, Speed 2 (part load ratio)
  0.2,                                         !- Rated waste heat fraction of power input, Speed 2
  HAPCHeatWHFT Speed 2,       !- Waste heat modifier curve, Speed 2 (temperature)
  25500,                                     !- Gross Rated Heating Capacity, Speed 3 {W}
  2.75,                                       !- Gross Rated Heating COP, Speed 3
  1.25,                                       !- Rated Air Flow Rate, Speed 3 {m3/s}
  HPACHeatCapFT Speed 3,     !- Heating Capacity Modifier Curve, Speed 3 (temperature)
  HPACHeatCapFF Speed 3,     !- Heating capacity modifier curve, Speed 3 (flow fraction)
  HPACHeatEIRFT Speed 3,     !- Energy input ratio modifier curve, Speed 3 (temperature)
  HPACHeatEIRFF Speed 3,     !- Energy input ratio modifier curve, Speed 3 (flow fraction)
  HPACHeatPLFFPLR Speed 3, !- Part load fraction correlation, Speed 3 (part load ratio)
  0.2,                                         !- Rated waste heat fraction of power input, Speed 3
  HAPCHeatWHFT Speed 3,       !- Waste heat modifier curve, Speed 3 (temperature)
  35500,                                     !- Gross Rated Heating Capacity, Speed 4 {W}
  2.75,                                       !- Gross Rated Heating COP, Speed 4
  1.75,                                       !- Rated Air Flow Rate, Speed 4 {m3/s}
  HPACHeatCapFT Speed 4,     !- Heating Capacity Modifier Curve, Speed 4 (temperature)
  HPACHeatCapFF Speed 4,     !- Heating capacity modifier curve, Speed 4 (flow fraction)
  HPACHeatEIRFT Speed 4,     !- Energy input ratio modifier curve, Speed 4 (temperature)
  HPACHeatEIRFF Speed 4,     !- Energy input ratio modifier curve, Speed 4 (flow fraction)
  HPACHeatPLFFPLR Speed 4, !- Part load fraction correlation, Speed 4 (part load ratio)
  0.2,                                         !- Rated waste heat fraction of power input, Speed 4
  HAPCHeatWHFT Speed 4;       !- Waste heat modifier curve, Speed 4 (temperature)";
		public static string Field_SpeedXSensibleHeatRatioModifierFunctionOfFlowFractionCurveName => Value._Field_SpeedXSensibleHeatRatioModifierFunctionOfFlowFractionCurveName;

	

}

	public sealed class CoilHeatingDXVariableSpeed
    { 

		private string _name = @"Coil:Heating:DX:VariableSpeed";
		private string _note = @"The Variable-Speed Air-to-Air Heating DX Coil is a collection of performance curves that represent the heating coil at various speed levels. The performance curves should be generated from the heat pump Reference Unit catalog data. This is an equation-fit model that resembles a black box with no usage of heat transfer equations. The number of speed levels can range from 1 to 10. The heating coil has two air side node connections. The user needs to specify a nominal speed level, at which the gross rated capacity and rated volumetric air flow rate are sized. The gross rated capacity and rated volumetric flow rate represent the real situation in the air loop, and are used to determine the flow rates at various speed levels in the parent objects, e.g.~AirLoopHVAC:UnitaryHeatPump:AirToAir, ZoneHVAC:PackagedTerminalHeatPump, etc. It shall be mentioned that the performance correction curves, i.e.~the temperature and flow fraction correction curves, should be normalized to the capacity and flow rate at each individual speed and at the rated operating conditions, similar to the performance curves used in the single-speed DX coil. On the other hand, the performance values at individual speed levels, e.g.~capacities, COPs and flow rates, should be given regarding a specific unit from the Reference Unit catalog data. In the following content, the statement started with Reference Unit means the actual Reference Unit catalog data. The rated conditions for obtaining the capacities and COPs are at indoor dry-bulb temperature of 21.1 ??C (70 ??F) and the source side entering air temperature of 8.3 ??C (47 ??F). Some equations are provided below to help explain the function of the various performance curves and data fields.
";
		

		private static readonly System.Lazy<CoilHeatingDXVariableSpeed> instance = new System.Lazy<CoilHeatingDXVariableSpeed>(() => new CoilHeatingDXVariableSpeed());
        private static CoilHeatingDXVariableSpeed Value => instance.Value;
		public static string Name => Value._name;
        public static string Note => Value._note;
		private CoilHeatingDXVariableSpeed(){}

	private string _Field_Name = @"This alpha field contains the identifying name for the variable speed heating coil.";
		public static string Field_Name => Value._Field_Name;

		private string _Field_AirInletNodeName = @"This alpha field contains the heating coil load side inlet node name.";
		public static string Field_AirInletNodeName => Value._Field_AirInletNodeName;

		private string _Field_AirOutletNodeName = @"This alpha field contains the heating coil load side outlet node name.";
		public static string Field_AirOutletNodeName => Value._Field_AirOutletNodeName;

		private string _Field_NumberOfSpeeds = @"This numeric field contains the maximum number of speed levels that the module uses. The number of speeds, for which the user input the performance data and curves, has to be equal to or higher than the maximum number. The performance inputs at higher speeds are ignored.";
		public static string Field_NumberOfSpeeds => Value._Field_NumberOfSpeeds;

		private string _Field_NominalSpeedLevel = @"This numeric field defines the nominal speed level, at which the rated capacity, rated air and volumetric flow rate are correlated.";
		public static string Field_NominalSpeedLevel => Value._Field_NominalSpeedLevel;

		private string _Field_GrossRatedHeatingCapacityAtSelectedNominalSpeedLevel = @"This numeric field contains the rated capacity at the nominal speed level. This field is autosizable. The gross rated heating capacity is used to determine a capacity scaling factor, as compared to the Reference Unit capacity at the nominal speed level.

\begin{equation}
\rm{CapacityScaleFactor} = \frac{{{\rm{Gross RatedTotalHeatingCapacity}}}}{{{\rm{ReferenceUnitCapacity}}@{\rm{NominalSpeedLevel}}}}
\end{equation}

And then, this scaling factor is used to determine capacities at rated conditions for other speed levels, as below,

\begin{equation}
  \begin{array}{l}
    \rm{Gross RatedCapacity} @ \rm{SpeedLevel} \left( \rm{x} \right) = \\
    \quad \quad \quad \rm{CapacityScaleFactor} \times \\
    \quad \quad \quad \rm{ReferenceUnitCapacity} @ \rm{SpeedLevel}(\rm{x})
  \end{array}
\end{equation}";
		public static string Field_GrossRatedHeatingCapacityAtSelectedNominalSpeedLevel => Value._Field_GrossRatedHeatingCapacityAtSelectedNominalSpeedLevel;

		private string _Field_RatedVolumetricAirFlowRate = @"This numeric field contains the rated volumetric air flow rate on the load side of the heat pump corresponding to the nominal speed level. This field is autosizable. The value is used to determine an internal scaling factor, and calculate the air flow rates in the parent objects. It is recommended that the ratio of the rated volumetric air flow rate to the rated capacity is the same as the unit performance from the Reference Unit data.

\begin{equation}
{\rm{AirFlowScaleFactor}} = \frac{{{\rm{RatedVolumetricAirFlowRate}}}}{{{\rm{ReferenceUnitVolAirFlowRate}}@{\rm{NominalSpeedLevel}} \times {\rm{CapacityScaleFactor}}}}
\end{equation}

And the volumetric air flow rates in the parent objects are calculated as below,

\begin{equation}
  \begin{array}{l}
    {\rm{LoopVolumetricAirFlowRate}}@{\rm{SpeedLevel}}\left( {\rm{x}} \right) = \\
    \quad \quad \quad {\rm{AirFlowScaleFactor}} \times \\
    \quad \quad \quad {\rm{ReferenceUnitVolAirFlowRate}}@{\rm{SpeedLevel}}({\rm{x}}) \times \\
    \quad {\kern 1pt} {\kern 1pt} \quad \quad {\rm{CapacityScaleFactor}}
  \end{array}
\end{equation}";
		public static string Field_RatedVolumetricAirFlowRate => Value._Field_RatedVolumetricAirFlowRate;

		private string _Field_PartLoadFractionCorrelationCurveName = @"This alpha field defines the name of a quadratic or cubic performance curve (Ref: Performance Curves) that parameterizes the variation of electrical power input to the unit as a function of the part load ratio (PLR, heating load/steady-state heating capacity for Speed 1), in the case that the unit operates under the lowest speed, i.e.~on/off. The product of the rated EIR and EIR modifier curves is divided by the output of this curve to give the effective EIR for a given simulation timestep for Speed 1. The part load fraction (PLF) correlation accounts for efficiency losses due to compressor cycling. The part load fraction correlation should be normalized to a value of 1.0 when the part load ratio equals 1.0 (i.e., no efficiency losses when the compressor(s) run continuously for the simulation timestep).";
		public static string Field_PartLoadFractionCorrelationCurveName => Value._Field_PartLoadFractionCorrelationCurveName;

		private string _Field_DefrostEnergyInputRatioFunctionOfTemperatureCurveName = @"This alpha field defines the name of a bi-quadratic performance curve (ref: Performance Curves) that parameterizes the variation of the energy input ratio (EIR) during reverse-cycle defrost periods as a function of the wet-bulb temperature of the air entering the indoor coil (variable x) and the outdoor air dry-bulb temperature (variable y). The EIR is the inverse of the COP. The output of this curve is multiplied by the coil capacity at the maximum speed level, the fractional defrost time period and the runtime fraction of the heating coil to give the defrost power at the specific temperatures at which the indoor and outdoor coils are operating. This curve is only required when a reverse cycle defrost strategy is selected. The curve is normalized to a value of 1.0 at the rating point conditions.";
		public static string Field_DefrostEnergyInputRatioFunctionOfTemperatureCurveName => Value._Field_DefrostEnergyInputRatioFunctionOfTemperatureCurveName;

		private string _Field_MinimumOutdoorDryBulbTemperatureForCompressorOperation = @"This numeric field defines the minimum outdoor air dry-bulb temperature where the heating coil compressor turns off. If this input field is left blank, the default value is -8 ??C.";
		public static string Field_MinimumOutdoorDryBulbTemperatureForCompressorOperation => Value._Field_MinimumOutdoorDryBulbTemperatureForCompressorOperation;

		private string _Field_OutdoorDryBulbTemperatureToTurnOnCompressor = @"This numeric field defines the outdoor temperature when the compressor is automatically turned back on following an automatic shut off because of low outdoor dry-bulb temperature. This field is only used for the calculation of HSPF. If this field is not provided, then outdoor bin temperature used in the HSPF calculation is always considered to be greater than this temperature and `Minimum Outdoor Dry-Bulb Temperature for Compressor Operation' field described above. This assumption is based on AHRI standard 210/240 (2008) and can introduce significant error in the final value of HSPF.";
		public static string Field_OutdoorDryBulbTemperatureToTurnOnCompressor => Value._Field_OutdoorDryBulbTemperatureToTurnOnCompressor;

		private string _Field_MaximumOutdoorDryBulbTemperatureForDefrostOperation = @"This numeric field defines the outdoor air dry-bulb temperature above which outdoor coil defrosting is disabled. The temperature for this input field must be greater than or equal to 0 ??C and less than or equal to 7.22 ??C. If this input field is left blank, the default value is 5 ??C.";
		public static string Field_MaximumOutdoorDryBulbTemperatureForDefrostOperation => Value._Field_MaximumOutdoorDryBulbTemperatureForDefrostOperation;

		private string _Field_CrankcaseHeaterCapacity = @"This numeric field defines the crankcase heater capacity in Watts. When the outdoor air drybulb temperature is below the value specified in the input field Maximum Outdoor Dry-bulb Temperature for Crankcase Heater Operation (described below), the crankcase heater is enabled during the time that the compressor is not running. The value for this input field must be greater than or equal to 0. If this input field is left blank, the default value is 0. To simulate a unit without a crankcase heater, enter a value of 0.";
		public static string Field_CrankcaseHeaterCapacity => Value._Field_CrankcaseHeaterCapacity;

		private string _Field_MaximumOutdoorDryBulbTemperatureForCrankcaseHeaterOperation = @"This numeric field defines the outdoor air dry-bulb temperature above which the compressor s crankcase heater is disabled. The value for this input field must be greater than or equal to 0.0 ??C. If this input field is left blank, the default value is 10 ??C.";
		public static string Field_MaximumOutdoorDryBulbTemperatureForCrankcaseHeaterOperation => Value._Field_MaximumOutdoorDryBulbTemperatureForCrankcaseHeaterOperation;

		private string _Field_DefrostStrategy = @"This alpha field has two choices: reverse-cycle or resistive. If the reverse-cycle strategy is selected, the heating cycle is reversed periodically to provide heat to melt frost accumulated on the outdoor coil. If a resistive defrost strategy is selected, the frost is melted using an electric resistance heater. If this input field is left blank, the default defrost strategy is reverse cycle.";
		public static string Field_DefrostStrategy => Value._Field_DefrostStrategy;

		private string _Field_DefrostControl = @"This alpha field has two choices: timed or on-demand. If timed control is selected, the defrost time period is calculated based on a fixed value or compressor runtime whether or not frost has actually accumulated. For timed defrost control, the fractional amount of time the unit is in defrost is entered in the input field Defrost Time Period Fraction described below. If on-demand defrost control is selected, the defrost time period is calculated based on outdoor weather (humidity ratio) conditions. Regardless of which defrost control is selected, defrost does not occur above the user specified outdoor temperature entered in the input field Maximum Outdoor Dry-bulb Temperature for Defrost Operation described above. If this input field is left blank, the default defrost control is timed.";
		public static string Field_DefrostControl => Value._Field_DefrostControl;

		private string _Field_DefrostTimePeriodFraction = @"This numeric field defines the fraction of compressor runtime when the defrost cycle is active, and only applies to timed defrost (see Defrost Control input field above). For example, if the defrost cycle is active for 3.5 minutes for every 60 minutes of compressor runtime, then the user should enter 3.5/60 = 0.058333. The value for this input field must be greater than or equal to 0. If this input field is left blank, the default value is 0.058333.";
		public static string Field_DefrostTimePeriodFraction => Value._Field_DefrostTimePeriodFraction;

		private string _Field_ResistiveDefrostHeaterCapacity = @"This numeric field defines the capacity of the resistive defrost heating element in Watts. This input field is used only when the selected defrost strategy is resistive (see input field Defrost Strategy above). The value for this input field must be greater than or equal to 0. If this input field is left blank, the default value is 0.";
		public static string Field_ResistiveDefrostHeaterCapacity => Value._Field_ResistiveDefrostHeaterCapacity;

		private string _Field_GroupRatedSpecificationAndPerformanceCurves = @"The performance for each heating speed must be specified as shown below. They should be directly given from the Reference Unit data. All inputs for Speed 1 are required, followed by the optional inputs for other speeds.";
		public static string Field_GroupRatedSpecificationAndPerformanceCurves => Value._Field_GroupRatedSpecificationAndPerformanceCurves;

		private string _Field_SpeedXReferenceUnitGrossRatedHeatingCapacity = @"This numeric field defines the total, full load gross heating capacity in watts of the air-to-air heating coil unit at rated conditions for Speed <x> operation. The value entered here must be greater than 0. The gross heating capacity should not account for the effects of supply air fan heat.";
		public static string Field_SpeedXReferenceUnitGrossRatedHeatingCapacity => Value._Field_SpeedXReferenceUnitGrossRatedHeatingCapacity;

		private string _Field_SpeedXReferenceUnitGrossRatedHeatingCOP = @"This numeric field defines the coefficient of performance (COP = gross heating capacityin watts divided by electrical power input in watts) of the heating coil unit at rated conditions for Speed <x> operation. The value entered here must be greater than 0. The input power includes power for the compressor(s), the outdoor coil fan and accessories, but does not include the power consumption of the indoor supply air fan. The gross COP should NOT account for the supply air fan.";
		public static string Field_SpeedXReferenceUnitGrossRatedHeatingCOP => Value._Field_SpeedXReferenceUnitGrossRatedHeatingCOP;

		private string _Field_SpeedXReferenceUnitRatedAirFlowRate = @"This numeric field defines the volume air flow rate, in m^{3} per second, across the heating coil at rated conditions for Speed <x> operation. The value entered here should be directly from the Reference Unit data, corresponding to the given gross rated heating capacity and gross rated heating COP at the speed, as above.";
		public static string Field_SpeedXReferenceUnitRatedAirFlowRate => Value._Field_SpeedXReferenceUnitRatedAirFlowRate;

		private string _Field_SpeedXHeatingCapacityFunctionOfTemperatureCurveName = @"This alpha field defines the name of a bi-quadratic performance curve for Speed <x> (ref: Performance Curves) that parameterizes the variation of the total heating capacity as a function of the indoor dry-bulb and source side entering air temperature, from the Reference Unit. The output of this curve is multiplied by the gross rated heating capacity at the speed to give the gross heating capacity at specific temperature operating conditions (i.e., at an indoor air dry-bulb temperature or entering air temperature different from the rating point temperature). It should be noted that the curve is normalized to the heating capacity at Speed<x> from the Reference Unit data, and have the value of 1.0 at the rating point.";
		public static string Field_SpeedXHeatingCapacityFunctionOfTemperatureCurveName => Value._Field_SpeedXHeatingCapacityFunctionOfTemperatureCurveName;

		private string _Field_SpeedXHeatingCapacityFunctionOfAirFlowFractionCurveName = @"This alpha field defines the name of a quadratic or cubic performance curve for Speed <x> (ref: Performance Curves) that parameterizes the variation of the gross heating capacity as a function of the ratio of actual air flow rate across the heating coil to the design air flow rate (i.e., fraction of full load flow), at Speed <x> from the Reference Unit data. The curve is normalized to have the value of 1.0 when the actual air flow rate equals the design air flow rate at Speed <x>.";
		public static string Field_SpeedXHeatingCapacityFunctionOfAirFlowFractionCurveName => Value._Field_SpeedXHeatingCapacityFunctionOfAirFlowFractionCurveName;

		private string _Field_SpeedXEnergyInputRatioFunctionOfTemperatureCurveName = @"This alpha field defines the name of a bi-quadratic performance curve for Speed <x> (ref: Performance Curves) that parameterizes the variation of the energy input ratio (EIR) as a function of the both the indoor air dry-bulb and entering air temperatures. The EIR is the inverse of the COP. The output of this curve is multiplied by the rated EIR (inverse of rated COP at Speed <x> from the Reference Unit data) to give the EIR at specific temperature operating conditions (i.e., at an indoor air dry bulb temperature or entering air temperature different from the rating point temperature). The curve is normalized to have the value of 1.0 at the rating point.";
		public static string Field_SpeedXEnergyInputRatioFunctionOfTemperatureCurveName => Value._Field_SpeedXEnergyInputRatioFunctionOfTemperatureCurveName;

		private string _Field_SpeedXEnergyInputRatioFunctionOfAirFlowFractionCurveName = @"This alpha field defines the name of a quadratic or cubic performance curve for Speed <x> (ref: Performance Curves) that parameterizes the variation of the energy input ratio (EIR) as a function of the ratio of actual air flow rate across the heating coil to the design air flow rate (i.e., fraction of full load flow, at Speed <x> from the Reference Unit data). The EIR is the inverse of the COP. This curve is normalized to a value of 1.0 when the actual air flow rate equals the design air flow rate.

An example of this statement in an IDF is:



Coil:Heating:DX:VariableSpeed,
  Heat Pump DX Heating Coil 1,         !- Name
  Heating Coil Air Inlet Node,         !- Air Inlet Node Name
  SuppHeating Coil Air Inlet Node,   !- Air Outlet Node Name
  10.0,                                     !- Number of Speeds {dimensionless}
  10.0,                                     !- Nominal Speed Level {dimensionless}
  35000,                                   !- Gross Rated Heating Capacity {W}
  1.7,                                         !- Rated Air Flow Rate {m3/s}
  HPACCOOLPLFFPLR,                 !- Part Load Fraction Correlation Curve Name
  ,                                               !- Defrost Energy Input Ratio Function of Temperature Curve Name
  -5.0,                                       !- Minimum Outdoor Dry-Bulb Temperature for Compressor Operation {C}
  ,                                               !- Outdoor Dry-Bulb Temperature to Turn Back On Compressor{C}
  5.0,                                         !- Maximum Outdoor Dry-Bulb Temperature for Defrost Operation {C}
  200.0,                                     !- Crankcase Heater Capacity {W}
  10.0,                                       !- Maximum Outdoor Dry-Bulb Temperature for Crankcase Heater Operation {C}
  Resistive,                             !- Defrost Strategy
  TIMED,                                     !- Defrost Control
  0.166667,                               !- Defrost Time Period Fraction
  20000,                                     !- Resistive Defrost Heater Capacity {W}
  1838.7,                                   !- Speed 1 Gross Rated Heating Capacity {w}
  5.0,                                         !- Speed 1 Gross Rated Heating COP {dimensionless}
  0.1661088,                             !- Speed 1 Rated Air Flow Rate {m3/s}
  HPACHeatCapFT,                     !- Heating Capacity Function of Temperature Curve Name
  HPACHeatCapFFF,                   !- Heating Capacity Function of Flow Fraction Curve Name
  HPACHeatEIRFT,                     !- Energy Input Ratio Function of Temperature Curve Name
  HPACHeatEIRFFF,                   !- Energy Input Ratio Function of Flow Fraction Curve Name
  2295.5,                                   !- Speed 2 Gross Rated Heating Capacity {w}
  5.0,                                         !- Speed 2 Gross Rated Heating COP {dimensionless}
  0.179322,                               !- Speed 2 Rated Air Flow Rate {m3/s}
  HPACHeatCapFT,                     !- Heating Capacity Function of Temperature Curve Name
  HPACHeatCapFFF,                   !- Heating Capacity Function of Flow Fraction Curve Name
  HPACHeatEIRFT,                     !- Energy Input Ratio Function of Temperature Curve Name
  HPACHeatEIRFFF,                   !- Energy Input Ratio Function of Flow Fraction Curve Name
  2751.3,                                   !- Speed 3 Gross Rated Heating Capacity {w}
  5.0,                                         !- Speed 3 Gross Rated Heating COP {dimensionless}
  0.1925352,                             !- Speed 3 Rated Air Flow Rate {m3/s}
  HPACHeatCapFT,                     !- Heating Capacity Function of Temperature Curve Name
  HPACHeatCapFFF,                   !- Heating Capacity Function of Flow Fraction Curve Name
  HPACHeatEIRFT,                     !- Energy Input Ratio Function of Temperature Curve Name
  HPACHeatEIRFFF,                   !- Energy Input Ratio Function of Flow Fraction Curve Name
  3659.6,                                   !- Speed 4 Gross Rated Heating Capacity {w}
  5.0,                                         !- Speed 4 Gross Rated Heating COP {dimensionless}
  0.2189616,                             !- Speed 4 Rated Air Flow Rate {m3/s}
  HPACHeatCapFT,                     !- Heating Capacity Function of Temperature Curve Name
  HPACHeatCapFFF,                   !- Heating Capacity Function of Flow Fraction Curve Name
  HPACHeatEIRFT,                     !- Energy Input Ratio Function of Temperature Curve Name
  HPACHeatEIRFFF,                   !- Energy Input Ratio Function of Flow Fraction Curve Name
  4563.7,                                   !- Speed 5 Gross Rated Heating Capacity {w}
  5.0,                                         !- Speed 5 Gross Rated Heating COP {dimensionless}
  0.245388,                               !- Speed 5 Rated Air Flow Rate {m3/s}
  HPACHeatCapFT,                     !- Total Heating Capacity Function of Temperature Curve Name
  HPACHeatCapFFF,                   !- Total Heating Capacity Function of Flow Fraction Curve Name
  HPACHeatEIRFT,                     !- Energy Input Ratio Function of Temperature Curve Name
  HPACHeatEIRFFF,                   !- Energy Input Ratio Function of Flow Fraction Curve Name
  5463.3,                                   !- Speed 6 Gross Rated Heating Capacity {w}
  5.0,                                         !- Speed 6 Gross Rated Heating COP {dimensionless}
  0.2718144,                             !- Speed 6 Rated Air Flow Rate {m3/s}
  HPACHeatCapFT,                     !- Heating Capacity Function of Temperature Curve Name
  HPACHeatCapFFF,                   !- Heating Capacity Function of Flow Fraction Curve Name
  HPACHeatEIRFT,                     !- Energy Input Ratio Function of Temperature Curve Name
  HPACHeatEIRFFF,                   !- Energy Input Ratio Function of Flow Fraction Curve Name
  6358.4,                                   !- Speed 7 Gross Rated Heating Capacity {w}
  5.0,                                         !- Speed 7 Gross Rated Heating COP {dimensionless}
  0.2982408,                             !- Speed 7 Rated Air Flow Rate {m3/s}
  HPACHeatCapFT,                     !- Heating Capacity Function of Temperature Curve Name
  HPACHeatCapFFF,                   !- Heating Capacity Function of Flow Fraction Curve Name
  HPACHeatEIRFT,                     !- Energy Input Ratio Function of Temperature Curve Name
  HPACHeatEIRFFF,                   !- Energy Input Ratio Function of Flow Fraction Curve Name
  7248.5,                                   !- Speed 8 Gross Rated Heating Capacity {w}
  5.0,                                         !- Speed 8 Gross Rated Heating COP {dimensionless}
  0.3246672,                             !- Speed 8 Rated Air Flow Rate {m3/s}
  HPACHeatCapFT,                     !- Heating Capacity Function of Temperature Curve Name
  HPACHeatCapFFF,                   !- Heating Capacity Function of Flow Fraction Curve Name
  HPACHeatEIRFT,                     !- Energy Input Ratio Function of Temperature Curve Name
  HPACHeatEIRFFF,                   !- Energy Input Ratio Function of Flow Fraction Curve Name
  8133.6,                                   !- Speed 9 Gross Rated Heating Capacity {w}
  5.0,                                         !- Speed 9 Gross Rated Heating COP {dimensionless}
  0.3510936,                             !- Speed 9 Rated Air Flow Rate {m3/s}
  HPACHeatCapFT,                     !- Heating Capacity Function of Temperature Curve Name
  HPACHeatCapFFF,                   !- Heating Capacity Function of Flow Fraction Curve Name
  HPACHeatEIRFT,                     !- Energy Input Ratio Function of Temperature Curve Name
  HPACHeatEIRFFF,                   !- Energy Input Ratio Function of Flow Fraction Curve Name
  9013.2,                                   !- Speed 10 Gross Rated Heating Capacity {w}
  5.0,                                         !- Speed 10 Gross Rated Heating COP {dimensionless}
  0.37752,                                 !- Speed 10 Rated Air Flow Rate {m3/s}
  HPACHeatCapFT,                     !- Heating Capacity Function of Temperature Curve Name
  HPACHeatCapFFF,                   !- Heating Capacity Function of Flow Fraction Curve Name
  HPACHeatEIRFT,                     !- Energy Input Ratio Function of Temperature Curve Name
  HPACHeatEIRFFF;                   !- Energy Input Ratio Function of Flow Fraction Curve Name";
		public static string Field_SpeedXEnergyInputRatioFunctionOfAirFlowFractionCurveName => Value._Field_SpeedXEnergyInputRatioFunctionOfAirFlowFractionCurveName;

	

}

	public sealed class CoilWaterHeatingDesuperheater
    { 

		private string _name = @"Coil:WaterHeating:Desuperheater";
		private string _note = @"A simplified approach is used to determine the performance of this water heating coil. The model assumes that the heating energy provided by this coil is reclaimed from the superheated refrigerant gas leaving a compressor (i.e., a desuperheating refrigerant-to-water heating coil) and does not impact the performance of the compressor. This coil must be used with a water heater tank (e.g., WaterHeater:Mixed) which can supply heated potable water and/or hot water for use in a plant loop (e.g., hydronic air reheat coils).

Except for detailed refrigeration system models, the amount of available superheat is simply a percentage of the total heat being rejected by the DX system's condenser. Approximately 25-30% of the energy rejected by typical refrigeration system condensers is to reduce the superheated refrigerant vapor temperature to the condensing temperature. Recovery efficiencies higher than 30% may cause the refrigerant gas to condense which in turn impacts the performance of the refrigeration system. For this reason, the maximum heat reclaim recovery efficiency for this coil is 30% for most sources of waste heat, including refrigeration compressor racks. The one exception to this 30% limit is a condenser that is part of a detailed refrigeration system. In a detailed refrigeration system, the portion of the rejected heat that lies within the superheated region is explicitly calculated. Therefore, the desuperheater coils supplied by a condenser attached to a detailed refrigeration system are subject to a maximum reclaim recovery efficiency of 90% of the heat within the superheated region.

The model includes the ability to modify the heat reclaim recovery efficiency based on variations in inlet water temperature and outdoor air dry-bulb temperature.

This coil model performs the following major functions:



  calculates the amount of heat delivered to the water tank

  calculates the electricity consumption of the integral water pump and on/off-cycle parasitic loads


The input fields for this object are described below in detail:
";
		

		private static readonly System.Lazy<CoilWaterHeatingDesuperheater> instance = new System.Lazy<CoilWaterHeatingDesuperheater>(() => new CoilWaterHeatingDesuperheater());
        private static CoilWaterHeatingDesuperheater Value => instance.Value;
		public static string Name => Value._name;
        public static string Note => Value._note;
		private CoilWaterHeatingDesuperheater(){}

	private string _Field_Name = @"This alpha field contains a unique user-assigned name for an instance of a desuperheater water heating coil. Any reference to this desuperheater coil by another object will use this name.";
		public static string Field_Name => Value._Field_Name;

		private string _Field_AvailabilityScheduleName = @"This alpha field contains the name of the schedule (ref: Schedule) that denotes whether the desuperheater coil is available to operate during a given time period. A schedule value equal to 0 denotes that the desuperheater coil is off for that time period. A value other than 0 denotes that the desuperheater coil is available to operate during that time period. During times when the desuperheater coil is scheduled off, the heater (element or burner) in the water tank object operates based on its tank set point temperature schedule and the desuperheater coil s parasitic electric power is also off for that time period. If this field is blank, the schedule has values of 1 for all time periods.";
		public static string Field_AvailabilityScheduleName => Value._Field_AvailabilityScheduleName;

		private string _Field_SetpointTemperatureScheduleName = @"This alpha field contains the name of the schedule (ref: Schedule) that specifies the set point (or cut-out ) temperature for the desuperheater coil. Temperature values used in this schedule should be in degrees Celsius. The desuperheater coil turns off when the tank water reaches this set point temperature. Once the desuperheater coil is off, the tank water temperature floats downward until it falls below the set point temperature minus the dead band temperature difference defined below (i.e., the cut-in temperature). At this point, the desuperheater coil turns on and remains on until the desuperheater coil set point temperature is reached.";
		public static string Field_SetpointTemperatureScheduleName => Value._Field_SetpointTemperatureScheduleName;

		private string _Field_DeadBandTemperatureDifference = @"This numeric field contains the dead band temperature difference in degrees Celsius. The desuperheater coil cut-in temperature is defined as the desuperheater coil set point temperature defined above minus this dead band temperature difference. The desuperheater coil turns on when the water temperature in the tank falls below the cut-in temperature. The desuperheater coil remains on until the water temperature in the tank rises above the desuperheater coil set point ( cut-out ) temperature defined above. The dead band temperature difference must be greater than 0 ??C and less than or equal to 20 ??C. If this field is left blank, the default value is 5 ??C.

Desuperheater water heating coils are typically used to offset energy consumption by the water tank s heater (element or burner). Therefore, the cut-in temperature for the desuperheater coil (set point minus dead band temperature difference) is usually higher than the set point temperature for the heater (element or burner) in the associated water heater tank object. At times when the water heater tank set point temperature is greater than the cut-in temperature of the desuperheater coil, the model disables the desuperheater coil and the tank s heater is used to heat the water.";
		public static string Field_DeadBandTemperatureDifference => Value._Field_DeadBandTemperatureDifference;

		private string _Field_RatedHeatReclaimRecoveryEfficiency = @"This numeric field defines the ratio of recovered waste heat from the superheated refrigerant gas to the total rejected waste heat from the heating source (as if no heat reclaim occurred). Input values must be greater than 0 up to a maximum value is 0.3 (with a defaults of 0.25) for most sources of waste heat, including refrigeration compressor racks. The one exception to this 0.3 limit is a source that is a condenser that is part of a detailed refrigeration system. In a detailed refrigeration system, the portion of the rejected heat that lies within the superheated region is explicitly calculated. Therefore, the desuperheater coils supplied by a condenser attached to a detailed refrigeration system are subject to a maximum reclaim recovery efficiency of 0.9. with a default value is 0.8.";
		public static string Field_RatedHeatReclaimRecoveryEfficiency => Value._Field_RatedHeatReclaimRecoveryEfficiency;

		private string _Field_RatedInletWaterTemperature = @"This numeric field defines the coil inlet water temperature, in degrees Celsius, that corresponds to the rated heat reclaim recovery efficiency. Also see field Heat Reclaim Efficiency Modifier Curve Name (function of temperature) below.";
		public static string Field_RatedInletWaterTemperature => Value._Field_RatedInletWaterTemperature;

		private string _Field_RatedOutdoorAirTemperature = @"This numeric field defines the outdoor air dry-bulb temperature, in degrees Celsius, that corresponds to the rated heat reclaim recovery efficiency. The outdoor air dry-bulb temperature impacts the desuperheater coil refrigerant temperature and the amount of heat available for reclaim. Also see field Heat Reclaim Efficiency Modifier Curve Name(function of temperature) below.";
		public static string Field_RatedOutdoorAirTemperature => Value._Field_RatedOutdoorAirTemperature;

		private string _Field_MaximumInletWaterTemperatureForHeatReclaim = @"This numeric field defines the maximum coil inlet water temperature in degrees Celsius. Any time the inlet water temperature to the desuperheater coil is above this maximum allowed temperature, heat reclaim is restricted so that the tank water does not exceed this temperature.";
		public static string Field_MaximumInletWaterTemperatureForHeatReclaim => Value._Field_MaximumInletWaterTemperatureForHeatReclaim;

		private string _Field_HeatReclaimEfficiencyFunctionOfTemperatureCurveName = @"This alpha field specifies the name of a bi-quadratic curve object (ref: Performance Curves) that defines the variation in heat reclaim efficiency as a function of inlet fluid (air and water) temperatures. The bi-quadratic curve uses the coil inlet water temperature and outdoor air dry-bulb temperature (entering the DX coil condenser) as the independent variables. The output of this curve is multiplied by the rated heat reclaim recovery efficiency to give the heat reclaim efficiency at specific operating conditions (i.e., at temperatures different from the rating point temperatures). The curve should be normalized to have the value of 1.0 at the rating point temperatures. If this field is left blank, the heat reclaim efficiency remains constant (curve value assumed to be 1.0 for all conditions). The model restricts the product of the output of this curve and the rated heat reclaim recovery efficiency to a maximum of 0.9 for refrigeration condenser sources and 0.3 for all other sources..";
		public static string Field_HeatReclaimEfficiencyFunctionOfTemperatureCurveName => Value._Field_HeatReclaimEfficiencyFunctionOfTemperatureCurveName;

		private string _Field_WaterInletNodeName = @"This alpha field defines the name of the water node from which the desuperheater heating coil draws its inlet water. This node name must also match the source side outlet node name for the water heater tank used with this coil (ref. Water Heaters).";
		public static string Field_WaterInletNodeName => Value._Field_WaterInletNodeName;

		private string _Field_WaterOutletNodeName = @"This alpha field defines the name of the water node to which the desuperheater heating coil sends its outlet water. This node name must also match the source side inlet node name for the water heater tank used with this coil (ref. Water Heaters).";
		public static string Field_WaterOutletNodeName => Value._Field_WaterOutletNodeName;

		private string _Field_TankObjectType = @"This alpha (choice) field contains the type of water heater tank used by this desuperheater heating coil. Currently, the only valid choice is WaterHeater:Mixed.";
		public static string Field_TankObjectType => Value._Field_TankObjectType;

		private string _Field_TankName = @"This alpha field contains the name of the specific water heater tank (WaterHeater:Mixed object) used by this desuperheater heating coil.";
		public static string Field_TankName => Value._Field_TankName;

		private string _Field_HeatingSourceObjectType = @"This alpha (choice) field defines the source of superheated refrigerant gas from which the desuperheater water heating coil recovers energy through heat reclaim. Valid choices are:

This alpha (choice) field defines the source of superheated refrigerant gas from which the desuperheater water heating coil recovers energy through heat reclaim. Valid choices are:



  Coil:Cooling:DX:SingleSpeed

  Coil:Cooling:DX:TwoSpeed

  Coil:Cooling:DX:TwoStageWithHumidityControlMode

  Coil:Cooling:DX:VariableSpeed

  Refrigeration:CompressorRack

  Refrigeration:Condenser:AirCooled

  Refrigeration:Condenser:EvaporativeCooled

  Refrigeration:Condenser:WaterCooled";
		public static string Field_HeatingSourceObjectType => Value._Field_HeatingSourceObjectType;

		private string _Field_HeatingSourceName = @"This alpha field defines the name of the desuperheater coil s heat source (e.g., the name of a specific coil of the type mentioned in the previous field which provides waste heat to this desuperheater water heating coil).";
		public static string Field_HeatingSourceName => Value._Field_HeatingSourceName;

		private string _Field_WaterFlowRate = @"This numeric field defines the desuperheater coil s water flow rate in cubic meters per second. The model assumes that this flow rate is constant (throughout the simulation period) when the desuperheater coil operates, and that it corresponds to the heat reclaim recovery efficiency performance specified by the user. This water flow rate must be greater than zero.";
		public static string Field_WaterFlowRate => Value._Field_WaterFlowRate;

		private string _Field_WaterPumpPower = @"This numeric field defines the coil s water circulation pump power in Watts. This is the operating pump power as installed. Values must be greater than or equal to 0. If this field is left blank, the default value is 0. A warning message will be issued if the ratio of water pump power to desuperheater water volumetric flow rate exceeds 7.9264E6 W/m^{3}/s, but the simulation will continue using the user-defined values. The model assumes that this integral pump (i.e., no need to define a separate pump object) cycles on and off with the desuperheater heating coil.";
		public static string Field_WaterPumpPower => Value._Field_WaterPumpPower;

		private string _Field_FractionOfPumpHeatToWater = @"This numeric field defines the fraction of water circulation pump heat that is transferred to the water. The pump is assumed to be downstream of the desuperheater water heating coil, and this field is used to determine the desuperheater water outlet temperature. Values must be greater than or equal to 0 and less than or equal to 1. If this field is left blank, the default value is 0.2.";
		public static string Field_FractionOfPumpHeatToWater => Value._Field_FractionOfPumpHeatToWater;

		private string _Field_OnCycleParasiticElectricLoad = @"This optional numeric field contains the on-cycle parasitic electric power in Watts. This is the parasitic electric power consumed by controls or other electrical devices associated with the desuperheater water heating coil. This parasitic electric load is consumed whenever the desuperheater coil is operating, and the model assumes that this parasitic power does not contribute to heating the water nor does it affect the zone air heat balance. The minimum value for this field is 0.0, and the default value is also 0.0 if this field is left blank.";
		public static string Field_OnCycleParasiticElectricLoad => Value._Field_OnCycleParasiticElectricLoad;

		private string _Field_OffCycleParasiticElectricLoad = @"This optional numeric field contains the off-cycle parasitic electric power in Watts. This is the parasitic electric power consumed by controls or other electrical devices associated with the desuperheater water heating coil. This parasitic electric load is consumed whenever the desuperheater coil is available but is not operating, and the model assumes that this parasitic power does not contribute to heating the water nor does it affect the zone air heat balance. The minimum value for this field is 0.0, and the default value is also 0.0 if this field is left blank.

Following is an example input for a desuperheater water heating coil.



Coil:WaterHeating:Desuperheater,
  WaterHeatingCoil,               !- Coil Name
  DesuperheaterSched,           !- Availability Schedule Name
  DesuperheaterTempSch,       !- Desuperheater Coil Set Point Temperature Schedule Name
  5.0,                                         !- Dead Band Temperature Difference {deltaC}
  0.25,                                       !- Rated Heat Reclaim Recovery Efficiency
  50.0,                                       !- Rated Inlet Water Temperature {C}
  35.0,                                       !- Rated Outdoor Air Temperature {C}
  60.0,                                       !- Maximum Inlet Water Temperature for Heat Reclaim {C}
  HEffFTemp,                             !- Heat Reclaim Efficiency Modifier Curve Name (function of temperature)
  WaterHeatingCoilInletNode,     !- Desuperheater Water Inlet Node Name
  WaterHeatingCoilOutletNode,   !- Desuperheater Water Outlet Node Name
  WaterHeater:Mixed,           !- Water Heater Tank Type
  WaterHeatingCoilTank,       !- Water Heater Tank Name
  Coil:Cooling:DX:SingleSpeed,   !- Heating Source Type
  Furnace ACDXCoil 1,           !- Heating Source Name
  0.0001,                                   !- Desuperheater Water Volumetric Flow Rate {m3/s}
  100.0,                                     !- Water Pump Power {W}
  0.2,                                         !- Fraction of Pump Heat to Water
  10.0,                                       !- On-Cycle Parasitic Electric Load {W}
  10.0;                                       !- Off-Cycle Parasitic Electric Load {W}";
		public static string Field_OffCycleParasiticElectricLoad => Value._Field_OffCycleParasiticElectricLoad;

	

}

	public sealed class CoilSystemCoolingDX
    { 

		private string _name = @"CoilSystem:Cooling:DX";
		private string _note = @"The CoilSystem:Cooling:DX object is a virtual container component that consists of a DX cooling coil component and its associated controls, as shown in the Figure below. This control object supports several different types of DX cooling coils (see field Cooling Coil Object Type).

This component may be used as a cooling coil in constant volume or variable volume systems, as blow through or draw through, with or without humidity controls. Unlike AirLoopHVAC:Unitary system types, this component controls only the DX coil, not the supply fan. CoilSystem:Cooling:DX is added to a system by placing it in an air loop branch (see Branch object) or in an AirLoopHVAC:OutdoorAirSystem:EquipmentList or in a ZoneHVAC:OutdoorAirUnit:EquipmentList . It requires one or more setpoint manager (see SetpointManager:*) objects to specify temperature and/or humidity setpoints (unless it is used in a ZoneHVAC:OutdoorAirUnit which has its own temperature setpoints). This object is the one that is listed in the Branch or equipment list object rather than the coil itself. A constant volume or variable volume fan is modeled separately from this cooling system. These are the only fan types allowed for this system type (ref. Fan:ConstantVolume and Fan:VariableVolume). Cycling fan operation is not available with this model. The CoilSystem:Cooling:DX object can also be placed on dedicated outdoor air system (DOAS) airloop branches or in arloop branches where the air flow to capacity ratio range is between 100 300 cfm/ton. 100% DOAS DX cooling coils operate in lower flow to capacity ratio range compared to regular DX cooling coils. The CoilSystem:Cooling:DX is selected to operate in DOAS application or in low flow to capacity ratio range by specifying YES to the input field Use Outdoor Air DX Cooling Coil . If this optional input field is left blank or specified as NO , then the coil is modeled as regular DX cooling coil. If the CoilSystem:Cooling:DX object is in an AirLoopHVAC:OutdoorAirSystem:EquipmentList or in a ZoneHVAC:OutdoorAirUnit:EquipmentList then it is treated as 100% DOAS DX cooling coil only if the choice input field Use Outdoor Air DX Cooling Coil is set too YES . All the control options of the regular DX cooling coils are available to DOAS DX coils as well. Heating DX coils in DOAS airloop operate at the same flow to capacity ratio limits as the DOAS DX cooling coils.

\begin{figure}[hbtp] % fig 138
\centering
\includegraphics[width=0.9\textwidth, height=0.9\textheight, keepaspectratio=true]{media/image368.png}
\caption{Schematic of CoilSystem:Cooling:DX Object in an Air Loop for a Blow Through Application \protect \label{fig:schematic-of-coilsystem-cooling-dx-object-in}}
\end{figure}
";
		

		private static readonly System.Lazy<CoilSystemCoolingDX> instance = new System.Lazy<CoilSystemCoolingDX>(() => new CoilSystemCoolingDX());
        private static CoilSystemCoolingDX Value => instance.Value;
		public static string Name => Value._name;
        public static string Note => Value._note;
		private CoilSystemCoolingDX(){}

	private string _Field_Name = @"This alpha field contains the identifying name for this component.";
		public static string Field_Name => Value._Field_Name;

		private string _Field_AvailabilityScheduleName = @"This alpha field contains the schedule name that contains information on the availability of the DX coil to operate. A schedule value of 0 indicates that the coil is off for that time period. A schedule value greater than 0 indicates that the coil can operate during the time period. If this field is blank, the schedule has values of 1 for all time periods.";
		public static string Field_AvailabilityScheduleName => Value._Field_AvailabilityScheduleName;

		private string _Field_DXCoolingCoilSystemInletNodeName = @"This alpha field contains the identifying name given to the DX cooling coil inlet node, as specified in the DX cooling coil object.";
		public static string Field_DXCoolingCoilSystemInletNodeName => Value._Field_DXCoolingCoilSystemInletNodeName;

		private string _Field_DXCoolingCoilSystemOutletNodeName = @"This alpha field contains the identifying name given to the DX cooling coil outlet node, as specified in the cooling coil object.";
		public static string Field_DXCoolingCoilSystemOutletNodeName => Value._Field_DXCoolingCoilSystemOutletNodeName;

		private string _Field_DXCoolingCoilSystemSensorNodeName = @"This alpha field contains the identifying name given to the DX cooling coil control node, this is the node at which the temperature set point is specified by the set point manager.";
		public static string Field_DXCoolingCoilSystemSensorNodeName => Value._Field_DXCoolingCoilSystemSensorNodeName;

		private string _Field_CoolingCoilObjectType = @"This alpha field specifies the type of DX cooling coil. The valid choices for this field are:



  Coil:Cooling:DX:SingleSpeed

  CoilSystem:Cooling:DX:HeatExchangerAssisted

  Coil:Cooling:DX:TwoSpeed

  Coil:Cooling:DX:TwoStageWithHumidityControlMode

  Coil:Cooling:DX:VariableSpeed

  Coil:Cooling:DX:SingleSpeed:ThermalStorage";
		public static string Field_CoolingCoilObjectType => Value._Field_CoolingCoilObjectType;

		private string _Field_CoolingCoilName = @"This alpha field contains the identifying name of the DX cooling coil.

As shown in the example below, correct specification of this system requires specification of the DX Cooling Coil object in addition to the CoilSystem:Cooling:DX object.";
		public static string Field_CoolingCoilName => Value._Field_CoolingCoilName;

		private string _Field_DehumidificationControlType = @"This alpha field contains the type of dehumidification control. The following options are valid for this field:

{None} - meet sensible load only, no active dehumidification control

{MultiMode} - activate enhanced dehumidification mode as needed and operate to meet the sensible load. If a sensible load exists, the system will operate to meet that sensible load and may not meet the latent load. If no sensible load exists, and Run on Latent Load = Yes, the system will operate to meet the entire latent load. This option is used to model DX equipment with a switchable option such as subcool reheat. It is valid only with Cooling coil type = Coil:Cooling:DX:TwoStageWithHumidityControlMode or CoilSystem:Cooling:DX:HeatExchangerAssisted. If the Run on Latent Load option below is set to Yes, this option may require the use of a heating coil and heating coil outlet air temperature set point manager downstream of this cooling coil to maintain the temperature set point.

{CoolReheat} - cool beyond the dry-bulb setpoint as required to meet the humidity setpoint. It is valid only with Cooling coil type = Coil:Cooling:DX:TwoStageWithHumidityControlMode. This option requires the use of a heating coil and heating coil outlet air temperature set point manager downstream of this cooling coil to maintain the temperature set point.

The default is {None}. For all dehumidification controls, the max humidity setpoint on the control node is used. This must be set using a {ZoneControl:Humidistat} {ZoneControl:Humidistat} and one of:



  {SetpointManager:SingleZone:Humidity:Maximum}

  {SetpointManager:MultiZone:Humidity:Maximum}

  {SetpointManager:MultiZone:MaximumHumidity:Average}


objects and {SetpointManager:OutdoorAirPretreat} (optional) objects. When extra dehumidification is required, the equipment may not be able to meet the humidity setpoint if its full capacity is not adequate.";
		public static string Field_DehumidificationControlType => Value._Field_DehumidificationControlType;

		private string _Field_RunOnSensibleLoad = @"This alpha field specifies if the unit will operate to meet a sensible load as determined by the inlet node dry-bulb temperature and the dry-bulb temperature setpoint on the control node. There are two valid choices, {Yes} or {No}. If {Yes}, unit will run if there is a sensible load. If {No}, unit will not run if there is only a sensible load. The default is {Yes}.";
		public static string Field_RunOnSensibleLoad => Value._Field_RunOnSensibleLoad;

		private string _Field_RunOnLatentLoad = @"This alpha field specifies if the unit will operate to meet a latent load as determined by the inlet node humidity ratio and the max humidity setpoint on the control node. There are two valid choices, {Yes} or {No}. If {Yes}, unit will run if there is a latent load. If both a sensible and latent load exist, the system will operate to maintain the temperature set point. When only a latent load exists, the system will operate to meet the humidity ratio set point and requires the use of a heating coil and heating coil outlet air temperature set point manager downstream of this cooling coil to maintain the temperature set point. If {No}, unit will not run if there is only a latent load. The default is {No}.";
		public static string Field_RunOnLatentLoad => Value._Field_RunOnLatentLoad;

		private string _Field_UseOutdoorAirDXCoolingCoil = @"This input field enables the Coil System DX Coil to be used for low air flow to capacity ratio range ( 100 300 cfm/ton). This flow to capacity ratio range is common in 100% dedicated outdoor air system (DOAS) applications. Other airloop or zone HVAC systems may use this input filed if they operate at such a low flow to capacity ratio range. There are two valid choices, {Yes} or {No}. If {Yes}, the DX cooling coil is forced to operate in this flow to capacity ratio range or runs as 100% DOAS DX coil. If {No}, DX coil is used as regular DX coil. This input field is optional.";
		public static string Field_UseOutdoorAirDXCoolingCoil => Value._Field_UseOutdoorAirDXCoolingCoil;

		private string _Field_OutdoorAirDXCoolingCoilLeavingMinimumAirTemperature = @"This input field is the DX cooling coil leaving supply air minimum temperature specified for frost control. The DX cooling coil leaving air temperature is not allowed to exceed this minimum coil leaving air temperature. The DX cooling coil frost controller adjusts or limits the desired coil outlet air setpoint temperature when the coil outlet temperature exceeds this minimum temperature limit specified. This input field is optional and only used along with in the input field above. The minimum and maximum values of this input field are 0.0 ??C and 7.2 ??C, and the default value is 2.0 ??C.

An example IDF specification:



CoilSystem:Cooling:DX,
  DX Cooling Coil System 1,!- Name
  CoolingCoilAvailSched,     !- Availability Schedule Name
  Cooling Coil Air Inlet Node,   !- DX Cooling Coil System Inlet Node Name
  Air Loop Outlet Node,       !- DX Cooling Coil System Outlet Node Name
  Air Loop Outlet Node,       !- DX Cooling Coil System Sensor Node Name
  Coil:Cooling:DX:SingleSpeed,   !- Cooling Coil Object Type
  ACDXCoil 1,                           !- Cooling Coil Name
  None,                                       !- Dehumidification Control Type
  Yes,                                         !- Run on Sensible Load
  No,                                           !- Run on Latent Load
  Yes,                                         !- Use DOAS DX Cooling Coil
  2.0;                                         !- DOAS DX Cooling Coil Leaving Minimum Air Temperature


  Coil:Cooling:DX:SingleSpeed,
  ACDXCoil 1,                           !- Name
  CoolingCoilAvailSched,     !- Availability Schedule Name
  25000,                                     !- Gross Rated Total Cooling Capacity {W}
  0.75,                                       !- Gross Rated Sensible Heat Ratio
  3.0,                                         !- Gross Rated Cooling COP
  1.3,                                         !- Rated Air Flow Rate {m3/s}
  Cooling Coil Air Inlet Node,   !- Air Inlet Node Name
  Air Loop Outlet Node,       !- Air Outlet Node Name
  WindACCoolCapFT,                 !- Total Cooling Capacity Function of Temperature Curve Name
  WindACCoolCapFFF,               !- Total Cooling Capacity Function of Flow Fraction Curve Name
  WindACEIRFT,                         !- Energy Input Ratio Function of Temperature Curve Name
  WindACEIRFFF,                       !- Energy Input Ratio Function of Flow Fraction Curve Name
  WindACPLFFPLR;                     !- Part Load Fraction Correlation Curve Name";
		public static string Field_OutdoorAirDXCoolingCoilLeavingMinimumAirTemperature => Value._Field_OutdoorAirDXCoolingCoilLeavingMinimumAirTemperature;

	

}

	public sealed class CoilSystemHeatingDX
    { 

		private string _name = @"CoilSystem:Heating:DX";
		private string _note = @"The CoilSystem:Heating:DX object is a virtual container component for a DX heating coil that provides the controls needed to operate the coil. Only single speed DX air-to-air heating coils are supported.

This component may be used as a heating coil in constant volume or variable volume air handlers. It can also be used in an outside air system (by including it in an AirLoopHVAC:OutdoorAirSystem:EquipmentList object)or in a zone outdoor air unit (by including it in an ZoneHVAC:OutdoorAirUnit:EquipmentList object). This object is the one that is listed in the Branch or equipment list object rather than the coil itself.

The inlet and outlet nodes for the DX heat pump system are defined in the heating coil object. The control node is always the outlet node of the coil. This DX heat pump heating system requires that a (drybulb) temperature setpoint be placed on the outlet node using either a setpoint manager or the energy management system. The coil is controlled to attempt to meet that setpoint using a part load ratio modeling approach.

This model only supports continuous fan and cycling compressor operation -- cycling fan modeling is not available with this model.
";
		

		private static readonly System.Lazy<CoilSystemHeatingDX> instance = new System.Lazy<CoilSystemHeatingDX>(() => new CoilSystemHeatingDX());
        private static CoilSystemHeatingDX Value => instance.Value;
		public static string Name => Value._name;
        public static string Note => Value._note;
		private CoilSystemHeatingDX(){}

	private string _Field_Name = @"This alpha field contains the identifying name for this component.";
		public static string Field_Name => Value._Field_Name;

		private string _Field_AvailabilityScheduleName = @"This alpha field contains the schedule name that contains information on the availability of the DX coil to operate. A schedule value of 0 indicates that the coil is off for that time period. A schedule value greater than 0 indicates that the coil can operate during the time period. If this field is blank, the schedule has values of 1 for all time periods.";
		public static string Field_AvailabilityScheduleName => Value._Field_AvailabilityScheduleName;

		private string _Field_HeatingCoilObjectType = @"This alpha field specifies the type of DX heating coil. This model currently supports only single speed DX heat pump heating coils and the only options for this field are Coil:Heating:DX:SingleSpeed and Coil:Heating:DX:VariableSpeed.";
		public static string Field_HeatingCoilObjectType => Value._Field_HeatingCoilObjectType;

		private string _Field_HeatingCoilName = @"This alpha field specifies the unique name of the DX heating coil. This field references the name of a Coil:Heating:DX:SingleSpeed that needs to be defined elsewhere in the input file.

An example of a DX heating coil system follows.



CoilSystem:Heating:DX,
  HeatPump DX Coil 1, !- Name
  FanAndCoilAvailSched , !- Availability Schedule Name
  Coil:Heating:DX:SingleSpeed,   !- Heating Coil Object Type
  Heat Pump DX Heating Coil 1;   !- Heating Coil Name


  Coil:Heating:DX:SingleSpeed,
  Heat Pump DX Heating Coil 1,   !- Name
  FanAndCoilAvailSched,       !- Availability Schedule Name
  autosize,                               !- Gross Rated Heating Capacity {W}
  2.75,                                       !- Gross Rated Heating COP {W/W}
  autosize,                               !- Rated Air Flow Rate {m3/s}
  Heating Coil Air Inlet Node,   !- Air Inlet Node Name
  SuppHeating Coil Air Inlet Node,   !- Air Outlet Node Name
  HPACHeatCapFT,                     !- Heating Capacity Function of Temperature Curve Name
  HPACHeatCapFFF,                   !- Heating Capacity Function of Flow Fraction Curve Name
  HPACHeatEIRFT,                     !- Energy Input Ratio Function of Temperature Curve Name
  HPACHeatEIRFFF,                   !- Energy Input Ratio Function of Flow Fraction Curve Name
  HPACCOOLPLFFPLR,                 !- Part Load Fraction Correlation Curve Name
  ,                                               !- Defrost Energy Input Ratio Function of Temperature Curve Name
  -8.0,                                       !- Minimum Outdoor Dry-Bulb Temperature for Compressor Operation {C}
  5.0,                                         !- Maximum Outdoor Dry-Bulb Temperature for Defrost Operation {C}
  200.0,                                     !- Crankcase Heater Capacity {W}
  10.0,                                       !- Maximum Outdoor Dry-Bulb Temperature for Crankcase Heater Operation {C}
  Resistive,                             !- Defrost Strategy
  TIMED,                                     !- Defrost Control
  0.166667,                               !- Defrost Time Period Fraction
  autosize,                               !- Resistive Defrost Heater Capacity {W}
  Heat Pump 1 Evaporator Node;";
		public static string Field_HeatingCoilName => Value._Field_HeatingCoilName;

	

}

	public sealed class CoilSystemCoolingDXHeatExchangerAssisted
    { 

		private string _name = @"CoilSystem:Cooling:DX:HeatExchangerAssisted";
		private string _note = @"The heat exchanger-assisted DX cooling coil is a virtual component consisting of a direct expansion (DX) cooling coil and an air-to-air heat exchanger as shown in Figure~\ref{fig:schematic-of-the-coilsystem-cooling-dx} below. The air-to-air heat exchanger pre-conditions the air entering the cooling coil, and reuses this energy to post-condition the supply air leaving the cooling coil. This heat exchange process improves the latent removal performance of the cooling coil by allowing it to dedicate more of its cooling capacity toward dehumidification (lower sensible heat ratio).

This compound object models the basic operation of an air-to-air heat exchanger in conjunction with a cooling coil. The heat exchanger-assisted DX cooling coil does not have an operating schedule of its own; its operating schedule is governed by the availability schedules for the DX cooling coil and the air-to-air heat exchanger. This compound object is used in place of where a DX cooling coil object would normally be used by itself.

To model a heat exchanger-assisted DX cooling coil, the input data file should include the following objects:



  CoilSystem:Cooling:DX:HeatExchangerAssisted object

  Air-to-air heat exchanger object (HeatExchanger:AirToAir:FlatPlate, HeatExchanger:AirToAir:SensibleAndLatent, or HeatExchanger:Desiccant:BalancedFlow)

  DX cooling coil object (Coil:Cooling:DX:SingleSpeed or Coil:Cooling:DX:VariableSpeed)


In terms of controlling the operation of the heat exchanger, the heat exchanger is assumed to always provide its heat transfer when the associated DX cooling coil is operating and no high humidity control mechanism is specified. However, the heat exchanger s energy transfer may be controlled (i.e., turned on and off) based on a zone air humidity level using either a humidistat (ref. AirLoopHVAC:Unitary:Furnace:HeatCool or AirLoopHVAC:UnitaryHeatCool) or a humidistat and a maximum humidity set point manager to place a humidity ratio set point on the appropriate control node (ref. CoilSystem:Cooling:DX). This model may also be used with the unitary changeover bypass system and the unitary air-to-air heat pump system (ref. AirLoopHVAC:UnitaryHeatCool:VAVChangeoverBypass and AirLoopHVAC:UnitaryHeatPump:AirToAir); however, the heat exchanger is assumed to always provide its heat transfer when the cooling coil operates and cannot be turned on and off based on a zone air humidity set point. Two zone air conditioners may also use this model for improved dehumidification. The first type is the packaged terminal heat pump (ref. ZoneHVAC:PackagedTerminalHeatPump) where the heat exchanger s heat transfer is always active whenever the cooling coil operates. The second type is the window air conditioner (ref. ZoneHVAC:WindowAirConditioner) where the heat exchanger s heat transfer is always active when the cooling coil operates and no high humidity control mechanism is specified, OR the heat exchanger s heat transfer may be controlled based on zone air humidity level if a humidistat and high humidity set point manager are specified (maximum humidity ratio set point placed on the heat exchanger s exhaust air outlet node, ref. Figure~\ref{fig:schematic-of-the-coilsystem-cooling-dx}).

Links to the cooling coil and air-to-air heat exchanger specifications are provided in the input data syntax for this compound object. A description of each input field for this compound object is provided below.

\begin{figure}[hbtp] % fig 139
\centering
\includegraphics[width=0.9\textwidth, height=0.9\textheight, keepaspectratio=true]{media/image369.png}
\caption{Schematic of the CoilSystem:Cooling:DX:HeatExchangerAssisted compound object \protect \label{fig:schematic-of-the-coilsystem-cooling-dx}}
\end{figure}

NOTE: Node naming shown in Figure~\ref{fig:schematic-of-the-coilsystem-cooling-dx} is representative for HeatExchanger:AirToAir:SensibleAndLatent. For HeatExchanger:AirToAir:FlatPlate, the exhaust air nodes are referred to as secondary air nodes. For HeatExchanger:Desiccant:BalancedFlow, the supply air nodes are referred to as regeneration air nodes and the exhaust air nodes as process air nodes.
";
		

		private static readonly System.Lazy<CoilSystemCoolingDXHeatExchangerAssisted> instance = new System.Lazy<CoilSystemCoolingDXHeatExchangerAssisted>(() => new CoilSystemCoolingDXHeatExchangerAssisted());
        private static CoilSystemCoolingDXHeatExchangerAssisted Value => instance.Value;
		public static string Name => Value._name;
        public static string Note => Value._note;
		private CoilSystemCoolingDXHeatExchangerAssisted(){}

	private string _Field_Name = @"A unique user-assigned name for the heat exchanger-assisted DX cooling coil. Any reference to this compound component by another object will use this name.";
		public static string Field_Name => Value._Field_Name;

		private string _Field_HeatExchangerObjectType = @"This alpha field denotes the type of heat exchanger being modeled. Valid choices are:



  HeatExchanger:AirToAir:FlatPlate

  HeatExchanger:AirToAir:SensibleAndLatent

  HeatExchanger:Desiccant:BalancedFlow";
		public static string Field_HeatExchangerObjectType => Value._Field_HeatExchangerObjectType;

		private string _Field_HeatExchangerName = @"This alpha field denotes the name of the air-to-air heat exchanger being modeled.";
		public static string Field_HeatExchangerName => Value._Field_HeatExchangerName;

		private string _Field_CoolingCoilObjectType = @"This alpha field denotes the type of DX cooling coil being modeled. The only valid choices are Coil:Cooling:DX:SingleSpeed or Coil:Cooling:DX:VariableSpeed.";
		public static string Field_CoolingCoilObjectType => Value._Field_CoolingCoilObjectType;

		private string _Field_CoolingCoilName = @"This alpha field denotes the name of the DX cooling coil being modeled.

Following is an example input for this compound object:



CoilSystem:Cooling:DX:HeatExchangerAssisted,
  HeatExchangerAssistedCoolingCoil,               ! Name of the heat exchanger assisted cooling coil
  HeatExchanger:AirToAir:SensibleAndLatent,       ! Heat exchanger type
  Air to Air Heat Exchanger 1,                    ! Heat exchanger name
  Coil:Cooling:DX:SingleSpeed,                    ! Cooling coil type
  DX Cooling Coil 1;                              ! Cooling coil name


  HeatExchanger:AirToAir:SensibleAndLatent,
  Air to Air Heat Exchanger 1,        !- Heat exchanger name
  FanAndCoilAvailSched,               !- Availability schedule name
  1.3,                                !- Nominal supply air flow rate {m3/s}
  .2,                                 !- Sensible effectiveness at 100% airflow heating condition
  .0,                                 !- Latent effectiveness at 100% airflow heating condition
  .23,                                !- Sensible effectiveness at 75% airflow heating condition
  .0,                                 !- Latent effectiveness at 75% airflow heating condition
  .2,                                 !- Sensible effectiveness at 100% airflow cooling condition
  .0,                                 !- Latent effectiveness at 100% airflow cooling condition
  .23,                                !- Sensible effectiveness at 75% airflow cooling condition
  .0,                                 !- Latent effectiveness at 75% airflow cooling condition
  HeatExchangerSupplyAirInletNode,    !- Supply air inlet node name
  DX Cooling Coil Air Inlet Node,     !- Supply air outlet node name
  HeatExchangerExhaustAirInletNode,   !- Exhaust air inlet node name
  HeatExchangerExhaustAirOutletNode,  !- Exhaust air outlet node name
  50.0,                               !- Nominal electric power {W}
  No,                                 !- Supply air outlet temperature control
  Rotary,                             !- Heat exchanger type
  None;                               !- Frost control type


  Coil:Cooling:DX:SingleSpeed,
  DX Cooling Coil 1,                  !- Coil Name
  FanAndCoilAvailSched,               !- Availability Schedule
  25000,                              !- Gross Rated Total Cooling Capacity {W}
  0.75,                               !- Gross Rated Sensible Heat Ratio
  3.0,                                !- Gross Rated Cooling COP
  1.3,                                !- Rated Air Flow Rate {m3/s}
  DX Cooling Coil Air Inlet Node,     !- Coil Air Inlet Node
  HeatExchangerExhaustAirInletNode,   !- Coil Air Outlet Node
  ACCoolCapFT,                  !- Total Cooling Capacity Modifier Curve (function of temperature)
  ACCoolCapFFF,                 !- Total Cooling Capacity Modifier Curve (function of flow fraction)
  ACEIRFT,                      !- Energy Input Ratio Modifier Curve (function of temperature)
  ACEIRFFF,                     !- Energy Input Ratio Modifier Curve (function of flow fraction)
  ACPLFFPLR;                    !- Part Load Fraction Correlation (function of part load ratio)";
		public static string Field_CoolingCoilName => Value._Field_CoolingCoilName;

	

}

	public sealed class CoilSystemIntegratedHeatPumpAirSource
    { 

		private string _name = @"CoilSystem:IntegratedHeatPump:AirSource";
		private string _note = @"CoilSystem:IntegratedHeatPump:AirSource is a collection of all the working modes in an air-source integrated heat pump, including space cooling (SC), space heating (SH), dedicated water heating (DWH), combined space cooling and water heating with full condensing(SCWH), combined space cooling and water heating with desuperheating (SCDWH), combined space heating and water heating with desuperheating (SHDWH). These working modes should also be referred to in other related air loop or water loop parent objects, for example, AirLoopHVAC:UnitarySystem and WaterHeater:HeatPump:PumpedCondenser, to represent the air side and water side node connections, and facilitate iterating the speed to match the space conditioning or water heating load. In addition, CoilSystem:IntegratedHeatPump:AirSource contains a series of criteria for selecting a working mode at the beginning of each timestep. 
";
		

		private static readonly System.Lazy<CoilSystemIntegratedHeatPumpAirSource> instance = new System.Lazy<CoilSystemIntegratedHeatPumpAirSource>(() => new CoilSystemIntegratedHeatPumpAirSource());
        private static CoilSystemIntegratedHeatPumpAirSource Value => instance.Value;
		public static string Name => Value._name;
        public static string Note => Value._note;
		private CoilSystemIntegratedHeatPumpAirSource(){}

	private string _Field_Name = @"This alpha field defines a unique user-assigned name for an instance of an air-source integrated heat pump.";
		public static string Field_Name => Value._Field_Name;

		private string _Field_SupplyWaterMonitoringNodeName = @"This alpha field defines a water side node to monitor the supply water amount after the water heating operation of the integrated heat pump is turned on.";
		public static string Field_SupplyWaterMonitoringNodeName => Value._Field_SupplyWaterMonitoringNodeName;

		private string _Field_SpaceCoolingModeCoilName = @"This alpha field defines the space cooling (SC) mode in an ASIHP, which must be given. The SC mode refers to the name of a Coil:Cooling:DX:VariableSpeed object, which contains all the performance curves and rated values to describe the space cooling operation.";
		public static string Field_SpaceCoolingModeCoilName => Value._Field_SpaceCoolingModeCoilName;

		private string _Field_SpaceHeatingModeCoilName = @"This alpha field defines the space heating (SH) mode in the ASIHP, which must be given. The SH mode refers to the name of a Coil:Heating:DX:VariableSpeed object, which contains all the performance curves and rated values to describe the space heating operation.";
		public static string Field_SpaceHeatingModeCoilName => Value._Field_SpaceHeatingModeCoilName;

		private string _Field_WaterHeatingModeCoilName = @"This alpha field defines the dedicated water heating (DWH) mode in the ASIHP, which must be given. The DWH mode refers to the name of a Coil:WaterHeating:AirToWaterHeatPump:VariableSpeed object, which contains all the performance curves and rated values to describe the water heating operation with outdoor air source.";
		public static string Field_WaterHeatingModeCoilName => Value._Field_WaterHeatingModeCoilName;

		private string _Field_SCWHModeCoilName = @"This alpha field defines the combined space cooling and water heating with full condensing (SCWH) in an ASIHP, which must be given. The SCWH mode refers to the name of a Coil:WaterHeating:AirToWaterHeatPump:VariableSpeed object, which contains all the performance curves and rated values to describe the water heating operation with an indoor air source. The SCWH mode is connected to the same WaterHeater:HeatPump:PumpedCondenser as the DWH mode, and the same air side node connections as the SC mode.";
		public static string Field_SCWHModeCoilName => Value._Field_SCWHModeCoilName;

		private string _Field_SCDWHModeCoolingCoilName = @"This alpha field defines the cooling operation in the combined space cooling and water heating with desuperheating (SCDWH) mode in an ASIHP, which must be given. These should be a different object from the SC mode. It should be noted that the rated power and power correction curves are contained in the Coil:Cooling:DX:VariableSpeed object. That means the power consumption at each speed level of the SCDWH mode is accounted for by the cooling coil part.";
		public static string Field_SCDWHModeCoolingCoilName => Value._Field_SCDWHModeCoolingCoilName;

		private string _Field_SCDWHModeWaterHeatingCoilName = @"This alpha field defines the water heating operation in the combined space cooling and water heating with desuperheating (SCDWH) mode in an ASIHP, which must be given. The power values and curves in the Coil:WaterHeating:AirToWaterHeatPump:VariableSpeed are not used. That means the power consumption at each speed level of the SCDWH mode is accounted for by the cooling coil part.";
		public static string Field_SCDWHModeWaterHeatingCoilName => Value._Field_SCDWHModeWaterHeatingCoilName;

		private string _Field_SHDWHModeHeatingCoilName = @"This alpha field defines the heating operation in the combined space heating and water heating with desuperheating (SHDWH) mode in an ASIHP, which must be given. This should be a different object from the SH mode. It should be noted that the rated power and power correction curves are contained in the Coil:Heating:DX:VariableSpeed object. That means the power consumption at each speed level of the SHDWH mode is accounted for by the cooling coil part.";
		public static string Field_SHDWHModeHeatingCoilName => Value._Field_SHDWHModeHeatingCoilName;

		private string _Field_SHDWHModeWaterHeatingCoilName = @"This alpha field defines the water heating operation in the combined space heating and water heating with desuperheating (SCDWH) mode in an ASIHP, which must be given. The power values and curves in the Coil:WaterHeating:AirToWaterHeatPump:VariableSpeed are not used. That means the power consumption at each speed level of the SHDWH mode is accounted for by the heating coil part.";
		public static string Field_SHDWHModeWaterHeatingCoilName => Value._Field_SHDWHModeWaterHeatingCoilName;

		private string _Field_SCWHModeMinimumIndoorTemperatureToAllowOvercooling = @"This numeric field defines an indoor air temperature [C] above which indoor overcooling is allowed in the cooling operation, i.e., allowing running the SCWH mode to cool down the indoor air below the thermostat setting temperature, and iterate the compressor speed to match the water heating load. It has to be noted that both the indoor temperature and ambient temperature lower bound settings have to be satisfied when allowing indoor overcooling by running the SCWH mode.";
		public static string Field_SCWHModeMinimumIndoorTemperatureToAllowOvercooling => Value._Field_SCWHModeMinimumIndoorTemperatureToAllowOvercooling;

		private string _Field_SCWHModeMinimumOutdoorTemperatureToAllowOvercooling = @"This numeric field defines an ambient air temperature above which indoor overcooling is allowed in the cooling operation, i.e., allowing running the SCWH mode to cool down the indoor air below the thermostat setting temperature, and iterate the compressor speed to match the water heating load. It has to be noted that both the indoor temperature and ambient temperature lower bound settings have to be satisfied when allowing overcooling the indoor by running the SCWH mode.";
		public static string Field_SCWHModeMinimumOutdoorTemperatureToAllowOvercooling => Value._Field_SCWHModeMinimumOutdoorTemperatureToAllowOvercooling;

		private string _Field_MinimumIndoorTemperatureToIgnoreSpaceHeatingCall = @"This numeric field defines an indoor air temperature [C] above which the water heating request has the higher priority and the space heating call can be ignored. The ASIHP will run the DWH mode to match the water heating load regardless of space heating call. It has to be noted that both the indoor temperature and ambient temperature lower bound settings have to be satisfied when a space heating call can be ignored.";
		public static string Field_MinimumIndoorTemperatureToIgnoreSpaceHeatingCall => Value._Field_MinimumIndoorTemperatureToIgnoreSpaceHeatingCall;

		private string _Field_MinimumOutdoorTemperatureToIgnoreSpaceHeatingCall = @"This numeric field defines an ambient air temperature [C] above which the water heating request has the higher priority and the space heating call can be ignored. The ASIHP will run the DWH mode to match the water heating load regardless of space heating call. It has to be noted that both the indoor temperature and ambient temperature lower bound settings have to be satisfied when a space heating call can be ignored.";
		public static string Field_MinimumOutdoorTemperatureToIgnoreSpaceHeatingCall => Value._Field_MinimumOutdoorTemperatureToIgnoreSpaceHeatingCall;

		private string _Field_SCWHModeLoadMatchingType = @"This choice field specifies the control in the SCWH mode. The choices are CoolingLoad or WaterHeatingLoad. During the SCWH operation when both the space cooling and water heating calls exist, if the field is CoolingLoad, it means that the compressor speed is iterated to match the space cooling load, and the water heating energy is a byproduct.  If this field is WaterHeatingLoad, it means that the speed is altered to match the water heating load, and the space cooling energy is a byproduct.";
		public static string Field_SCWHModeLoadMatchingType => Value._Field_SCWHModeLoadMatchingType;

		private string _Field_SCWHModeMinimumSpeed = @"This numeric field defines a minimum speed level for running the SCWH; i.e., the compressor speed will be altered between the minimum speed specified and top speed, responding to the simultaneous space cooling and water heating calls. If there is only a water heating call, this input will not be used.";
		public static string Field_SCWHModeMinimumSpeed => Value._Field_SCWHModeMinimumSpeed;

		private string _Field_SCDWHModeMaximumHeatedWaterVolBeforeSwitchingToSCWH = @"This numeric field defines an accumulative, heated water volume [m3] before switching from SCDWH to SCWH mode. When there are simultaneous space cooling and water heating calls, the ASIHP will run SCDWH first to satisfy a small water heating load. If the water volume heated by the heat pump goes beyond the limit, it means that the SCDWH, which uses a desuperheater, cannot provide enough capacity for the water heating request, and thus the SCWH mode will be turned on.";
		public static string Field_SCDWHModeMaximumHeatedWaterVolBeforeSwitchingToSCWH => Value._Field_SCDWHModeMaximumHeatedWaterVolBeforeSwitchingToSCWH;

		private string _Field_SCDWHModeMinimumSpeed = @"This numeric field defines a minimum speed level for running the SCDWH; i.e., the compressor speed will be altered between the minimum speed specified and top speed to match the space cooling load, and the water heating energy is a byproduct.";
		public static string Field_SCDWHModeMinimumSpeed => Value._Field_SCDWHModeMinimumSpeed;

		private string _Field_SHDWHModeTimeLimitBeforeTurningOnElectricWaterHeatingElement = @"This numeric field defines the running time [s] of the SHDWH mode before electric heating elements in the connected water tank are turned on if the water heating request cannot be satisfied on time. When there are simultaneous space heating and water heating calls, the ASIHP will run SHDWH mode first to satisfy a small water heating load. If the running time goes beyond the time limit, it means that the SHDWH mode, which uses a desuperheater, cannot provide enough capacity for the water heating request, and thus the electric elements in the water tank will be turned on to supplement the heating capacity.";
		public static string Field_SHDWHModeTimeLimitBeforeTurningOnElectricWaterHeatingElement => Value._Field_SHDWHModeTimeLimitBeforeTurningOnElectricWaterHeatingElement;

		private string _Field_SHDWHModeMinimumSpeed = @"This numeric field defines a minimum speed level for running the SHDWH mode; i.e., the compressor speed will be altered between the minimum speed and top speed to match the space heating load. Consequently, the water heating capacity is the byproduct.";
		public static string Field_SHDWHModeMinimumSpeed => Value._Field_SHDWHModeMinimumSpeed;

		private string _AnIDFExample = @"An IDF example showing how this object is:



CoilSystem:IntegratedHeatPump:AirSource,
  ASIHP1,        !- Name of an air-source integrated heat pump
  TankoutNod,    !- Name of a water node for  monitoring the supply water flow amount
  SCCoil1,       !- Coil object Name of space cooling mode 
  SHCoil1,       !- Coil object Name of space heating mode 
  DWHCoil1,      !- Coil object Name of dedicated water heating mode 
  SCWHCoil1,     !- Coil object Name for SCWH mode
  SCDWHCoil1     !- Coil object Name for cooling part of SCDWH mode
  SCDWHCoil2     !- Coil object Name for WH part of SCDWH mode
  SHDWHCoil1     !- Coil object Name for space heating part of SHDWH mode
  SHDWHCoil2     !- Coil object Name for WH part of SHDWH mode
  23.0,          !-{C},indoor temperature above which indoor overcooling is allowed
  28.0,          !-{C},outdoor temperature above which indoor overcooling is allowed
  20.0,          !-{C},indoor temperature above which water heating has the higher priority
  16.0,          !-{C},outdoor temperature above which water heating has the higher priority
  0,             !-0: match cooling load, 1: match water heating load in SCWH mode
  2,             !- minimum speed level for SCWH mode
  3.0,           !- {m3}, limit of heated water volume before switching from SCDWH to SCWH mode
  2,             !- minimum speed level for SCDWH mode
  600,           !- {s}, time limit before turning on electric element in SHDWH mode
  5;             !- minimum speed level for SHDWH mode";
		public static string AnIDFExample => Value._AnIDFExample;

	

}

	public sealed class CoilSystemCoolingWaterHeatExchangerAssisted
    { 

		private string _name = @"CoilSystem:Cooling:Water:HeatExchangerAssisted";
		private string _note = @"The heat exchanger-assisted water cooling coil is a virtual component consisting of a chilled-water cooling coil and an air-to-air heat exchanger as shown in Figure~\ref{fig:schematic-of-the-coilsystem-cooling-water} below. The air-to-air heat exchanger precools the air entering the cooling coil, and reuses this energy to reheat the supply air leaving the cooling coil. This heat exchange process improves the latent removal performance of the cooling coil by allowing it to dedicate more of its cooling capacity toward dehumidification (lower sensible heat ratio).

\begin{figure}[hbtp] % fig 140
\centering
\includegraphics[width=0.9\textwidth, height=0.9\textheight, keepaspectratio=true]{media/image370.png}
\caption{Schematic of the CoilSystem:Cooling:Water:HeatExchangerAssisted compound object \protect \label{fig:schematic-of-the-coilsystem-cooling-water}}
\end{figure}

Note: Node naming shown in Figure~\ref{fig:schematic-of-the-coilsystem-cooling-water} is representative for HeatExchanger:AirToAir:SensibleAndLatent. For HeatExchanger:AirToAir:FlatPlate, the exhaust air nodes are referred to as secondary air nodes.

This compound object models the basic operation of an air-to-air heat exchanger in conjunction with a chilled-water cooling coil. The heat exchanger-assisted water cooling coil does not have an operating schedule of its own; its operating schedule is governed by the availability schedules for the chilled-water cooling coil and the air-to-air heat exchanger. Heat exchange will occur whenever the heat exchanger is available to operate (via its availability schedule) and a temperature difference exists between the two air streams -- there is currently no method to enable or disable heat exchange based on zone air humidity level. This compound object is used in place of where a chilled-water cooling coil object would normally be used by itself.

To model a heat exchanger-assisted water cooling coil, the input data file should include the following objects:



  CoilSystem:Cooling:Water:HeatExchangerAssisted compound object

  Air-to-air heat exchanger object (HeatExchanger:AirToAir:FlatPlate or HeatExchanger:AirToAir:SensibleAndLatent)

  Chilled-water cooling coil object (Coil:Cooling:Water or Coil:Cooling:Water:DetailedGeometry)


Links to the cooling coil and air-to-air heat exchanger specifications are provided in the input data syntax for this compound object. A description of each input field for this compound object is provided below.
";
		

		private static readonly System.Lazy<CoilSystemCoolingWaterHeatExchangerAssisted> instance = new System.Lazy<CoilSystemCoolingWaterHeatExchangerAssisted>(() => new CoilSystemCoolingWaterHeatExchangerAssisted());
        private static CoilSystemCoolingWaterHeatExchangerAssisted Value => instance.Value;
		public static string Name => Value._name;
        public static string Note => Value._note;
		private CoilSystemCoolingWaterHeatExchangerAssisted(){}

	private string _Field_Name = @"A unique user-assigned name for the heat exchanger-assisted water cooling coil. Any reference to this compound component by another object (e.g., ZoneHVAC:UnitVentilator, ZoneHVAC:FourPipeFanCoil, component in an air loop Branch object) will use this name.";
		public static string Field_Name => Value._Field_Name;

		private string _Field_HeatExchangerObjectType = @"This alpha field denotes the type of heat exchanger being modeled. Valid choices are:

HeatExchanger:AirToAir:FlatPlate

HeatExchanger:AirToAir:SensibleAndLatent";
		public static string Field_HeatExchangerObjectType => Value._Field_HeatExchangerObjectType;

		private string _Field_HeatExchangerName = @"This alpha field denotes the name of the air-to-air heat exchanger being modeled.";
		public static string Field_HeatExchangerName => Value._Field_HeatExchangerName;

		private string _Field_CoolingCoilObjectType = @"This alpha field denotes the type of chilled-water cooling coil being modeled. Valid choices are:

Coil:Cooling:Water

Coil:Cooling:Water:DetailedGeometry";
		public static string Field_CoolingCoilObjectType => Value._Field_CoolingCoilObjectType;

		private string _Field_CoolingCoilName = @"This alpha field denotes the name of the chilled-water cooling coil being modeled.

Following is an example input for this compound object:



CoilSystem:Cooling:Water:HeatExchangerAssisted,
  Heat Exchanger Assisted Cooling Coil 1, !- Name of the heat exchanger assisted cooling coil
  HeatExchanger:AirToAir:FlatPlate,     !- Heat exchanger type
  Heat Exchanger Assisting Cooling Coil,   !- Heat exchanger name
  Coil:Cooling:Water:DetailedGeometry,                 !- Cooling coil type
  Main Cooling Coil 1;                                       !- Cooling coil name


  HeatExchanger:AirToAir:FlatPlate,
  Heat Exchanger Assisting Cooling Coil,   !- Name
  CoolingCoilAvailSched,     !- Availability Schedule Name
  Counter Flow,                       !- flow arrangement
  Yes,                                         !- Economizer lockout
  1.0,                                         !- hA ratio
  1.32,                                       !- Nominal supply air flow rate {m3/s}
  24.0,                                       !- Nominal supply air inlet temperature {C}
  21.0,                                       !- Nominal supply air outlet temperature {C}
  1.32,                                       !- Nominal secondary air flow rate {m3/s}
  12.0,                                       !- Nominal secondary air inlet temperature {C}
  100.0,                                     !- Nominal electric power {W}
  Mixed Air Node 1,               !- Supply air inlet node
  Main Cooling Coil 1 Inlet Node,   !- Supply air outlet node
  Main Cooling Coil 1 Outlet Node, !- Secondary air inlet node
  Main Heating Coil 1 Inlet Node;   !- Secondary air outlet node




  Coil:Cooling:Water:DetailedGeometry,
  Main Cooling Coil 1,         !- Coil Name
  CoolingCoilAvailSched,     !- Availability Schedule Name
  autosize,                               !- Max Water Flow Rate of Coil {m3/s}
  autosize,                               !- Tube Outside Surf Area {m2}
  autosize,                               !- Total Tube Inside Area {m2}
  autosize,                               !- Fin Surface Area {m2}
  autosize,                               !- Minimum Air Flow Area {m2}
  autosize,                               !- Coil Depth {m}
  autosize,                               !- Fin Diameter {m}
  ,                                               !- Fin Thickness {m}
  ,                                               !- Tube Inside Diameter {m}
  ,                                               !- Tube Outside Diameter {m}
  ,                                               !- Tube Thermal Conductivity {W/m-K}
  ,                                               !- Fin Thermal Conductivity {W/m-K}
  ,                                               !- Fin Spacing {m}
  ,                                               !- Tube Depth Spacing {m}
  ,                                               !- Number of Tube Rows
  autosize,                               !- Number of Tubes per Row
  Main Cooling Coil 1 Water Inlet Node,   !- Coil_Water_Inlet_Node
  Main Cooling Coil 1 Water Outlet Node, !- Coil_Water_Outlet_Node
  Main Cooling Coil 1 Inlet Node,     !- Coil_Air_Inlet_Node
  Main Cooling Coil 1 Outlet Node;   !- Coil_Air_Outlet_Node";
		public static string Field_CoolingCoilName => Value._Field_CoolingCoilName;

	

}

	public sealed class CoilWaterHeatingAirToWaterHeatPumpPumped
    { 

		private string _name = @"Coil:WaterHeating:AirToWaterHeatPump:Pumped";
		private string _note = @"EnergyPlus can model a heat pump water heater (HPWH) consisting of a water heater tank (e.g., \lstinline!WaterHeater:Mixed!), a direct expansion (DX) coil (i.e., an air-to-water DX compression system which includes a water heating coil, air coil, compressor, and water pump), and a fan to provide air flow across the air coil associated with the DX compression system. These objects work together to model a system which heats water using zone air, outdoor air, or a combination of zone and outdoor air as the primary heat source.

The \lstinline!WaterHeater:HeatPump:PumpedCondenser! compound object, water heater tank object (e.g., \lstinline!WaterHeater:Mixed!), and fan object (e.g., \lstinline!Fan:OnOff!) are defined elsewhere in this reference document. \lstinline!Coil:WaterHeating:AirToWaterHeatPump:Pumped! object described here models an air-to-water DX compression system to determine its air-side and water-side performance. This DX coil object calculates the air-side sensible and latent cooling capacity at the specific operating conditions for each simulation timestep, as well as the condenser's water-side temperature difference at a given condenser water flow rate.

The heat pump water heater DX coil model performs the following major functions:



  calculates the electric consumption of the DX compressor and water pump

  calculates the amount of heat delivered to the water tank

  calculates the electric consumption of the compressor's crankcase heater

  calculates the air-side performance of the DX coil


The input fields for this object are described below in detail:
";
		

		private static readonly System.Lazy<CoilWaterHeatingAirToWaterHeatPumpPumped> instance = new System.Lazy<CoilWaterHeatingAirToWaterHeatPumpPumped>(() => new CoilWaterHeatingAirToWaterHeatPumpPumped());
        private static CoilWaterHeatingAirToWaterHeatPumpPumped Value => instance.Value;
		public static string Name => Value._name;
        public static string Note => Value._note;
		private CoilWaterHeatingAirToWaterHeatPumpPumped(){}

	private string _Field_Name = @"This alpha field defines a unique user-assigned name for an instance of a heat pump water heater DX coil. Any reference to this coil by another object (e.g., \lstinline!WaterHeater:HeatPump:PumpedCondenser!) will use this name.";
		public static string Field_Name => Value._Field_Name;

		private string _Field_RatedHeatingCapacity = @"This numeric field defines the DX coil heating capacity in Watts at the rated evaporator inlet air temperatures, rated condenser inlet water temperature, rated evaporator air flow rate, and rated condenser water flow rate specified below. Values must be greater than 0. This value represents water heating capacity, and it may or may not include the impact of condenser pump heat (see field Condenser Pump Heat Included in Rated Heating Capacity below).";
		public static string Field_RatedHeatingCapacity => Value._Field_RatedHeatingCapacity;

		private string _Field_RatedCOP = @"This numeric field defines the DX coil's water heating coefficient of performance (COP = water heating capacity in watts divided by electrical power input in watts) at rated conditions (rated inlet temperatures and flow rates specified below). This input not only determines the electric energy use of the heat pump DX coil, but also the amount of total air cooling provided by the evaporator. The rated COP includes compressor power, and may or may not include condenser pump power or evaporator fan power (see field Evaporator Fan Power Included in Rated COP and field Condenser Pump Power Included in Rated COP). Values must be greater than 0. If this field is left blank, the default value is 3.2.";
		public static string Field_RatedCOP => Value._Field_RatedCOP;

		private string _Field_RatedSensibleHeatRatio = @"This numeric field defines the air-side sensible heat ratio (SHR = sensible cooling capacity divided by total cooling capacity) of the DX coil at rated conditions (rated inlet temperatures and flow rates specified below). This value should not include the effect of evaporator fan heat. Values must be greater than or equal to 0.5, and less than or equal to 1.0. The default value is 0.85.";
		public static string Field_RatedSensibleHeatRatio => Value._Field_RatedSensibleHeatRatio;

		private string _Field_RatedEvaporatorInletAirDryBulbTemperature = @"This numeric field defines the evaporator inlet air dry-bulb temperature, in degrees Celsius, that corresponds to rated coil performance (heating capacity, COP and SHR). Values must be greater than 5 ??C. If this field is left blank, the default value is 19.7 ??C.";
		public static string Field_RatedEvaporatorInletAirDryBulbTemperature => Value._Field_RatedEvaporatorInletAirDryBulbTemperature;

		private string _Field_RatedEvaporatorInletAirWetBulbTemperature = @"This numeric field defines the evaporator inlet air wet-bulb temperature, in degrees Celsius, that corresponds to rated coil performance (heating capacity, COP and SHR). Values must be greater than 5 ??C. If this field is left blank, the default value is 13.5 ??C.";
		public static string Field_RatedEvaporatorInletAirWetBulbTemperature => Value._Field_RatedEvaporatorInletAirWetBulbTemperature;

		private string _Field_RatedCondenserInletWaterTemperature = @"This numeric field defines the condenser inlet water temperature, in degrees Celsius, that corresponds to rated coil performance (heating capacity, COP and SHR). Values must be greater than 25 ??C. If this field is left blank, the default value is 57.5 ??C.";
		public static string Field_RatedCondenserInletWaterTemperature => Value._Field_RatedCondenserInletWaterTemperature;

		private string _Field_RatedEvaporatorAirFlowRate = @"This numeric field defines the evaporator air volume flow rate in cubic meters per second at rated conditions. Values must be greater than 0. If this field is left blank or autocalculated (field value = {autocalculate}), the default value is 5.035E-5 m^{3}/s/W (31.25 cfm/MBH) multiplied by the Rated Heating Capacity specified above. When autocalculating the rated evaporator air volumetric flow rate, a zone sizing object is not required.";
		public static string Field_RatedEvaporatorAirFlowRate => Value._Field_RatedEvaporatorAirFlowRate;

		private string _Field_RatedCondenserWaterFlowRate = @"This numeric field defines the condenser water volumetric flow rate in cubic meters per second at rated conditions. Values must be greater than 0. If this field is left blank or autocalculated (field value = {autocalculate}), the default value is 4.487E-8 m^{3}/s/W (0.208 gpm/MBH) multiplied by the Rated Heating Capacity specified above. When autocalculating the rated condenser water volumetric flow rate, a zone sizing object is not required. A warning message will be issued if the ratio of Rated Condenser Water Volumetric Flow Rate to Rated Heating Capacity is less than 1.79405E-8 m^{3}/s/W (0.083 gpm/MBH) or greater than 8.97024E-8 m^{3}/s/W (0.417 gpm/MBH), but the simulation will continue.";
		public static string Field_RatedCondenserWaterFlowRate => Value._Field_RatedCondenserWaterFlowRate;

		private string _Field_EvaporatorFanPowerIncludedInRatedCOP = @"This choice field specifies if evaporator fan power is included in the rated COP defined above. This input impacts the calculation of compressor electric power and total air cooling provided by the evaporator for each simulation timestep. If Yes is selected, the evaporator fan power is subtracted from the total electric heating power when calculating total evaporator cooling capacity. If No is selected, it is assumed that the total heating power does not include evaporator fan power. If this field is left blank, the default is Yes. See the Engineering Reference section for \lstinline!Coil:WaterHeating:AirToWaterHeatPump:\*! for further details.";
		public static string Field_EvaporatorFanPowerIncludedInRatedCOP => Value._Field_EvaporatorFanPowerIncludedInRatedCOP;

		private string _Field_CondenserPumpPowerIncludedInRatedCOP = @"This choice field specifies if condenser pump power is included in the rated COP defined above. This input impacts the calculation of compressor electric power which then impacts the total air cooling provided by the evaporator for each simulation timestep. If Yes is selected, the condenser pump power is subtracted from the total electric heating power when calculating total evaporator cooling capacity. If No is selected, it is assumed that the total heating power does not include the condenser pump. If this field is left blank, the default is No. See Engineering Reference section for \lstinline!Coil:WaterHeating:AirToWaterHeatPump:\*! for further details.";
		public static string Field_CondenserPumpPowerIncludedInRatedCOP => Value._Field_CondenserPumpPowerIncludedInRatedCOP;

		private string _Field_CondenserPumpHeatIncludedInRatedHeatingCapacityAndRatedCOP = @"This choice field specifies if condenser pump heat is included in the rated heating capacity and rated COP defined above. This input impacts the calculation of compressor electric power and total air cooling provided by the evaporator for each simulation timestep. If Yes is selected, the condenser pump heat is already included in the rated heating capacity and rated COP. If No is selected, it is assumed that the rated heating capacity and rated COP do not include the condenser pump heat, and pump heat is added to the total water heating capacity based on the Condenser Water Pump Power and Fraction of Condenser Pump Heat to Water fields below. If this field is left blank, the default is No. See Engineering Reference section for \lstinline!Coil:WaterHeating:AirToWaterHeatPump:\*! for further details.";
		public static string Field_CondenserPumpHeatIncludedInRatedHeatingCapacityAndRatedCOP => Value._Field_CondenserPumpHeatIncludedInRatedHeatingCapacityAndRatedCOP;

		private string _Field_CondenserWaterPumpPower = @"This numeric field defines the DX coil's condenser pump power in Watts. This is the operating pump power as installed. Values must be greater than or equal to 0. If this field is left blank, the default value is 0. A warning message will be issued if the ratio of Condenser Water Pump Power to Rated Heating Capacity exceeds 0.1422 W/W (41.67 Watts/MBH), but the simulation will continue.";
		public static string Field_CondenserWaterPumpPower => Value._Field_CondenserWaterPumpPower;

		private string _Field_FractionOfCondenserPumpHeatToWater = @"This numeric field defines the fraction of condenser pump heat that is transferred to the condenser water. The pump is assumed to be downstream of the condenser water coil, and this field is used to determine the water temperature at the condenser outlet node when the field Condenser Pump Power Included in Rated Heating Capacity is set to No. Values must be greater than or equal to 0 and less than or equal to 1. If this field is left blank, the default value is 0.2.";
		public static string Field_FractionOfCondenserPumpHeatToWater => Value._Field_FractionOfCondenserPumpHeatToWater;

		private string _Field_EvaporatorAirInletNodeName = @"This alpha field defines the name of the air node from which the evaporator coil draws its inlet air.";
		public static string Field_EvaporatorAirInletNodeName => Value._Field_EvaporatorAirInletNodeName;

		private string _Field_EvaporatorAirOutletNodeName = @"This alpha field defines the name of the air node to which the evaporator coil sends its outlet air.";
		public static string Field_EvaporatorAirOutletNodeName => Value._Field_EvaporatorAirOutletNodeName;

		private string _Field_CondenserWaterInletNodeName = @"This alpha field defines the name of the node from which the DX coil condenser draws its inlet water. This node name must also match the source side outlet node name for the water heater tank connected to this DX coil (ref: Water Heaters).";
		public static string Field_CondenserWaterInletNodeName => Value._Field_CondenserWaterInletNodeName;

		private string _Field_CondenserWaterOutletNodeName = @"This alpha field defines the name of the node to which the heat pump condenser sends it outlet water. This node name must also match the source side inlet node name for the water heater tank connected to this DX coil (ref: Water Heaters).";
		public static string Field_CondenserWaterOutletNodeName => Value._Field_CondenserWaterOutletNodeName;

		private string _Field_CrankcaseHeaterCapacity = @"This numeric field defines the compressor's crankcase heater capacity in Watts. The crankcase heater only operates when the compressor is off and the air surrounding the compressor is below the Maximum Ambient Temperature for Crankcase Heater Operation specified below.";
		public static string Field_CrankcaseHeaterCapacity => Value._Field_CrankcaseHeaterCapacity;

		private string _Field_MaximumAmbientTemperatureForCrankcaseHeaterOperation = @"This numeric field defines the maximum ambient temperature for crankcase heater operation in degree Celsius. The crankcase heater only operates when the air surrounding the compressor is below this maximum temperature value and the compressor is off. The ambient temperature surrounding the compressor is set by the Heat Pump:Water Heater parent object (field Compressor Location).";
		public static string Field_MaximumAmbientTemperatureForCrankcaseHeaterOperation => Value._Field_MaximumAmbientTemperatureForCrankcaseHeaterOperation;

		private string _Field_EvaporatorAirTemperatureTypeForCurveObjects = @"This choice field specifies the air temperature type used for the heating capacity and COP modifier curve objects below. The valid selections are Dry-bulb Temperature and Wet-bulb Temperature. If dry-bulb temperature is selected, the inlet air dry-bulb temperature entering the heat pump DX coil and fan section is used to evaluate the curve objects. If wet-bulb temperature is selected, the inlet air wet-bulb temperature entering the heat pump DX coil and fan section is used to evaluate the curve objects. If this field is left blank and the following curve names are defined, the default value is wet-bulb temperature. If the following curve names are not defined, this field is not used.";
		public static string Field_EvaporatorAirTemperatureTypeForCurveObjects => Value._Field_EvaporatorAirTemperatureTypeForCurveObjects;

		private string _Field_HeatingCapacityFunctionOfTemperatureCurveName = @"This alpha field specifies the name of a {biquadratic} or {cubic} performance curve object (ref: Performance Curves) that defines the variation in DX coil heating capacity as a function of inlet fluid (air and water) temperatures. The biquadratic curve uses evaporator inlet air temperature (dry-bulb or wet-bulb temperature based on the field Evaporator Air Temperature Type for Curve Objects defined above) and condenser inlet water temperature as the independent variables. The cubic curve uses evaporator inlet air (dry-bulb or wet-bulb) temperature as the independent variable. The output of this curve is multiplied by the rated heating capacity to give the heating capacity at specific operating conditions (i.e., at temperatures different from the rating point temperatures). The curve should be normalized to have the value of 1.0 at the rating point temperatures. If this field is left blank, the heating capacity remains constant (curve value assumed to be 1.0 for all conditions).";
		public static string Field_HeatingCapacityFunctionOfTemperatureCurveName => Value._Field_HeatingCapacityFunctionOfTemperatureCurveName;

		private string _Field_HeatingCapacityFunctionOfAirFlowFractionCurveName = @"This alpha field specifies the name of a {quadratic} or {cubic} performance curve object (ref: Performance Curves) that defines the variation in DX coil heating capacity as a function of the ratio of actual air flow rate across the evaporator coil to the rated evaporator air flow rate. The output of this curve is multiplied by the rated heating capacity and the heating capacity modifier curve (function of temperature) to give the DX coil heating capacity at the specific inlet fluid temperatures and air flow rate at which the coil is operating. The curve should be normalized to have the value of 1.0 at the rated evaporator air flow rate (air flow fraction of 1.0). If this field is left blank, the heating capacity remains constant (curve value assumed to be 1.0 for all air flow rates).";
		public static string Field_HeatingCapacityFunctionOfAirFlowFractionCurveName => Value._Field_HeatingCapacityFunctionOfAirFlowFractionCurveName;

		private string _Field_HeatingCapacityFunctionOfWaterFlowFractionCurveName = @"This alpha field specifies the name of a {quadratic} or {cubic} performance curve object (ref: Performance Curves) that defines the variation in DX coil heating capacity as a function of the ratio of actual water flow rate through the condenser to the rated condenser water flow rate. The output of this curve is multiplied by the rated heating capacity and the output from the two other heating capacity modifier curves (function of temperature and function of air flow fraction) to give the DX coil heating capacity at the specific inlet fluid temperatures and flow rates at which the coil is operating. The curve should be normalized to have the value of 1.0 at the rated condenser water flow rate (water flow fraction of 1.0). If this field is left blank, the heating capacity remains constant (curve value assumed to be 1.0 for all water flow rates).";
		public static string Field_HeatingCapacityFunctionOfWaterFlowFractionCurveName => Value._Field_HeatingCapacityFunctionOfWaterFlowFractionCurveName;

		private string _Field_HeatingCOPFunctionOfTemperatureCurveName = @"This alpha field specifies the name of a {biquadratic} or {cubic} performance curve object (ref: Performance Curves) that defines the variation in DX coil heating COP as a function of inlet fluid (air and water) temperatures. The biquadratic curve uses evaporator inlet air temperature (dry-bulb or wet-bulb temperature based on the field Evaporator Air Temperature Type for Curve Objects defined above) and condenser inlet water temperature as the independent variables. The cubic curve uses evaporator inlet air (dry-bulb or wet-bulb) temperature as the independent variable. The output of this curve is multiplied by the rated COP to give the heating COP at specific operating conditions (i.e., at temperatures different from the rating point temperatures). The curve should be normalized to have the value of 1.0 at the rating point temperatures. If this field is left blank, the COP remains constant (curve value assumed to be 1.0 for all conditions).";
		public static string Field_HeatingCOPFunctionOfTemperatureCurveName => Value._Field_HeatingCOPFunctionOfTemperatureCurveName;

		private string _Field_HeatingCOPFunctionOfAirFlowFractionCurveName = @"This alpha field specifies the name of a {quadratic} or {cubic} performance curve object (ref: Performance Curves) that defines the variation in DX coil heating COP as a function of the ratio of actual air flow rate across the evaporator coil to the rated evaporator air flow rate. The output of this curve is multiplied by the rated COP and the heating COP modifier curve (function of temperature) to give the heating COP at the specific inlet fluid temperatures and air flow rate at which the coil is operating. The curve should be normalized to have the value of 1.0 at the rated evaporator air flow rate (air flow fraction of 1.0). If this field is left blank, the heating COP remains constant (curve value assumed to be 1.0 for all air flow rates).";
		public static string Field_HeatingCOPFunctionOfAirFlowFractionCurveName => Value._Field_HeatingCOPFunctionOfAirFlowFractionCurveName;

		private string _Field_HeatingCOPFunctionOfWaterFlowFractionCurveName = @"This alpha field specifies the name of a {quadratic} or {cubic} performance curve object (ref: Performance Curves) that defines the variation in DX coil heating COP as a function of the ratio of actual water flow rate through the condenser to the rated condenser water flow rate.. The output of this curve is multiplied by the rated COP and the output from the two other heating COP modifier curves (function of temperature and function of air flow fraction) to give the DX coil heating COP at the specific inlet fluid temperatures and flow rates at which the coil is operating. The curve should be normalized to have the value of 1.0 at the rated condenser water flow rate (water flow fraction of 1.0). If this field is left blank, the heating COP remains constant (curve value assumed to be 1.0 for all water flow rates).";
		public static string Field_HeatingCOPFunctionOfWaterFlowFractionCurveName => Value._Field_HeatingCOPFunctionOfWaterFlowFractionCurveName;

		private string _Field_PartLoadFractionCorrelationCurveName = @"This alpha field defines the name of a {quadratic} or {cubic} performance curve (Ref: Performance Curves) that parameterizes the variation of electrical power input to the DX unit as a function of the part load ratio (PLR, sensible cooling load/steady-state sensible cooling capacity). The product of the rated EIR and EIR modifier curves is divided by the output of this curve to give the effective EIR for a given simulation timestep. The part load fraction (PLF) correlation accounts for efficiency losses due to compressor cycling.

The part load fraction correlation should be normalized to a value of 1.0 when the part load ratio equals 1.0 (i.e., no efficiency losses when the compressor(s) run continuously for the simulation timestep). For PLR values between 0 and 1 (0 < = PLR < 1), the following rules apply:

PLF > = 0.7 and PLF > = PLR

If PLF < 0.7 a warning message is issued, the program resets the PLF value to 0.7, and the simulation proceeds. The runtime fraction of the coil is defined as PLR/PLF. If PLF < PLR, then a warning message is issued and the runtime fraction of the coil is limited to 1.0.

A typical part load fraction correlation for a conventional, single-speed DX cooling coil (e.g., residential unit) would be:


       PLF = 0.85 + 0.15(PLR)


If the user wishes to model no efficiency degradation due to compressor cycling, the part load fraction correlation should be defined as follows:


       PLF = 1.0 + 0.0(PLR)


Following is an example input for the \lstinline!Coil:WaterHeating:AirToWaterHeatPump:Pumped! object:



Coil:WaterHeating:AirToWaterHeatPump:Pumped,
  Zone4HPWHDXCoil,           !- Coil Name
  4000.0,                    !- Heating Capacity {W}
  3.2,                       !- Rated COP {W/W}
  0.6956,                    !- Rated SHR (gross)
  19.7,                      !- Rated Evaporator Inlet Air Dry-Bulb Temperature {C}
  13.5,                      !- Rated Evaporator Inlet Air Wet-Bulb Temperature {C}
  57.5,                      !- Rated Condenser Inlet Water Temperature {C}
  autocalculate,             !- Rated Evaporator Air Volumetric Flow Rate {m3/s}
  autocalculate,             !- Rated Condenser Water Volumetric Flow Rate {m3/s}
  No,                        !- Evaporator Fan Power Included in Rated COP
  No,                        !- Condenser Pump Power Included in Rated COP
  No,                        !- Condenser Pump Heat Included in Rated Heating Capacity and Rated COP
  150.0,                     !- Condenser Water Pump Power {W}
  0.1,                       !- Fraction of Condenser Pump Heat to Water
  Zone4AirOutletNode,        !- Evaporator Air Inlet Node Name
  Zone4DXCoilAirOutletNode,  !- Evaporator Air Outlet Node Name
  Zone4WaterInletNode,       !- Condenser Water Inlet Node Name
  Zone4WaterOutletNode,      !- Condenser Water Outlet Node Name
  100.0,                     !- Crankcase Heater Capacity {W}
  5.0,                       !- Maximum Ambient Temperature for Crankcase Heater Operation {C}
  wet-bulb temperature,      !- Evaporator Air Temperature Type for Curve Objects
  HPWHHeatingCapFTemp,       !- Heating Capacity Modifier Curve Name (function of temperature)
  ,                          !- Heating Capacity Modifier Curve Name (function of air flow fraction)
  ,                          !- Heating Capacity Modifier Curve Name (function of water flow fraction)
  HPWHHeatingCOPFTemp,       !- Heating COP Modifier Curve Name (function of temperature)
  ,                          !- Heating COP Modifier Curve Name (function of air flow fraction)
  ,                          !- Heating COP Modifier Curve Name (function of water flow fraction)
  HPWHPLFFPLR;               !- Part Load Fraction Correlation Name (function of part load ratio)";
		public static string Field_PartLoadFractionCorrelationCurveName => Value._Field_PartLoadFractionCorrelationCurveName;

	

}

	public sealed class CoilWaterHeatingAirToWaterHeatPumpWrapped
    { 

		private string _name = @"Coil:WaterHeating:AirToWaterHeatPump:Wrapped";
		private string _note = @"EnergyPlus can model a heat pump water heater (HPWH) consisting of a water heater tank (e.g., \lstinline!WaterHeater:Stratified!), a direct expansion (DX) coil (i.e., an air-to-water DX compression system which includes a water heating coil, air coil, compressor, and water pump), and a fan to provide air flow across the air coil associated with the DX compression system. These objects work together to model a system which heats water using zone air, outdoor air, or a combination of zone and outdoor air as the primary heat source.

The \lstinline!WaterHeater:HeatPump:WrappedCondenser! compound object, water heater tank object (e.g., \lstinline!WaterHeater:Mixed!), and fan object (e.g., \lstinline!Fan:OnOff!) are defined elsewhere in this reference document. \lstinline!Coil:WaterHeating:AirToWaterHeatPump:Wrapped! object described here models an air-to-water DX compression system to determine its air-side and water-side performance. This DX coil object calculates the air-side sensible and latent cooling capacity at the specific operating conditions for each simulation timestep, as well as the condenser's water-side temperature difference at a given condenser water flow rate.

The heat pump water heater DX coil model performs the following major functions:



  calculates the electric consumption of the DX compressor

  calculates the amount of heat delivered to the water tank

  calculates the electric consumption of the compressor's crankcase heater

  calculates the air-side performance of the DX coil

";
		

		private static readonly System.Lazy<CoilWaterHeatingAirToWaterHeatPumpWrapped> instance = new System.Lazy<CoilWaterHeatingAirToWaterHeatPumpWrapped>(() => new CoilWaterHeatingAirToWaterHeatPumpWrapped());
        private static CoilWaterHeatingAirToWaterHeatPumpWrapped Value => instance.Value;
		public static string Name => Value._name;
        public static string Note => Value._note;
		private CoilWaterHeatingAirToWaterHeatPumpWrapped(){}

	private string _Field_Name = @"This alpha field defines a unique user-assigned name for an instance of a heat pump water heater DX coil. Any reference to this coil by another object (e.g., \lstinline!WaterHeater:HeatPump:WrappedCondenser!) will use this name.";
		public static string Field_Name => Value._Field_Name;

		private string _Field_RatedHeatingCapacity = @"This numeric field defines the DX coil heating capacity in Watts at the rated evaporator inlet air temperatures, rated condenser inlet water temperature, rated evaporator air flow rate, and rated condenser water flow rate specified below. Values must be greater than 0. This value represents water heating capacity, and it may or may not include the impact of condenser pump heat (see field Condenser Pump Heat Included in Rated Heating Capacity below).";
		public static string Field_RatedHeatingCapacity => Value._Field_RatedHeatingCapacity;

		private string _Field_RatedCOP = @"This numeric field defines the DX coil's water heating coefficient of performance (COP = water heating capacity in watts divided by electrical power input in watts) at rated conditions (rated inlet temperatures and flow rates specified below). This input not only determines the electric energy use of the heat pump DX coil, but also the amount of total air cooling provided by the evaporator. The rated COP includes compressor power, and may or may not include condenser pump power or evaporator fan power (see field Evaporator Fan Power Included in Rated COP and field Condenser Pump Power Included in Rated COP). Values must be greater than 0. If this field is left blank, the default value is 3.2.";
		public static string Field_RatedCOP => Value._Field_RatedCOP;

		private string _Field_RatedSensibleHeatRatio = @"This numeric field defines the air-side sensible heat ratio (SHR = sensible cooling capacity divided by total cooling capacity) of the DX coil at rated conditions (rated inlet temperatures and flow rates specified below). This value should not include the effect of evaporator fan heat. Values must be greater than or equal to 0.5, and less than or equal to 1.0. The default value is 0.85.";
		public static string Field_RatedSensibleHeatRatio => Value._Field_RatedSensibleHeatRatio;

		private string _Field_RatedEvaporatorInletAirDryBulbTemperature = @"This numeric field defines the evaporator inlet air dry-bulb temperature, in degrees Celsius, that corresponds to rated coil performance (heating capacity, COP and SHR). Values must be greater than 5 ??C. If this field is left blank, the default value is 19.7 ??C.";
		public static string Field_RatedEvaporatorInletAirDryBulbTemperature => Value._Field_RatedEvaporatorInletAirDryBulbTemperature;

		private string _Field_RatedEvaporatorInletAirWetBulbTemperature = @"This numeric field defines the evaporator inlet air wet-bulb temperature, in degrees Celsius, that corresponds to rated coil performance (heating capacity, COP and SHR). Values must be greater than 5 ??C. If this field is left blank, the default value is 13.5 ??C.";
		public static string Field_RatedEvaporatorInletAirWetBulbTemperature => Value._Field_RatedEvaporatorInletAirWetBulbTemperature;

		private string _Field_RatedCondenserWaterTemperature = @"This numeric field defines the condenser inlet water temperature, in degrees Celsius, that corresponds to rated coil performance (heating capacity, COP and SHR). Values must be greater than 25 ??C. If this field is left blank, the default value is 57.5 ??C.";
		public static string Field_RatedCondenserWaterTemperature => Value._Field_RatedCondenserWaterTemperature;

		private string _Field_RatedEvaporatorAirFlowRate = @"This numeric field defines the evaporator air volume flow rate in cubic meters per second at rated conditions. Values must be greater than 0. If this field is left blank or autocalculated (field value = {autocalculate}), the default value is 5.035E-5 m^{3}/s/W (31.25 cfm/MBH) multiplied by the Rated Heating Capacity specified above. When autocalculating the rated evaporator air volumetric flow rate, a zone sizing object is not required.";
		public static string Field_RatedEvaporatorAirFlowRate => Value._Field_RatedEvaporatorAirFlowRate;

		private string _Field_EvaporatorFanPowerIncludedInRatedCOP = @"This choice field specifies if evaporator fan power is included in the rated COP defined above. This input impacts the calculation of compressor electric power and total air cooling provided by the evaporator for each simulation timestep. If Yes is selected, the evaporator fan power is subtracted from the total electric heating power when calculating total evaporator cooling capacity. If No is selected, it is assumed that the total heating power does not include evaporator fan power. If this field is left blank, the default is Yes. See the Engineering Reference section for \lstinline!Coil:WaterHeating:AirToWaterHeatPump:\*! for further details.";
		public static string Field_EvaporatorFanPowerIncludedInRatedCOP => Value._Field_EvaporatorFanPowerIncludedInRatedCOP;

		private string _Field_EvaporatorAirInletNodeName = @"This alpha field defines the name of the air node from which the evaporator coil draws its inlet air.";
		public static string Field_EvaporatorAirInletNodeName => Value._Field_EvaporatorAirInletNodeName;

		private string _Field_EvaporatorAirOutletNodeName = @"This alpha field defines the name of the air node to which the evaporator coil sends its outlet air.";
		public static string Field_EvaporatorAirOutletNodeName => Value._Field_EvaporatorAirOutletNodeName;

		private string _Field_CrankcaseHeaterCapacity = @"This numeric field defines the compressor's crankcase heater capacity in Watts. The crankcase heater only operates when the compressor is off and the air surrounding the compressor is below the Maximum Ambient Temperature for Crankcase Heater Operation specified below.";
		public static string Field_CrankcaseHeaterCapacity => Value._Field_CrankcaseHeaterCapacity;

		private string _Field_MaximumAmbientTemperatureForCrankcaseHeaterOperation = @"This numeric field defines the maximum ambient temperature for crankcase heater operation in degree Celsius. The crankcase heater only operates when the air surrounding the compressor is below this maximum temperature value and the compressor is off. The ambient temperature surrounding the compressor is set by the Heat Pump:Water Heater parent object (field Compressor Location).";
		public static string Field_MaximumAmbientTemperatureForCrankcaseHeaterOperation => Value._Field_MaximumAmbientTemperatureForCrankcaseHeaterOperation;

		private string _Field_EvaporatorAirTemperatureTypeForCurveObjects = @"This choice field specifies the air temperature type used for the heating capacity and COP modifier curve objects below. The valid selections are Dry-bulb Temperature and Wet-bulb Temperature. If dry-bulb temperature is selected, the inlet air dry-bulb temperature entering the heat pump DX coil and fan section is used to evaluate the curve objects. If wet-bulb temperature is selected, the inlet air wet-bulb temperature entering the heat pump DX coil and fan section is used to evaluate the curve objects. If this field is left blank and the following curve names are defined, the default value is wet-bulb temperature. If the following curve names are not defined, this field is not used.";
		public static string Field_EvaporatorAirTemperatureTypeForCurveObjects => Value._Field_EvaporatorAirTemperatureTypeForCurveObjects;

		private string _Field_HeatingCapacityFunctionOfTemperatureCurveName = @"This alpha field specifies the name of a {biquadratic} or {cubic} performance curve object (ref: Performance Curves) that defines the variation in DX coil heating capacity as a function of inlet fluid (air and water) temperatures. The biquadratic curve uses evaporator inlet air temperature (dry-bulb or wet-bulb temperature based on the field Evaporator Air Temperature Type for Curve Objects defined above) and condenser inlet water temperature as the independent variables. The cubic curve uses evaporator inlet air (dry-bulb or wet-bulb) temperature as the independent variable. The output of this curve is multiplied by the rated heating capacity to give the heating capacity at specific operating conditions (i.e., at temperatures different from the rating point temperatures). The curve should be normalized to have the value of 1.0 at the rating point temperatures. If this field is left blank, the heating capacity remains constant (curve value assumed to be 1.0 for all conditions).";
		public static string Field_HeatingCapacityFunctionOfTemperatureCurveName => Value._Field_HeatingCapacityFunctionOfTemperatureCurveName;

		private string _Field_HeatingCapacityFunctionOfAirFlowFractionCurveName = @"This alpha field specifies the name of a {quadratic} or {cubic} performance curve object (ref: Performance Curves) that defines the variation in DX coil heating capacity as a function of the ratio of actual air flow rate across the evaporator coil to the rated evaporator air flow rate. The output of this curve is multiplied by the rated heating capacity and the heating capacity modifier curve (function of temperature) to give the DX coil heating capacity at the specific inlet fluid temperatures and air flow rate at which the coil is operating. The curve should be normalized to have the value of 1.0 at the rated evaporator air flow rate (air flow fraction of 1.0). If this field is left blank, the heating capacity remains constant (curve value assumed to be 1.0 for all air flow rates).";
		public static string Field_HeatingCapacityFunctionOfAirFlowFractionCurveName => Value._Field_HeatingCapacityFunctionOfAirFlowFractionCurveName;

		private string _Field_HeatingCOPFunctionOfTemperatureCurveName = @"This alpha field specifies the name of a {biquadratic} or {cubic} performance curve object (ref: Performance Curves) that defines the variation in DX coil heating COP as a function of inlet fluid (air and water) temperatures. The biquadratic curve uses evaporator inlet air temperature (dry-bulb or wet-bulb temperature based on the field Evaporator Air Temperature Type for Curve Objects defined above) and condenser inlet water temperature as the independent variables. The cubic curve uses evaporator inlet air (dry-bulb or wet-bulb) temperature as the independent variable. The output of this curve is multiplied by the rated COP to give the heating COP at specific operating conditions (i.e., at temperatures different from the rating point temperatures). The curve should be normalized to have the value of 1.0 at the rating point temperatures. If this field is left blank, the COP remains constant (curve value assumed to be 1.0 for all conditions).";
		public static string Field_HeatingCOPFunctionOfTemperatureCurveName => Value._Field_HeatingCOPFunctionOfTemperatureCurveName;

		private string _Field_HeatingCOPFunctionOfAirFlowFractionCurveName = @"This alpha field specifies the name of a {quadratic} or {cubic} performance curve object (ref: Performance Curves) that defines the variation in DX coil heating COP as a function of the ratio of actual air flow rate across the evaporator coil to the rated evaporator air flow rate. The output of this curve is multiplied by the rated COP and the heating COP modifier curve (function of temperature) to give the heating COP at the specific inlet fluid temperatures and air flow rate at which the coil is operating. The curve should be normalized to have the value of 1.0 at the rated evaporator air flow rate (air flow fraction of 1.0). If this field is left blank, the heating COP remains constant (curve value assumed to be 1.0 for all air flow rates).";
		public static string Field_HeatingCOPFunctionOfAirFlowFractionCurveName => Value._Field_HeatingCOPFunctionOfAirFlowFractionCurveName;

		private string _Field_PartLoadFractionCorrelationCurveName = @"This alpha field defines the name of a {quadratic} or {cubic} performance curve (Ref: Performance Curves) that parameterizes the variation of electrical power input to the DX unit as a function of the part load ratio (PLR, sensible cooling load/steady-state sensible cooling capacity). The product of the rated EIR and EIR modifier curves is divided by the output of this curve to give the effective EIR for a given simulation timestep. The part load fraction (PLF) correlation accounts for efficiency losses due to compressor cycling.

The part load fraction correlation should be normalized to a value of 1.0 when the part load ratio equals 1.0 (i.e., no efficiency losses when the compressor(s) run continuously for the simulation timestep). For PLR values between 0 and 1 (0 < = PLR < 1), the following rules apply:

PLF > = 0.7 and PLF > = PLR

If PLF < 0.7 a warning message is issued, the program resets the PLF value to 0.7, and the simulation proceeds. The runtime fraction of the coil is defined as PLR/PLF. If PLF < PLR, then a warning message is issued and the runtime fraction of the coil is limited to 1.0.

A typical part load fraction correlation for a conventional, single-speed DX cooling coil (e.g., residential unit) would be:


       PLF = 0.85 + 0.15(PLR)


If the user wishes to model no efficiency degradation due to compressor cycling, the part load fraction correlation should be defined as follows:


       PLF = 1.0 + 0.0(PLR)


Following is an example input for the \lstinline!Coil:WaterHeating:AirToWaterHeatPump:Wrapped! object:



Coil:WaterHeating:AirToWaterHeatPump:Wrapped,
  HPWH Coil,               !- Name
  2349.6,                  !- Rated Heating Capacity {W}
  2.4,                     !- Rated COP {W/W}
  0.981,                   !- Rated Sensible Heat Ratio
  19.72,                   !- Rated Evaporator Inlet Air Dry-Bulb Temperature {C}
  13.5,                    !- Rated Evaporator Inlet Air Wet-Bulb Temperature {C}
  48.89,                   !- Rated Condenser Water Temperature {C}
  0.189,                   !- Rated Evaporator Air Flow Rate {m3/s}
  Yes,                     !- Evaporator Fan Power Included in Rated COP
  HPWH Air Inlet,          !- Evaporator Air Inlet Node Name
  HPWH Coil Outlet Fan Inlet,  !- Evaporator Air Outlet Node Name
  0,                       !- Crankcase Heater Capacity {W}
  10,                      !- Maximum Ambient Temperature for Crankcase Heater Operation {C}
  WetBulbTemperature,      !- Evaporator Air Temperature Type for Curve Objects
  HPWH-Htg-Cap-fT,         !- Heating Capacity Function of Temperature Curve Name
  ,                        !- Heating Capacity Function of Air Flow Fraction Curve Name
  HPWH-Htg-COP-fT,         !- Heating COP Function of Temperature Curve Name
  ,                        !- Heating COP Function of Air Flow Fraction Curve Name
  HPWH-COP-fPLR;           !- Part Load Fraction Correlation Curve Name";
		public static string Field_PartLoadFractionCorrelationCurveName => Value._Field_PartLoadFractionCorrelationCurveName;

	

}

	public sealed class CoilWaterHeatingAirToWaterHeatPumpVariableSpeed
    { 

		private string _name = @"Coil:WaterHeating:AirToWaterHeatPump:VariableSpeed";
		private string _note = @"\lstinline!Coil:WaterHeating:AirToWaterHeatPump:VariableSpeed! object described here models an air-to-water DX compression system to determine its air-side and water-side performance.
Unlike the \lstinline!WaterHeater:HeatPump:PumpedCondenser! it has multiple, and up to 10, speeds.

It can be used in \lstinline!CoilSystem:IntegratedHeatPump:AirSource! or \lstinline!Coil:WaterHeating:AirToWaterHeatPump:Pumped! which are defined elsewhere in this document.

This DX coil object calculates the air-side sensible and latent cooling capacity at the specific operating conditions for each simulation timestep, as well as the condenser's water-side temperature difference at a given condenser water flow rate.

The heat pump water heater DX coil model performs the following major functions:



  calculates the electric consumption of the DX compressor and water pump

  calculates the amount of heat delivered to the water tank

  calculates the electric consumption of the compressor's crankcase heater

  calculates the air-side performance of the DX coil


The input fields for this object are described below in detail:

";
		

		private static readonly System.Lazy<CoilWaterHeatingAirToWaterHeatPumpVariableSpeed> instance = new System.Lazy<CoilWaterHeatingAirToWaterHeatPumpVariableSpeed>(() => new CoilWaterHeatingAirToWaterHeatPumpVariableSpeed());
        private static CoilWaterHeatingAirToWaterHeatPumpVariableSpeed Value => instance.Value;
		public static string Name => Value._name;
        public static string Note => Value._note;
		private CoilWaterHeatingAirToWaterHeatPumpVariableSpeed(){}



}

	public sealed class CoilCoolingWaterToAirHeatPumpParameterEstimation
    { 

		private string _name = @"Coil:Cooling:WaterToAirHeatPump:ParameterEstimation";
		private string _note = @"The {Coil:Cooling:WaterToAirHeatPump:ParameterEstimation} coil is a deterministic model that requires parameters to describe the operating conditions of the heat pump's components. The parameters are generated from the manufacturer catalog data using multi-variable optimization method. In addition, the cooling coil model can be used for 3 type of compressors: {reciprocating}, {rotary} and {scroll}. Descriptions and strength of each respective model is available in the following references:

Jin, Hui. 2002. Parameter Estimation Based Models of Water Source Heat Pumps. Phd. Thesis, Department of Mechanical and Aerospace Engineering, Oklahoma State University. (downloadable from \href{http://www.hvac.okstate.edu}{http://www.hvac.okstate.edu/})

Tang,C. C. 2005. Modeling Packaged Heat Pumps in Quasi-Steady State Energy Simulation Program. M.S. Thesis. Department of Mechanical and Aerospace Engineering, Oklahoma State University. (downloadable from \href{http://www.hvac.okstate.edu}{http://www.hvac.okstate.edu/})
";
		

		private static readonly System.Lazy<CoilCoolingWaterToAirHeatPumpParameterEstimation> instance = new System.Lazy<CoilCoolingWaterToAirHeatPumpParameterEstimation>(() => new CoilCoolingWaterToAirHeatPumpParameterEstimation());
        private static CoilCoolingWaterToAirHeatPumpParameterEstimation Value => instance.Value;
		public static string Name => Value._name;
        public static string Note => Value._note;
		private CoilCoolingWaterToAirHeatPumpParameterEstimation(){}

	private string _Field_Name = @"This alpha field contains the identifying name for the coil. Any reference to this coil by another object (e.g., AirLoopHVAC:UnitaryHeatPump:WaterToAir) will use this name.";
		public static string Field_Name => Value._Field_Name;

		private string _Field_CompressorType = @"Type of compressor mode used for the heat pump. Choices available are reciprocating, rotary and scroll compressor. Note that the parameters vary for different compressor.";
		public static string Field_CompressorType => Value._Field_CompressorType;

		private string _Field_RefrigerantType = @"This alpha field contains the type of refrigerant used by the heat pump.";
		public static string Field_RefrigerantType => Value._Field_RefrigerantType;

		private string _Field_DesignSourceSideFlowRate = @"This numeric field defines the water flow rate though the coil in m3/sec";
		public static string Field_DesignSourceSideFlowRate => Value._Field_DesignSourceSideFlowRate;

		private string _Field_NominalCoolingCoilCapacity = @"This numeric field defines the nominal cooling capacity for the WatertoAirHP cooling coil in Watts.";
		public static string Field_NominalCoolingCoilCapacity => Value._Field_NominalCoolingCoilCapacity;

		private string _Field_NominalTimeForCondensateRemovalToBegin = @"This numeric field defines the nominal time (in seconds) after startup for condensate to begin leaving the coil's condensate drain line at the coil's rated airflow and temperature conditions, starting with a dry coil. Nominal time is equal to the ratio of the energy of the coil's maximum condensate holding capacity (J) to the coil's steady-state latent capacity (W). Suggested value is 1000; zero value means the latent degradation model is disabled. The default value for this field is zero.";
		public static string Field_NominalTimeForCondensateRemovalToBegin => Value._Field_NominalTimeForCondensateRemovalToBegin;

		private string _Field_RatioOfInitialMoistureEvaporationRateAndSteadyStateLatentCapacity = @"This numeric field defines ratio of the initial moisture evaporation rate from the cooling coil (when the compressor first turns off, in Watts) and the coil's steady-state latent capacity (Watts) at rated airflow and temperature conditions. Suggested value is 1.5; zero value means the latent degradation model is disabled. The default value for this field is zero.";
		public static string Field_RatioOfInitialMoistureEvaporationRateAndSteadyStateLatentCapacity => Value._Field_RatioOfInitialMoistureEvaporationRateAndSteadyStateLatentCapacity;

		private string _Field_HighPressureCutoff = @"This numeric field defines the compressor s maximum allowable pressure in Pascal (N/m2)";
		public static string Field_HighPressureCutoff => Value._Field_HighPressureCutoff;

		private string _Field_LowPressureCutoff = @"This numeric field defines the compressor s minimum allowable pressure in Pascal (N/m2)";
		public static string Field_LowPressureCutoff => Value._Field_LowPressureCutoff;

		private string _Field_WaterInletNodeName = @"This alpha field contains the cooling coil source side inlet node name.";
		public static string Field_WaterInletNodeName => Value._Field_WaterInletNodeName;

		private string _Field_WaterOutletNodeName = @"This alpha field contains the cooling coil source side outlet node name.";
		public static string Field_WaterOutletNodeName => Value._Field_WaterOutletNodeName;

		private string _Field_AirInletNodeName = @"This alpha field contains the cooling coil air inlet node name.";
		public static string Field_AirInletNodeName => Value._Field_AirInletNodeName;

		private string _Field_AirOutletNodeName = @"This alpha field contains the cooling coil air outlet node name.";
		public static string Field_AirOutletNodeName => Value._Field_AirOutletNodeName;

		private string _CoolingCoilParameters = @"Depending on the type of compressor and the source side fluid specified, the type of parameters and values also differs. An Excel Spreadsheet is developed to estimate the parameters based on the manufacturer data. The general parameters are listed first followed by specific parameters required by the respective compressor model. Lastly, parameters are listed based on the type of source side fluid used.";
		public static string CoolingCoilParameters => Value._CoolingCoilParameters;

		private string _Field_LoadSideTotalHeatTransferCoefficient = @"This numeric field defines the estimated parameter {load side total heat transfer coefficient} in W/K. This field was previously known as Parameter 1.";
		public static string Field_LoadSideTotalHeatTransferCoefficient => Value._Field_LoadSideTotalHeatTransferCoefficient;

		private string _Field_LoadSideOutsideSurfaceHeatTransferCoefficient = @"This numeric field defines the estimated parameter {load side outside surface heat transfer coefficient} in W/K. This field was previously known as Parameter 2.";
		public static string Field_LoadSideOutsideSurfaceHeatTransferCoefficient => Value._Field_LoadSideOutsideSurfaceHeatTransferCoefficient;

		private string _Field_SuperheatTemperatureAtTheEvaporatorOutlet = @"This numeric field defines the estimated parameter {superheat temperature} at the evaporator outlet in ??C. This field was previously known as Parameter 3.";
		public static string Field_SuperheatTemperatureAtTheEvaporatorOutlet => Value._Field_SuperheatTemperatureAtTheEvaporatorOutlet;

		private string _Field_CompressorPowerLosses = @"This numeric field defines the estimated parameter {compressor power losses}, which accounts for the loss of work due to mechanical and electrical losses in the compressor in Watts. This field was previously known as Parameter 4.";
		public static string Field_CompressorPowerLosses => Value._Field_CompressorPowerLosses;

		private string _Field_CompressorEfficiency = @"This numeric field defines the estimated parameter of the {compressor s efficiency}. The compressor efficiency is formulated as the equation below:

\begin{equation}
\eta  = \frac{{{{\dot W}_{Theoritical}}}}{{{{\dot W}_{CompInput}} - {{\dot W}_{Loss}}}}
\end{equation}

This field was previously know as Parameter 5.";
		public static string Field_CompressorEfficiency => Value._Field_CompressorEfficiency;

		private string _Field_CompressorPistonDisplacement = @"This numeric field defines the estimated parameter {piston displacement of the compressor} in m3/s. This field was part of what was previously known as Parameter 6. It should be used when the Compressor type is either Reciprocating and Rotary. The field should be left blank when Compressor type is Scroll.";
		public static string Field_CompressorPistonDisplacement => Value._Field_CompressorPistonDisplacement;

		private string _Field_CompressorSuctionDischargePressureDrop = @"This numeric field defines the estimated parameter {pressure drop} at the compressor suction and discharge in Pascals (N/m2). This field was part of what was previously known as Parameter 7. It should be used when the Compressor type is either Reciprocating and Rotary. The field should be left blank when Compressor type is Scroll.";
		public static string Field_CompressorSuctionDischargePressureDrop => Value._Field_CompressorSuctionDischargePressureDrop;

		private string _Field_CompressorClearanceFactor = @"This numeric field defines the estimated parameter {clearance factor of the compressor}. This parameter is dimensionless. This field was part of what was previously known as Parameter 8. It should only be used when the Compressor type is Reciprocating. The field should be left blank when Compressor type is Scroll or Rotary.";
		public static string Field_CompressorClearanceFactor => Value._Field_CompressorClearanceFactor;

		private string _Field_RefrigerantVolumeFlowRate = @"This numeric field defines the {refrigerant volume flow rate} at the beginning of the compression [m3/s]. This field was part of what was previously known as Parameter 6. It should only be used when the Compressor type is Scroll. The field should be left blank when Compressor type is Reciprocating or Rotary.";
		public static string Field_RefrigerantVolumeFlowRate => Value._Field_RefrigerantVolumeFlowRate;

		private string _Field_VolumeRatio = @"This numeric field defines the built-in-{volume ratio}. This field was part of what was previously known as Parameter 7. It should only be used when the Compressor type is Scroll. The field should be left blank when Compressor type is Reciprocating or Rotary.";
		public static string Field_VolumeRatio => Value._Field_VolumeRatio;

		private string _Field_LeakRateCoefficient = @"This numeric field defines the {leak rate coefficient} for the relationship between pressure ratio and leakage rate. This field was part of what was previously known as Parameter 8. It should only be used when the Compressor type is Scroll. The field should be left blank when Compressor type is Reciprocating or Rotary.";
		public static string Field_LeakRateCoefficient => Value._Field_LeakRateCoefficient;

		private string _Field_SourceSideHeatTransferCoefficient = @"This numeric field defines the estimated parameter {source side heat transfer coefficient} in W/K. This field was part of what was previously known as Parameter 9. It should only be used when the Source Side Fluid Name is Water.";
		public static string Field_SourceSideHeatTransferCoefficient => Value._Field_SourceSideHeatTransferCoefficient;

		private string _Field_SourceSideHeatTransferResistance1 = @"This numeric field defines the estimated parameter {source side heat transfer resistance} 1. Unit is dimensionless. This field was part of what was previously known as Parameter 9. It should only be used when the Source Side Fluid Name is an antifreeze.";
		public static string Field_SourceSideHeatTransferResistance1 => Value._Field_SourceSideHeatTransferResistance1;

		private string _Field_SourceSideHeatTransferResistance2 = @"This numeric field defines the estimated parameter {source side heat transfer resistance} 2. Unit is W/K. This field was previously known as Parameter 10. It should only be used when the Source Side Fluid Name is an antifreeze.

Following is an example for COIL:WaterToAirHP:ParameterEstimation:Cooling coil input



Coil:Cooling:WaterToAirHeatPump:ParameterEstimation,
  Heat Pump Cooling Mode AHU1,   !- Name
  Scroll,                                   !- Compressor Type
  R22,                                         !- Refrigerant Type
  0.0015,                                   !- Design Source Side Flow Rate {m3/s}
  38000,                                     !- Nominal Cooling Coil Capacity {W}
  0,                                             !- Nominal Time for Condensate Removal to Begin {s}
  0,         !- Ratio of Initial Moisture Evaporation Rate and Steady State Latent Capacity {dimensionless}
  3000000,                                 !- High Pressure Cutoff {Pa}
  0,                                             !- Low Pressure Cutoff {Pa}
  AHU1 Water to Air Heat Pump Source Side1 Inlet Node,   !- Water Inlet Node Name
  AHU1 Water to Air Heat Pump Source Side1 Outlet Node,   !- Water Outlet Node Name
  AHU 1 Supply Fan Outlet, !- Air Inlet Node Name
  Cooling Coil Air Outlet Node AHU1,   !- Air Outlet Node Name
  3.78019E+03,                         !- Load Side Total Heat Transfer Coefficient {W/K}
  3.41103E+03,                         !- Load Side Outside Surface Heat Transfer Coefficient {W/K}
  1.57066E+00,                         !- Superheat Temperature at the Evaporator Outlet {C}
  2.23529E+03,                         !- Compressor Power Losses {W}
  1.34624E+00,                         !- Compressor Efficiency
  ,                                               !- Compressor Piston Displacement {m3/s}
  ,                                               !- Compressor Suction/Discharge Pressure Drop {Pa}
  ,                                               !- Compressor Clearance Factor {dimensionless}
  9.74424E-03,                         !- Refrigerant Volume Flow Rate {m3/s}
  2.30803E+00,                         !- Volume Ratio {dimensionless}
  2.06530E-02,                         !-Leak Rate Coefficient
  1.92757E+03,                         !- Source Side Heat Transfer Coefficient {W/K}
  ,                                               !- Source Side Heat Transfer Resistance1 {dimensionless}
  ;                                               !- Source Side Heat Transfer Resistance2 {W/K}";
		public static string Field_SourceSideHeatTransferResistance2 => Value._Field_SourceSideHeatTransferResistance2;

	

}

	public sealed class CoilCoolingWaterToAirHeatPumpEquationFit
    { 

		private string _name = @"Coil:Cooling:WaterToAirHeatPump:EquationFit";
		private string _note = @"The Coil:Cooling:WaterToAirHeatPump:EquationFit is a simple curve-fit model that requires coefficients generated from the heat pump catalog data. This is an equation-fit model that resembles a black box with no usage of heat transfer equations. The performance of the heat pump is modeled using curves fitted from the catalog data. Description of the equation-fit model is available in the following reference:

Tang,C. C. 2005. Modeling Packaged Heat Pumps in Quasi-Steady State Energy Simulation Program. M.S. Thesis. Department of Mechanical and Aerospace Engineering, Oklahoma State University. (downloadable from \href{http://www.hvac.okstate.edu}{http://www.hvac.okstate.edu/})
";
		

		private static readonly System.Lazy<CoilCoolingWaterToAirHeatPumpEquationFit> instance = new System.Lazy<CoilCoolingWaterToAirHeatPumpEquationFit>(() => new CoilCoolingWaterToAirHeatPumpEquationFit());
        private static CoilCoolingWaterToAirHeatPumpEquationFit Value => instance.Value;
		public static string Name => Value._name;
        public static string Note => Value._note;
		private CoilCoolingWaterToAirHeatPumpEquationFit(){}

	private string _Field_Name = @"This alpha field contains the identifying name for the coil. Any reference to this coil by another object (e.g., AirLoopHVAC:UnitaryHeatPump:WaterToAir) will use this name.";
		public static string Field_Name => Value._Field_Name;

		private string _Field_WaterInletNodeName = @"This alpha field contains the cooling coil source side inlet node name.";
		public static string Field_WaterInletNodeName => Value._Field_WaterInletNodeName;

		private string _Field_WaterOutletNodeName = @"This alpha field contains the cooling coil source side outlet node name.";
		public static string Field_WaterOutletNodeName => Value._Field_WaterOutletNodeName;

		private string _Field_AirInletNodeName = @"This alpha field contains the cooling coil air inlet node name.";
		public static string Field_AirInletNodeName => Value._Field_AirInletNodeName;

		private string _Field_AirOutletNodeName = @"This alpha field contains the cooling coil air outlet node name.";
		public static string Field_AirOutletNodeName => Value._Field_AirOutletNodeName;

		private string _Field_RatedAirFlowRate = @"This numeric field contains the rated volumetric air flow rate on the load side of the heat pump in m3/s. This field is autosizable.";
		public static string Field_RatedAirFlowRate => Value._Field_RatedAirFlowRate;

		private string _Field_RatedWaterFlowRate = @"This numeric field contains the rated volumetric water flow rate on the source side of the heat pump in m3/s. This field is autosizable.";
		public static string Field_RatedWaterFlowRate => Value._Field_RatedWaterFlowRate;

		private string _Field_GrossRatedTotalCoolingCapacity = @"This numeric field contains the gross rated total cooling capacity of the heat pump in W. This field is autosizable.The gross rated total cooling capacity should be within 20% of the gross rated heating capacity, otherwise a warning message is issued. The gross rated total cooling capacity shouldnot account for the effect of supply air fan heat.";
		public static string Field_GrossRatedTotalCoolingCapacity => Value._Field_GrossRatedTotalCoolingCapacity;

		private string _Field_GrossRatedSensibleCoolingCapacity = @"This numeric field contains the gross rated sensible capacity of the heat pump in W. This field is autosizable. The gross rated sensible cooling capacity shouldnot account for the effect of supply air fan heat.";
		public static string Field_GrossRatedSensibleCoolingCapacity => Value._Field_GrossRatedSensibleCoolingCapacity;

		private string _Field_RatedCoolingCoefficientOfPerformance = @"This numeric field contains the rated cooling coefficient of performance of the heat pump.";
		public static string Field_RatedCoolingCoefficientOfPerformance => Value._Field_RatedCoolingCoefficientOfPerformance;

		private string _Field_TotalCoolingCapacityCoefficient1To5 = @"These numeric fields contain the first to fifth coefficient for the heat pump total cooling capacity.";
		public static string Field_TotalCoolingCapacityCoefficient1To5 => Value._Field_TotalCoolingCapacityCoefficient1To5;

		private string _Field_SensibleCoolingCapacityCoefficient1To6 = @"These numeric fields contain the first to sixth coefficient for the heat pump sensible cooling capacity.";
		public static string Field_SensibleCoolingCapacityCoefficient1To6 => Value._Field_SensibleCoolingCapacityCoefficient1To6;

		private string _Field_CoolingPowerConsumptionCoefficient1To5 = @"These numeric fields contain the first to fifth coefficient for the heat pump power consumption.";
		public static string Field_CoolingPowerConsumptionCoefficient1To5 => Value._Field_CoolingPowerConsumptionCoefficient1To5;

		private string _Field_NominalTimeForCondensateRemovalToBegin = @"This numeric field defines the nominal time (in seconds) after startup for condensate to begin leaving the coil's condensate drain line at the coil's rated airflow and temperature conditions, starting with a dry coil. Nominal time is equal to the ratio of the energy of the coil's maximum condensate holding capacity (J) to the coil's steady-state latent capacity (W). Suggested value is 1000; zero value means the latent degradation model is disabled. The default value for this field is zero.";
		public static string Field_NominalTimeForCondensateRemovalToBegin => Value._Field_NominalTimeForCondensateRemovalToBegin;

		private string _Field_RatioOfInitialMoistureEvaporationRateAndSteadyStateLatentCapacity = @"This numeric field defines ratio of the initial moisture evaporation rate from the cooling coil (when the compressor first turns off, in Watts) and the coil's steady-state latent capacity (Watts) at rated airflow and temperature conditions. Suggested value is 1.5; zero value means the latent degradation model is disabled. The default value for this field is zero.

Following is an example of the input for Coil:WaterToAirHP:EquationFit:Cooling coil



Coil:Cooling:WaterToAirHeatPump:EquationFit,
  Heat Pump Cooling Mode,!- Name of Coil
  Water to Air Heat Pump Source Side1 Inlet Node,!- Coil Water Inlet Node Name
  Water to Air Heat Pump Source Side1 Outlet Node,!- Coil Water Outlet Node Name
  Cooling Coil Air Inlet Node,!- Coil Air Inlet Node Name
  Heating Coil Air Inlet Node,!- Coil Air Outlet Node Name
  4.6015E-01,!- Rated Air Volumetric Flow Rate
  2.8391E-04,!- Rated Water Volumetric Flow Rate
  23125.59,!- Gross Rated Total Cooling Capacity
  16267.05,!- Gross Rated Sensible Cooling Capacity
  4.7,!- Rated Cooling Coefficient of Performance
  -0.68126221,!- Total Cooling Capacity Coefficient 1
  1.99529297,!- Total Cooling Capacity Coefficient 2
  -0.93611888,!- Total Cooling Capacity Coefficient 3
  0.02081177,!- Total Cooling Capacity Coefficient 4
  0.008438868,!- Total Cooling Capacity Coefficient 5
  2.24209455,!- Sensible Cooling Capacity Coefficient 1
  7.28913391,!- Sensible Cooling Capacity Coefficient 2
  -9.06079896,!- Sensible Cooling Capacity Coefficient 3
  -0.36729404,!- Sensible Cooling Capacity Coefficient 4
  0.218826161,!- Sensible Cooling Capacity Coefficient 5
  0.00901534,!- Sensible Cooling Capacity Coefficient 6
  -3.20456384,!- Cooling Power Consumption Coefficient 1
  0.47656454,!- Cooling Power Consumption Coefficient 2
  3.16734236,!- Cooling Power Consumption Coefficient 3
  0.10244637,!- Cooling Power Consumption Coefficient 4
  -0.038132556,!- Cooling Power Consumption Coefficient 5
  0,!- Nominal Time for Condensate Removal to Begin
  0;!- Ratio of Initial Moisture Evaporation Rate and Steady-state Latent Capacity";
		public static string Field_RatioOfInitialMoistureEvaporationRateAndSteadyStateLatentCapacity => Value._Field_RatioOfInitialMoistureEvaporationRateAndSteadyStateLatentCapacity;

	

}

	public sealed class CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit
    { 

		private string _name = @"Coil:Cooling:WaterToAirHeatPump:VariableSpeedEquationFit";
		private string _note = @"The Variable-Speed Water-to-Air Cooling Equation Fit Coil is a collection of performance curves that represent the cooling coil at various speed levels. The performance curves should be generated from the heat pump Reference Unit data. This is an equation-fit model that resembles a black box with no usage of heat transfer equations. On the other hand, the model uses the bypass factor approach to calculate sensible heat transfer rate, similar to the one used in the single-speed DX coil. The number of speed levels can range from 2 to 10. The cooling coil has four node connections, i.e.~two air sides and two water sides. The user needs to specify a nominal speed level, at which the gross rated total cooling capacity, rated volumetric air and water flow rates are sized. The rated capacity, rated volumetric flow rates represent the real situation in the air and water loops, and are used to determine and flow rates at various speed levels in the parent objects, e.g.~AirLoopHVAC:UnitaryHeatPump:WaterToAir and ZoneHVAC:WaterToAirHeatPump. It shall be mentioned that the performance correction curves, i.e.~the temperature and flow fraction correction curves, should be normalized to the capacity and flow rates at each individual speed and at the rated conditions, similar to the performance curves used in the DX coils. However, the performance values, e.g.~gross capacities, gross COPs, gross SHRs and flow rates at individual speed levels, should be given regarding a specific unit from the Reference Unit catalog data. In the following content, the statement started with Reference Unit means the actual Reference Unit catalog data. The rated conditions for obtaining the capacities, COPs and SHRs are at indoor dry-bulb temperature of 26.67 ??C (80 ??F), wet bulb temperature of 19.44 ??C (67 ??F), and the source side entering water temperature of 29.4 ??C (85 ??F). Some equations are provided below to help explain the function of the various performance curves and data fields. For a detailed description of the algorithm and how the curves are used in the calculations, please see the Engineering Reference.
";
		

		private static readonly System.Lazy<CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit> instance = new System.Lazy<CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit>(() => new CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit());
        private static CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit Value => instance.Value;
		public static string Name => Value._name;
        public static string Note => Value._note;
		private CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit(){}

	private string _Field_Name = @"This alpha field contains the identifying name for the variable speed cooling coil. Any reference to this coil by another object (e.g., AirLoopHVAC:UnitaryHeatPump:WaterToAir) will use this name.";
		public static string Field_Name => Value._Field_Name;

		private string _Field_WaterInletNodeName = @"This alpha field contains the cooling coil source side inlet node name.";
		public static string Field_WaterInletNodeName => Value._Field_WaterInletNodeName;

		private string _Field_WaterOutletNodeName = @"This alpha field contains the cooling coil source side outlet node name.";
		public static string Field_WaterOutletNodeName => Value._Field_WaterOutletNodeName;

		private string _Field_AirInletNodeName = @"This alpha field contains the cooling coil load side inlet node name.";
		public static string Field_AirInletNodeName => Value._Field_AirInletNodeName;

		private string _Field_AirOutletNodeName = @"This alpha field contains the cooling coil load side outlet node name.";
		public static string Field_AirOutletNodeName => Value._Field_AirOutletNodeName;

		private string _Field_NumberOfSpeeds = @"This numeric field contains the maximum number of speed levels that the module uses. The number of speeds, for which the user input the performance data and curves, should be equal or higher than the maximum number. The performance inputs at higher speed levels are ignored.";
		public static string Field_NumberOfSpeeds => Value._Field_NumberOfSpeeds;

		private string _Field_NominalSpeedLevel = @"This numeric field defines the nominal speed level, at which the rated capacity, rated air and water volumetric flow rates are correlated.";
		public static string Field_NominalSpeedLevel => Value._Field_NominalSpeedLevel;

		private string _Field_GrossRatedTotalCoolingCapacityAtSelectedNominalSpeedLevel = @"This numeric field contains the gross rated total cooling capacity at the nominal speed level. This field is autosizable. The gross rated total cooling capacity is used to determine a capacity scaling factor, as compared to the Reference Unit capacity at the nominal speed level.

\begin{equation}
CapacityScaleFactor = \frac{{GrossRatedTotalCoolingCapacity}}{{ReferenceUnitCapacity@NominalSpeedLevel}}
\end{equation}

And then, this scaling factor is used to determine capacities at rated conditions for other speed levels, as below,

\begin{equation}
  \begin{array}{l}
    \rm{GrossRatedCapacity} @ \rm{SpeedLevel} \left( x \right) = \rm{CapacityScaleFactor} \\
    \quad \quad \quad \quad \times \rm{ReferenceUnitCapacity} @ \rm{SpeedLevel}( x )
  \end{array}
\end{equation}";
		public static string Field_GrossRatedTotalCoolingCapacityAtSelectedNominalSpeedLevel => Value._Field_GrossRatedTotalCoolingCapacityAtSelectedNominalSpeedLevel;

		private string _Field_RatedVolumetricAirFlowRate = @"This numeric field contains the rated volumetric air flow rate on the load side of the heat pump corresponding to the nominal speed level. This field is autosizable. The value is used to determine an internal scaling factor, and calculate the air flow rates in the parent objects. It is recommended that the ratio of the rated volumetric air flow rate to the rated capacity is the same as the unit performance from the Reference Unit data.

\begin{equation}
  \begin{array}{l}
    AirFlowScaleFactor = \\\quad \quad \quad \quad \quad \frac{{RatedVolumetricAirFlowRate}}{{ReferenceUnitVolAirFlowRate@NominalSpeedLevel \times CapacityScaleFactor}}
  \end{array}
\end{equation}

And the volumetric air flow rates in the parent objects are calculated as below,

\begin{equation}
  \begin{array}{l}
    \rm{LoopVolumetricAirFlowRate} @ \rm{SpeedLevel} \left( x \right) = \rm{AirFlowScaleFactor} \\
    \quad \quad \quad \times \rm{ReferenceUnitVolAirFlowRate} @ \rm{SpeedLevel}(x) \\
    \quad \quad \quad \times \rm{CapacityScaleFactor}
  \end{array}
\end{equation}";
		public static string Field_RatedVolumetricAirFlowRate => Value._Field_RatedVolumetricAirFlowRate;

		private string _Field_RatedVolumetricWaterFlowRate = @"This numeric field contains the rated volumetric water flow rate on the source side of the heat pump at the nominal speed level. This field is autosizable. The value is used to determine an internal scaling factor, and calculate the water flow rates in the water loop. It is recommended that the ratio of the rated volumetric water flow rate to the rated capacity is the same as the unit performance from the Reference Unit data.

\begin{equation}
  \begin{array}{l}
    WaterFlowScaleFactor = \\
    \quad \quad \quad \frac{{RatedVolumetricWaterFlowRate}}{{ReferenceUnitVolWaterFlowRate@NominalSpeedLevel \times CapacityScaleFactor}}
  \end{array}
\end{equation}

And the required volumetric water flow rates at the speed levels in the parent objects, other than the nominal speed, are calculated as below,

\begin{equation}
  \begin{array}{l}
    \rm{LoopVolumetricWaterFlowRate} @ \rm{SpeedLevel} \left( x \right) = \rm{WaterFlowScaleFactor} \\
    \quad \quad \quad \times \rm{ReferenceUnitVolWaterFlowRate} @ \rm{SpeedLevel}(x) \\
    \quad \quad \quad  \times \rm{CapacityScaleFactor}
  \end{array}
\end{equation}";
		public static string Field_RatedVolumetricWaterFlowRate => Value._Field_RatedVolumetricWaterFlowRate;

		private string _Field_NominalTimeForCondensateRemovalToBegin = @"This numeric field defines the nominal time (in seconds) after startup for condensate to begin leaving the coil's condensate drain line at the coil's rated airflow and temperature conditions, starting with a dry coil. Nominal time is equal to the ratio of the energy of the coil's maximum condensate holding capacity (J) to the coil's steady-state latent capacity (W). Suggested value is 1000; zero value means the latent degradation model is disabled. The default value for this field is zero.";
		public static string Field_NominalTimeForCondensateRemovalToBegin => Value._Field_NominalTimeForCondensateRemovalToBegin;

		private string _Field_RatioOfInitialMoistureEvaporationRateAndSteadyStateLatentCapacity = @"This numeric field defines ratio of the initial moisture evaporation rate from the cooling coil (when the compressor first turns off, in Watts) and the coil's steady-state latent capacity (Watts) at rated airflow and temperature conditions. Suggested value is 1.5; zero value means the latent degradation model is disabled. The default value for this field is zero.";
		public static string Field_RatioOfInitialMoistureEvaporationRateAndSteadyStateLatentCapacity => Value._Field_RatioOfInitialMoistureEvaporationRateAndSteadyStateLatentCapacity;

		private string _Field_FlagForUsingHotGasReheat0Or1 = @"This numeric field dictates whether to use the recoverable waste heat for reheating the supply air, downstream of the coil. The value 1 means using the hot gas reheating, and 0 means not using. If the hot gas reheating is turned on, the recoverable waste heat is subtracted from both the total cooling capacity and the sensible cooling capacity. The default value for this field is zero.";
		public static string Field_FlagForUsingHotGasReheat0Or1 => Value._Field_FlagForUsingHotGasReheat0Or1;

		private string _Field_PartLoadFractionCorrelationCurveName = @"This alpha field defines the name of a quadratic or cubic performance curve (Ref: Performance Curves) that parameterizes the variation of electrical power input to the unit as a function of the part load ratio (PLR, sensible or latent load/steady-state sensible or latent cooling capacity for Speed 1), in the case that the unit operates under the lowest speed, i.e.~on/off. The product of the rated EIR and EIR modifier curves is divided by the output of this curve to give the effective EIR for a given simulation timestep for Speed 1. The part load fraction (PLF) correlation accounts for efficiency losses due to compressor cycling. The part load fraction correlation should be normalized to a value of 1.0 when the part load ratio equals 1.0 (i.e., no efficiency losses when the compressor(s) run continuously for the simulation timestep). For PLR values between 0 and 1 (0 < = PLR < 1), the following rules apply:

PLF > = 0.7 and PLF > = PLR

If PLF < 0.7, the program resets the PLF value to 0.7, and the simulation proceeds. The runtime fraction of the coil is defined as PLR/PLF. If PLF < PLR, the runtime fraction of the coil is limited to 1.0. A typical part load fraction correlation would be:

\begin{equation}
PLF = 0.85 + 0.15 \times PLR
\end{equation}

If the user wishes to model no efficiency degradation due to compressor cycling, the part load fraction correlation should be defined as follows:

\begin{equation}
PLF = 0.85 + 0.0 \times PLR
\end{equation}";
		public static string Field_PartLoadFractionCorrelationCurveName => Value._Field_PartLoadFractionCorrelationCurveName;

		private string _Field_GroupRatedSpecificationPerformanceCurvesAndWasteHeatData = @"The performance for each cooling speed must be specified as shown below. They should be directly given from the Reference Unit catalog data. All inputs for Speed 1 are required, followed by the optional inputs for other speeds.";
		public static string Field_GroupRatedSpecificationPerformanceCurvesAndWasteHeatData => Value._Field_GroupRatedSpecificationPerformanceCurvesAndWasteHeatData;

		private string _Field_SpeedXReferenceUnitGrossRatedTotalCoolingCapacity = @"This numeric field defines the total, full load cooling capacity in watts of the water-to-air cooling coil unit at rated conditions for Speed <x> operation. The value entered here must be greater than 0. The gross rated total capacity should not account for the effect of supply air fan heat.";
		public static string Field_SpeedXReferenceUnitGrossRatedTotalCoolingCapacity => Value._Field_SpeedXReferenceUnitGrossRatedTotalCoolingCapacity;

		private string _Field_SpeedXReferenceUnitGrossRatedSensibleHeatRatio = @"This numeric field defines sensible heat transfer ratio (SHR = gross sensible cooling capacity divided by gross total cooling capacity) of the cooling coil unit at rated conditions for Speed <x> operation. The value entered here must be greater than 0.0 and less than 1.0. This value should be obtained from the Reference Unit data. The gross rated SHR should not account for the effect of supply air fan heat.";
		public static string Field_SpeedXReferenceUnitGrossRatedSensibleHeatRatio => Value._Field_SpeedXReferenceUnitGrossRatedSensibleHeatRatio;

		private string _Field_SpeedXReferenceUnitGrossRatedCoolingCOP = @"This numeric field defines the coefficient of performance (COP = gross total cooling capacity in watts divided by electrical power input in watts) of the cooling coil unit at rated conditions for Speed <x> operation. The value entered here must be greater than 0. The input power includes power for the compressor(s) and accessories, but does not include the power consumptions of the indoor supply air fan and water pump. The gross COP should not account for the supply air fan.";
		public static string Field_SpeedXReferenceUnitGrossRatedCoolingCOP => Value._Field_SpeedXReferenceUnitGrossRatedCoolingCOP;

		private string _Field_SpeedXReferenceUnitRatedAirFlowRate = @"This numeric field defines the volumetric air flow rate, in m^{3}per second, across the cooling coil at rated conditions for Speed <x> operation. The value entered here should be directly from the Reference Unit data, corresponding to the given gross rated total cooling capacity and gross rated cooling COP at the speed, as above.";
		public static string Field_SpeedXReferenceUnitRatedAirFlowRate => Value._Field_SpeedXReferenceUnitRatedAirFlowRate;

		private string _Field_SpeedXReferenceUnitRatedWaterFlowRate = @"This numeric field defines the volumetric water flow rate, in m^{3}per second, flowing at the source side of the cooling coil at rated conditions for Speed <x> operation. The value entered here should be directly from the Reference Unit data, corresponding to the given gross rated total cooling capacity and gross rated cooling COP at the speed, as above.";
		public static string Field_SpeedXReferenceUnitRatedWaterFlowRate => Value._Field_SpeedXReferenceUnitRatedWaterFlowRate;

		private string _Field_SpeedXTotalCoolingCapacityFunctionOfTemperatureCurveName = @"This alpha field defines the name of a bi-quadratic performance curve for Speed <x> (ref: Performance Curves) that parameterizes the variation of the gross total cooling capacity as a function of the both the indoor wet-bulb and source side entering water temperature, from the Reference Unit. The output of this curve is multiplied by the gross rated total cooling capacity at the speed to give the gross total cooling capacity at specific temperature operating conditions (i.e., at an indoor air wet-bulb temperature or entering water temperature different from the rating point temperature). It should be noted that the curve is normalized to the cooling capacity at Speed<x> from the Reference Unit data, and have the value of 1.0 at the rating point.";
		public static string Field_SpeedXTotalCoolingCapacityFunctionOfTemperatureCurveName => Value._Field_SpeedXTotalCoolingCapacityFunctionOfTemperatureCurveName;

		private string _Field_SpeedXTotalCoolingCapacityFunctionOfAirFlowFractionCurveName = @"This alpha field defines the name of a quadratic or cubic performance curve for Speed <x> (ref: Performance Curves) that parameterizes the variation of the gross total cooling capacity as a function of the ratio of actual air flow rate across the cooling coil to the design air flow rate (i.e., fraction of full load flow at Speed <x>, from the Reference Unit data). The curve is normalized to have the value of 1.0 when the actual air flow rate equals the design air flow rate, at Speed <x>.";
		public static string Field_SpeedXTotalCoolingCapacityFunctionOfAirFlowFractionCurveName => Value._Field_SpeedXTotalCoolingCapacityFunctionOfAirFlowFractionCurveName;

		private string _Field_SpeedXTotalCoolingCapacityFunctionOfWaterFlowFractionCurveName = @"This alpha field defines the name of a quadratic or cubic performance curve for Speed <x> (ref: Performance Curves) that parameterizes the variation of the gross total cooling capacity as a function of the ratio of actual water flow rate across the cooling coil to the design water flow rate (i.e., fraction of full load flow), at Speed <x>, from the Reference Unit data. The curve is normalized to have the value of 1.0 when the actual water flow rate equals the design air flow rate, at Speed <x>.

The actual total cooling capacity at Speed <x>, considering variations in temperatures, air and water flow rates is calculated as below:

\begin{equation}
  \begin{array}{l}
    \rm{ActualCapacity} @ \rm{SpeedLevel} \left( x \right) = \rm{CapacityScaleFactor} \\
    \quad \quad \quad \times \rm{ReferenceUnitCapacity} @ \rm{SpeedLevel}(x) \\
    \quad \quad \quad \times \rm{TotCapTempModFac} @ \rm{SpeedLevel}(x) \\
    \quad \quad \quad \times \rm{TotCapAirFlowModFac} @ \rm{SpeedLevel}(x) \\
    \quad \quad \quad \times \rm{TotCapWaterFlowModFac} @ \rm{SpeedLevel}(x)
  \end{array}
\end{equation}";
		public static string Field_SpeedXTotalCoolingCapacityFunctionOfWaterFlowFractionCurveName => Value._Field_SpeedXTotalCoolingCapacityFunctionOfWaterFlowFractionCurveName;

		private string _Field_SpeedXEnergyInputRatioFunctionOfTemperatureCurveName = @"This alpha field defines the name of a bi-quadratic, quadratic or cubic performance curve for Speed <x> (ref: Performance Curves) that parameterizes the variation of the energy input ratio (EIR) as a function of the both the indoor air wet-bulb and entering water temperatures The EIR is the inverse of the COP. The output of this curve is multiplied by the rated EIR (inverse of rated COP at Speed <x> from the Reference Unit data) to give the EIR at specific temperature operating conditions (i.e., at an indoor air wet-bulb temperature or entering water temperature different from the rating point temperature). The curve is normalized to have the value of 1.0 at the rating point.";
		public static string Field_SpeedXEnergyInputRatioFunctionOfTemperatureCurveName => Value._Field_SpeedXEnergyInputRatioFunctionOfTemperatureCurveName;

		private string _Field_SpeedXEnergyInputRatioFunctionOfAirFlowFractionCurveName = @"This alpha field defines the name of a quadratic or cubic performance curve for Speed <x> (ref: Performance Curves) that parameterizes the variation of the energy input ratio (EIR) as a function of the ratio of actual air flow rate across the cooling coil to the design air flow rate (i.e., fraction of full load flow, at Speed <x> from the Reference Unit data). The EIR is the inverse of the COP. This curve is normalized to a value of 1.0 when the actual air flow rate equals the design air flow rate.";
		public static string Field_SpeedXEnergyInputRatioFunctionOfAirFlowFractionCurveName => Value._Field_SpeedXEnergyInputRatioFunctionOfAirFlowFractionCurveName;

		private string _Field_SpeedXEnergyInputRatioFunctionOfWaterFlowFractionCurveName = @"This alpha field defines the name of a quadratic or cubic performance curve for Speed <x> (ref: Performance Curves) that parameterizes the variation of the energy input ratio (EIR) as a function of the ratio of actual water flow rate across the cooling coil to the design water flow rate (i.e., fraction of full load flow, at Speed <x> from the Reference Unit data). This curve is normalized to a value of 1.0 when the actual air flow rate equals the design air flow rate.

The actual EIR at Speed <x>, considering variations in temperatures, air and water flow rates is calculated as below:

\begin{equation}
  \begin{array}{l}
    ActualEIR@SpeedLevel\left( x \right) = \frac{{1.0}}{{ReferenceUnitCOP@SpeedLevel(x)}} \\
    \quad \quad \quad \times EIRTempModFac@SpeedLevel(x) \\
    \quad \quad \quad \times EIRAirFlowModFac@SpeedLevel(x) \\
    \quad \quad \quad \times EIRWaterFlowModFac@SpeedLevel(x)
  \end{array}
\end{equation}

And, the actual power consumption is calculated:

\begin{equation}
  \begin{array}{l}
    ActualPower@SpeedLevel\left( x \right) = ActualCapacity@SpeedLevel\left( x \right) \\
    \quad \quad \quad \quad  \times ActualEIR@SpeedLevel\left( x \right)
  \end{array}
\end{equation}";
		public static string Field_SpeedXEnergyInputRatioFunctionOfWaterFlowFractionCurveName => Value._Field_SpeedXEnergyInputRatioFunctionOfWaterFlowFractionCurveName;

		private string _Field_SpeedXReferenceUnitWasteHeatFractionOfPowerInput = @"The fraction of heat input to cooling that is available as recoverable waste heat at full load and rated conditions for Speed <x> operation. The part of heat is not discharged to the water loop. And it can be used for hot gas reheating during dehumidification operation, by setting 1 to Flag for Using Hot Gas Reheat.";
		public static string Field_SpeedXReferenceUnitWasteHeatFractionOfPowerInput => Value._Field_SpeedXReferenceUnitWasteHeatFractionOfPowerInput;

		private string _Field_SpeedXWasteHeatFunctionOfTemperatureCurveName = @"The name of a bi-quadratic performance curve (ref: Performance Curves) that parameterizes the variation of the waste heat recovery as a function of indoor wet-bulb temperature and the entering water temperature for Speed <x> from the Reference Unit data. The output of this curve is multiplied by the design recoverable waste heat at specific temperature operating conditions (i.e., at temperatures different from the rating point). The curve is normalized to a value of 1.0 at the rating point.

The actual recoverable waste heat at Speed <x> is calculated as below:

\begin{equation}
  \begin{array}{l}
    ActualWasteHeat@SpeedLevel\left( x \right) = ActualPower@SpeedLevel\left( x \right) \\
    \quad \quad \quad \quad \times WasteHeatFrac@SpeedLevel(x) \\
    \quad \quad \quad \quad \times WasteHeatTempModFac@SpeedLevel(x)
  \end{array}
\end{equation}

An example of this statement in an IDF is:


Coil:Cooling:WaterToAirHeatPump:VariableSpeedEquationFit,
  Sys 1 Heat Pump Cooling Mode,                           !- Name
  Sys 1 Water to Air Heat Pump Source Side1 Inlet Node,   !- Water Inlet Node Name
  Sys 1 Water to Air Heat Pump Source Side1 Outlet Node,  !- Water Outlet Node Name
  Sys 1 Cooling Coil Air Inlet Node,!- Air Inlet Node Name
  Sys 1 Heating Coil Air Inlet Node,!- Air Outlet Node Name
  10.0,                             !- Number of Speeds
  10.0,                             !- Nominal Speed Level
  Autosize,                         !- Gross Rated Total Cooling Capacity {W}
  Autosize,                         !- Rated Air Flow Rate {m3/s}
  Autosize,                         !- Rated Water Flow Rate {m3/s}
  0.0,                              !- Nominal time for Condensate to Begin Leaving the Coil
  0.0,                              !- Initial Moisture Evaporation Rate Divided by Steady-State AC Latent Capacity
  1,                                !- Flag for Using Hot Gas Reheat or Not, 0 = false; 1 = true
  VS Energy Part Load Fraction 1,   !- Energy Part Load Fraction Curve
  1524.1,                           !- Speed 1 Reference Unit Gross Rated Total Cooling Capacity
  0.75,                             !- Speed 1 Reference Unit Gross Sensible Heat Ratio
  4.0,                              !- Speed 1 Reference Unit Gross Cooling COP
  0.1359072,                        !- Speed 1 Reference Unit Rated air flow rate
  0.000381695,                      !- Speed 1 Reference Unit Rated water flow rate
  TC VS Temp1 Test,                 !- Speed 1 Total Cooling Capacity Function of Temperature Curve Name
  TC VS AirFrac Test,               !- Speed 1 Total Cooling Capacity Function of Air Flow Fraction Curve Name
  TC VS WaterFrac Test,             !- Speed 1 Total Cooling Capacity Function of Water Flow Fraction Curve Name
  EIR VS Temp1 Test,                !- Speed 1 Energy Input Ratio Function of Temperature Curve Name
  EIR VS AirFrac Test,              !- Speed 1 Energy Input Ratio Function of Air Flow Fraction Curve Name
  EIR VS WaterFrac Test,            !- Speed 1 Energy Input Ratio Function of Water Flow Fraction Curve Name
  0.1,                              !- Speed 1 Waste Heat fraction to power input
  wasteHeat VS Temp1 Test,          !- Speed 1 Waste Heat Function of Temperature Curve Name
  1877.9,                           !- Speed 2 Reference Unit Gross Rated Total Cooling Capacity
  0.75,                             !- Speed 2 Reference Unit Gross Sensible Heat Ratio
  4.0,                              !- Speed 2 Reference Unit Gross Cooling COP
  0.151008,                         !- Speed 2 Reference Unit Rated air flow rate
  0.000381695,                      !- Speed 2 Reference Unit Rated water flow rate
  TC VS Temp1 Test,                 !- Speed 2 Total Cooling Capacity Function of Temperature Curve Name
  TC VS AirFrac Test,               !- Speed 2   Total Cooling Capacity Function of Air Flow Fraction Curve Name
  TC VS WaterFrac Test,             !- Speed 2   Total Cooling Capacity Function of Water Flow Fraction Curve Name
  EIR VS Temp1 Test,                !- Speed 2   Energy Input Ratio Function of Temperature Curve Name
  EIR VS AirFrac Test,              !- Speed 2   Energy Input Ratio Function of Air Flow Fraction Curve Name
  EIR VS WaterFrac Test,            !- Speed 2   Energy Input Ratio Function of Water Flow Fraction Curve Name
  0.1,                              !- Speed 2   Waste Heat fraction to power input
  wasteHeat VS Temp1 Test,          !- Speed 2   Waste Heat Function of Temperature Curve Name
  2226.6,                           !- Speed 3 Reference Unit Gross Rated Total Cooling Capacity
  0.75,                             !- Speed 3 Reference Unit Gross Sensible Heat Ratio
  4.0,                              !- Speed 3 Reference Unit Gross Cooling COP
  0.1661088,                        !- Speed 3 Reference Unit Rated air flow rate
  0.000381695,                      !- Speed 3 Reference Unit Rated water flow rate
  TC VS Temp1 Test,                 !- Speed 3 Total Cooling Capacity Function of Temperature Curve Name
  TC VS AirFrac Test,               !- Speed 3 Total Cooling Capacity Function of Air Flow Fraction Curve Name
  TC VS WaterFrac Test,             !- Speed 3 Total Cooling Capacity Function of Water Flow Fraction Curve Name
  EIR VS Temp1 Test,                !- Speed 3 Energy Input Ratio Function of Temperature Curve Name
  EIR VS AirFrac Test,              !- Speed 3 Energy Input Ratio Function of Air Flow Fraction Curve Name
  EIR VS WaterFrac Test,            !- Speed 3 Energy Input Ratio Function of Water Flow Fraction Curve Name
  0.1,                              !- Speed 3 Waste Heat fraction to power input
  wasteHeat VS Temp1 Test,          !- Speed 3 Waste Heat Function of Temperature Curve Name
  2911.3,                           !- Speed 4 Reference Unit Gross Rated Total Cooling Capacity
  0.75,                             !- Speed 4 Reference Unit Gross Sensible Heat Ratio
  4.0,                              !- Speed 4 Reference Unit Gross Cooling COP
  0.1963104,                        !- Speed 4 Reference Unit Rated air flow rate
  0.000381695,                      !- Speed 4 Reference Unit Rated water flow rate
  TC VS Temp1 Test,                 !- Speed 4 Total Cooling Capacity Function of Temperature Curve Name
  TC VS AirFrac Test,               !- Speed 4 Total Cooling Capacity Function of Air Flow Fraction Curve Name
  TC VS WaterFrac Test,             !- Speed 4 Total Cooling Capacity Function of Water Flow Fraction Curve Name
  EIR VS Temp1 Test,                !- Speed 4 Energy Input Ratio Function of Temperature Curve Name
  EIR VS AirFrac Test,              !- Speed 4 Energy Input Ratio Function of Air Flow Fraction Curve Name
  EIR VS WaterFrac Test,            !- Speed 4 Energy Input Ratio Function of Water Flow Fraction Curve Name
  0.1,                              !- Speed 4 Waste Heat fraction to power input
  wasteHeat VS Temp1 Test,          !- Speed 4 Waste Heat Function of Temperature Curve Name
  3581.7,                           !- Speed 5 Reference Unit Gross Rated Total Cooling Capacity
  0.75,                             !- Speed 5 Reference Unit Gross Sensible Heat Ratio
  4.0,                              !- Speed 5 Reference Unit Gross Cooling COP
  0.226512,                         !- Speed 5 Reference Unit Rated air flow rate
  0.000381695,                      !- Speed 5 Reference Unit Rated water flow rate
  TC VS Temp1 Test,                 !- Speed 5 Total Cooling Capacity Function of Temperature Curve Name
  TC VS AirFrac Test,               !- Speed 5 Total Cooling Capacity Function of Air Flow Fraction Curve Name
  TC VS WaterFrac Test,             !- Speed 5 Total Cooling Capacity Function of Water Flow Fraction Curve Name
  EIR VS Temp1 Test,                !- Speed 5 Energy Input Ratio Function of Temperature Curve Name
  EIR VS AirFrac Test,              !- Speed 5 Energy Input Ratio Function of Air Flow Fraction Curve Name
  EIR VS WaterFrac Test,            !- Speed 5 Energy Input Ratio Function of Water Flow Fraction Curve Name
  0.1,                              !- Speed 5 Waste Heat fraction to power input
  wasteHeat VS Temp1 Test,          !- Speed 5 Waste Heat Function of Temperature Curve Name
  4239.5,                           !- Speed 6 Reference Unit Gross Total Cooling Capacity
  0.75,                             !- Speed 6 Reference Unit Gross Sensible Heat Ratio
  4.0,                              !- Speed 6 Reference Unit Gross Cooling COP
  0.2567136,                        !- Speed 6 Reference Unit Rated air flow rate
  0.000381695,                      !- Speed 6 Reference Unit Rated water flow rate
  TC VS Temp1 Test,                 !- Speed 6 Total Cooling Capacity Function of Temperature Curve Name
  TC VS AirFrac Test,               !- Speed 6 Total Cooling Capacity Function of Air Flow Fraction Curve Name
  TC VS WaterFrac Test,             !- Speed 6 Total Cooling Capacity Function of Water Flow Fraction Curve Name
  EIR VS Temp1 Test,                !- Speed 6 Energy Input Ratio Function of Temperature Curve Name
  EIR VS AirFrac Test,              !- Speed 6 Energy Input Ratio Function of Air Flow Fraction Curve Name
  EIR VS WaterFrac Test,            !- Speed 6 Energy Input Ratio Function of Water Flow Fraction Curve Name
  0.1,                              !- Speed 6 Waste Heat fraction to power input
  wasteHeat VS Temp1 Test,          !- Speed 6 Waste Heat Function of Temperature Curve Name
  4885.7,                           !- Speed 7 Reference Unit Gross Rated Total Cooling Capacity
  0.75,                             !- Speed 7 Reference Unit Gross Sensible Heat Ratio
  4.0,                              !- Speed 7 Reference Unit Gross Cooling COP
  0.2869152,                        !- Speed 7 Reference Unit Rated air flow rate
  0.000381695,                      !- Speed 7 Reference Unit Rated water flow rate
  TC VS Temp1 Test,                 !- Speed 7 Total Cooling Capacity Function of Temperature Curve Name
  TC VS AirFrac Test,               !- Speed 7 Total Cooling Capacity Function of Air Flow Fraction Curve Name
  TC VS WaterFrac Test,             !- Speed 7 Total Cooling Capacity Function of Water Flow Fraction Curve Name
  EIR VS Temp1 Test,                !- Speed 7 Energy Input Ratio Function of Temperature Curve Name
  EIR VS AirFrac Test,              !- Speed 7 Energy Input Ratio Function of Air Flow Fraction Curve Name
  EIR VS WaterFrac Test,            !- Speed 7 Energy Input Ratio Function of Water Flow Fraction Curve Name
  0.1,                              !- Speed 7 Waste Heat fraction to power input
  wasteHeat VS Temp1 Test,          !- Speed 7 Waste Heat Function of Temperature Curve Name
  5520.7,                           !- Speed 8 Reference Unit Gross Rated Total Cooling Capacity
  0.75,                             !- Speed 8 Reference Unit Gross Sensible Heat Ratio
  4.0,                              !- Speed 8 Reference Unit Gross Cooling COP
  0.3171168,                        !- Speed 8 Reference Unit Rated air flow rate
  0.000381695,                      !- Speed 8 Reference Unit Rated water flow rate
  TC VS Temp1 Test,                 !- Speed 8 Total Cooling Capacity Function of Temperature Curve Name
  TC VS AirFrac Test,               !- Speed 8 Total Cooling Capacity Function of Air Flow Fraction Curve Name
  TC VS WaterFrac Test,             !- Speed 8 Total Cooling Capacity Function of Water Flow Fraction Curve Name
  EIR VS Temp1 Test,                !- Speed 8 Energy Input Ratio Function of Temperature Curve Name
  EIR VS AirFrac Test,              !- Speed 8 Energy Input Ratio Function of Air Flow Fraction Curve Name
  EIR VS WaterFrac Test,            !- Speed 8 Energy Input Ratio Function of Water Flow Fraction Curve Name
  0.1,                              !- Speed 8 Waste Heat fraction to power input
  wasteHeat VS Temp1 Test,          !- Speed 8 Waste Heat Function of Temperature Curve Name
  6144.8,                           !- Speed 9 Reference Unit Gross Rated Total Cooling Capacity
  0.75,                             !- Speed 9 Reference Unit Gross Sensible Heat Ratio
  4.0,                              !- Speed 9 Reference Unit Gross Cooling COP
  0.3473184,                        !- Speed 9 Reference Unit Rated air flow rate
  0.000381695,                      !- Speed 9 Reference Unit Rated water flow rate
  TC VS Temp1 Test,                 !- Speed 9 Total Cooling Capacity Function of Temperature Curve Name
  TC VS AirFrac Test,               !- Speed 9 Total Cooling Capacity Function of Air Flow Fraction Curve Name
  TC VS WaterFrac Test,             !- Speed 9 Total Cooling Capacity Function of Water Flow Fraction Curve Name
  EIR VS Temp1 Test,                !- Speed 9 Energy Input Ratio Function of Temperature Curve Name
  EIR VS AirFrac Test,              !- Speed 9 Energy Input Ratio Function of Air Flow Fraction Curve Name
  EIR VS WaterFrac Test,            !- Speed 9 Energy Input Ratio Function of Water Flow Fraction Curve Name
  0.1,                              !- Speed 9 Waste Heat fraction to power input
  wasteHeat VS Temp1 Test,          !- Speed 9 Waste Heat Function of Temperature Curve Name
  6758.0,                           !- Speed 10 Reference Unit Gross Rated Total Cooling Capacity
  0.75,                             !- Speed 10 Reference Unit Gross Sensible Heat Ratio
  4.0,                              !- Speed 10 Reference Unit Gross Cooling COP
  0.37752,                          !- Speed 10 Reference Unit Rated air flow rate
  0.000381695,                      !- Speed 10 Reference Unit Rated water flow rate
  TC VS Temp1 Test,                 !- Speed 10 Total Cooling Capacity Function of Temperature Curve Name
  TC VS AirFrac Test,               !- Speed 10 Total Cooling Capacity Function of Air Flow Fraction Curve Name
  TC VS WaterFrac Test,             !- Speed 10 Total Cooling Capacity Function of Water Flow Fraction Curve Name
  EIR VS Temp1 Test,                !- Speed 10 Energy Input Ratio Function of Temperature Curve Name
  EIR VS AirFrac Test,              !- Speed 10 Energy Input Ratio Function of Air Flow Fraction Curve Name
  EIR VS WaterFrac Test,            !- Speed 10 Energy Input Ratio Function of Water Flow Fraction Curve Name
  0.1,                              !- Speed 10 Waste Heat fraction to power input
  wasteHeat VS Temp1 Test;          !- Speed 10 Waste Heat Function of Temperature Curve Name";
		public static string Field_SpeedXWasteHeatFunctionOfTemperatureCurveName => Value._Field_SpeedXWasteHeatFunctionOfTemperatureCurveName;

	

}

	public sealed class CoilHeatingWaterToAirHeatPumpParameterEstimation
    { 

		private string _name = @"Coil:Heating:WaterToAirHeatPump:ParameterEstimation";
		private string _note = @"The Water to Air heat pump heating coil is a deterministic model that requires parameters to describe the operating conditions of the heat pump s components. The parameters are generated from the manufacturer catalog data using multi-variable optimization method. However, the parameters required for WatertoAirHP heating coil is similar to WatertoAirHP cooling except (source side outside heat transfer coefficient) parameter is not required for heating. In addition, the heating coil model can be used for 3 type of compressors which are {reciprocating}, {rotary} and {scroll}.
";
		

		private static readonly System.Lazy<CoilHeatingWaterToAirHeatPumpParameterEstimation> instance = new System.Lazy<CoilHeatingWaterToAirHeatPumpParameterEstimation>(() => new CoilHeatingWaterToAirHeatPumpParameterEstimation());
        private static CoilHeatingWaterToAirHeatPumpParameterEstimation Value => instance.Value;
		public static string Name => Value._name;
        public static string Note => Value._note;
		private CoilHeatingWaterToAirHeatPumpParameterEstimation(){}

	private string _Field_Name = @"This alpha field contains the identifying name for the coil. Any reference to this coil by another object (e.g., AirLoopHVAC:UnitaryHeatPump:WaterToAir) will use this name.";
		public static string Field_Name => Value._Field_Name;

		private string _Field_CompressorType = @"Type of compressor mode used for the heat pump. Choices available are reciprocating, rotary and scroll compressor. Note that the parameters vary for different compressor.";
		public static string Field_CompressorType => Value._Field_CompressorType;

		private string _Field_RefrigerantType = @"This alpha field contains the type of refrigerant used by the heat pump.";
		public static string Field_RefrigerantType => Value._Field_RefrigerantType;

		private string _Field_DesignSourceSideFlowRate = @"This numeric field defines the water flow rate though the coil in m3/sec";
		public static string Field_DesignSourceSideFlowRate => Value._Field_DesignSourceSideFlowRate;

		private string _Field_GrossRatedHeatingCapacity = @"This numeric field defines the gross heating capacity for the WatertoAirHP heating coil at the rated condition in Watts. The gross heating capacity should Not inlcude the ffect of supply air fan heat.";
		public static string Field_GrossRatedHeatingCapacity => Value._Field_GrossRatedHeatingCapacity;

		private string _Field_HighPressureCutoff = @"This numeric field defines the compressor s maximum allowable pressure in Pascal (N/m2)";
		public static string Field_HighPressureCutoff => Value._Field_HighPressureCutoff;

		private string _Field_LowPressureCutoff = @"This numeric field defines the compressor s minimum allowable pressure in Pascal (N/m2)";
		public static string Field_LowPressureCutoff => Value._Field_LowPressureCutoff;

		private string _Field_WaterInletNodeName = @"This alpha field contains the heating coil source side inlet node name.";
		public static string Field_WaterInletNodeName => Value._Field_WaterInletNodeName;

		private string _Field_WaterOutletNodeName = @"This alpha field contains the heating coil source side outlet node name.";
		public static string Field_WaterOutletNodeName => Value._Field_WaterOutletNodeName;

		private string _Field_AirInletNodeName = @"This alpha field contains the heating coil air inlet node name.";
		public static string Field_AirInletNodeName => Value._Field_AirInletNodeName;

		private string _Field_AirOutletNodeName = @"This alpha field contains the heating coil air outlet node name.";
		public static string Field_AirOutletNodeName => Value._Field_AirOutletNodeName;

		private string _HeatingCoilParameters = @"Depending on the type of compressor specified, the type of parameters and values also differs. An Excel Spreadsheet is in the final stage of development that is capable of estimating the parameters based on the manufacturer data. The general parameters are listed first followed by specific parameters required by the respective compressor model. Lastly, parameters are listed based on the type of source side fluid used.";
		public static string HeatingCoilParameters => Value._HeatingCoilParameters;

		private string _Field_LoadSideTotalHeatTransferCoefficient = @"This numeric field defines the estimated parameter {load side total heat transfer coefficient} in W/K. This field was previously known as Parameter 1.";
		public static string Field_LoadSideTotalHeatTransferCoefficient => Value._Field_LoadSideTotalHeatTransferCoefficient;

		private string _Field_SuperheatTemperatureAtTheEvaporatorOutlet = @"This numeric field defines the estimated parameter {superheat temperature} at the evaporator outlet in ??C. This field was previously known as Parameter 2.";
		public static string Field_SuperheatTemperatureAtTheEvaporatorOutlet => Value._Field_SuperheatTemperatureAtTheEvaporatorOutlet;

		private string _Field_CompressorPowerLosses = @"This numeric field defines the estimated parameter {compressor power losses}, which accounts for the loss of work due to mechanical and electrical losses in the compressor in Watts. This field was previously known as Parameter 3.";
		public static string Field_CompressorPowerLosses => Value._Field_CompressorPowerLosses;

		private string _Field_CompressorEfficiency = @"This numeric field defines the estimated parameter of the {compressor s efficiency}. The compressor efficiency is formulated as the equation below:

\begin{equation}
\eta  = \frac{{{{\dot W}_{Theoritical}}}}{{{{\dot W}_{CompInput}} - {{\dot W}_{Loss}}}}
\end{equation}

This field was previously know as Parameter 4.";
		public static string Field_CompressorEfficiency => Value._Field_CompressorEfficiency;

		private string _Field_CompressorPistonDisplacement = @"This numeric field defines the estimated parameter {piston displacement of the compressor} in m3/s. This field was part of what was previously known as Parameter 5. It should be used when the Compressor type is either Reciprocating and Rotary. The field should be left blank when Compressor type is Scroll.";
		public static string Field_CompressorPistonDisplacement => Value._Field_CompressorPistonDisplacement;

		private string _Field_CompressorSuctionDischargePressureDrop = @"This numeric field defines the estimated parameter {pressure drop at the compressor suction} and discharge in Pascals (N/m2). This field was part of what was previously known as Parameter 6. It should be used when the Compressor type is either Reciprocating and Rotary. The field should be left blank when Compressor type is Scroll.";
		public static string Field_CompressorSuctionDischargePressureDrop => Value._Field_CompressorSuctionDischargePressureDrop;

		private string _Field_CompressorClearanceFactor = @"This numeric field defines the estimated parameter {clearance factor of the compressor}. This parameter is dimensionless. This field was part of what was previously known as Parameter 7. It should only be used when the Compressor type is Reciprocating. The field should be left blank when Compressor type is Scroll or Rotary.";
		public static string Field_CompressorClearanceFactor => Value._Field_CompressorClearanceFactor;

		private string _Field_RefrigerantVolumeFlowRate = @"This numeric field defines the {refrigerant volume flow rate} at the beginning of the compression [m3/s]. This field was part of what was previously known as Parameter 6. It should only be used when the Compressor type is Scroll. The field should be left blank when Compressor type is Reciprocating or Rotary.";
		public static string Field_RefrigerantVolumeFlowRate => Value._Field_RefrigerantVolumeFlowRate;

		private string _Field_VolumeRatio = @"This numeric field defines the {built-in-volume ratio}. This field was part of what was previously known as Parameter 6. It should only be used when the Compressor type is Scroll. The field should be left blank when Compressor type is Reciprocating or Rotary.";
		public static string Field_VolumeRatio => Value._Field_VolumeRatio;

		private string _Field_LeakRateCoefficient = @"This numeric field defines the coefficient for the relationship between {pressure ratio and leakage rate}. This field was part of what was previously known as Parameter 7. It should only be used when the Compressor type is Scroll. The field should be left blank when Compressor type is Reciprocating or Rotary.";
		public static string Field_LeakRateCoefficient => Value._Field_LeakRateCoefficient;

		private string _Field_SourceSideHeatTransferCoefficient = @"This numeric field defines the estimated parameter {source side heat transfer coefficient} in W/K. This field was part of what was previously known as Parameter 8. It should only be used when the Source Side Fluid Name is Water.";
		public static string Field_SourceSideHeatTransferCoefficient => Value._Field_SourceSideHeatTransferCoefficient;

		private string _Field_SourceSideHeatTransferResistance1 = @"This numeric field defines the estimated parameter {source side heat transfer resistance 1}. Unit is dimensionless. This field was part of what was previously known as Parameter 8. It should only be used when the Source Side Fluid Name is an antifreeze.";
		public static string Field_SourceSideHeatTransferResistance1 => Value._Field_SourceSideHeatTransferResistance1;

		private string _Field_SourceSideHeatTransferResistance2 = @"This numeric field defines the estimated {parameter source side heat transfer resistance 2}. Unit is W/K. This field was previously known as Parameter 9. It should only be used when the Source Side Fluid Name is an antifreeze.

Following is an example input for Coil:WatertoAirHP:ParameterEstimation:Heating



Coil:Heating:WaterToAirHeatPump:ParameterEstimation,
  Heat Pump HEATING Mode AHU1,   !- Name
  Scroll,                                   !- Compressor Type
  R22,                                         !- Refrigerant Type
  0.0015,                                   !- Design Source Side Flow Rate {m3/s}
  38000,                                     !- Gross Rated Heating Capacity {W}
  3000000,                                 !- High Pressure Cutoff
  0,                                             !- Low Pressure Cutoff {Pa}
  AHU1 Water to Air Heat Pump Source Side2 Inlet Node,   !- Water Inlet Node Name
  AHU1 Water to Air Heat Pump Source Side2 Outlet Node,   !- Water Outlet Node Name
  Cooling Coil Air Outlet Node AHU1,   !- Air Inlet Node Name
  Heating Coil Air Outlet Node AHU1,   !- Air Outlet Node Name
  5.79505E+03,                         !- Load Side Total Heat Transfer Coefficient {W/K}
  1.56696E+00,                         !- Superheat Temperature at the Evaporator Outlet {C}
  3.91338E+03,                         !- Compressor Power Losses {W}
  1.26356E+00,                         !- Compressor Efficiency
  ,                                               !- Compressor Piston Displacement {m3/s}
  ,                                               !- Compressor Suction/Discharge Pressure Drop {Pa}
  ,                                               !- Compressor Clearance Factor {dimensionless}
  6.99573E-03,                         !- Refrigerant Volume Flow Rate {m3/s}
  4.96167E+00,                         !- Volume Ratio {dimensionless}
  2.07750E-06,                         !-Leak Rate Coefficient {dimensionless}
  4.00322E+03,                         !- Source Side Heat Transfer Coefficient {W/K}
  ,                                               !- Source Side Heat Transfer Resistance1 {dimensionless}
  ;                                               !- Source Side Heat Transfer Resistance2 {W/K}";
		public static string Field_SourceSideHeatTransferResistance2 => Value._Field_SourceSideHeatTransferResistance2;

	

}

	public sealed class CoilHeatingWaterToAirHeatPumpEquationFit
    { 

		private string _name = @"Coil:Heating:WaterToAirHeatPump:EquationFit";
		private string _note = @"The Water to Air Heating Equation Fit Coil is a simple curve-fit model that requires coefficients generated from the heat pump catalog data. This is an equation-fit model that resembles a black box with no usage of heat transfer equations. The performance of the heat pump is modeled using curves fitted from the catalog data.
";
		

		private static readonly System.Lazy<CoilHeatingWaterToAirHeatPumpEquationFit> instance = new System.Lazy<CoilHeatingWaterToAirHeatPumpEquationFit>(() => new CoilHeatingWaterToAirHeatPumpEquationFit());
        private static CoilHeatingWaterToAirHeatPumpEquationFit Value => instance.Value;
		public static string Name => Value._name;
        public static string Note => Value._note;
		private CoilHeatingWaterToAirHeatPumpEquationFit(){}

	private string _Field_Name = @"This alpha field contains the identifying name for the coil. Any reference to this coil by another object (e.g., AirLoopHVAC:UnitaryHeatPump:WaterToAir) will use this name.";
		public static string Field_Name => Value._Field_Name;

		private string _Field_WaterInletNodeName = @"This alpha field contains the heating coil source side inlet node name.";
		public static string Field_WaterInletNodeName => Value._Field_WaterInletNodeName;

		private string _Field_WaterOutletNodeName = @"This alpha field contains the heating coil source side outlet node name.";
		public static string Field_WaterOutletNodeName => Value._Field_WaterOutletNodeName;

		private string _Field_AirInletNodeName = @"This alpha field contains the heating coil air inlet node name.";
		public static string Field_AirInletNodeName => Value._Field_AirInletNodeName;

		private string _Field_AirOutletNodeName = @"This alpha field contains the heating coil air outlet node name.";
		public static string Field_AirOutletNodeName => Value._Field_AirOutletNodeName;

		private string _Field_RatedAirFlowRate = @"This numeric field contains the rated volumetric air flow rate on the load side of the heat pump in m3/s. This field is autosizable.";
		public static string Field_RatedAirFlowRate => Value._Field_RatedAirFlowRate;

		private string _Field_RatedWaterFlowRate = @"This numeric field contains the rated volumetric water flow rate on the source side of the heat pump in m3/s. This field is autosizable.";
		public static string Field_RatedWaterFlowRate => Value._Field_RatedWaterFlowRate;

		private string _Field_GrossRatedHeatingCapacity = @"This numeric field contains the gross heating capacity of the heat pump at the rated condition in W. The gross heating capacity should not account for the effect of supply air fan heat. This field is autosizable.";
		public static string Field_GrossRatedHeatingCapacity => Value._Field_GrossRatedHeatingCapacity;

		private string _Field_GrossRatedHeatingCOP = @"This numeric field contains the gross rated heating coefficient of performance of the heat pump. The gross rated COP of the heat pump should not account for the effect of supply air fan heat.";
		public static string Field_GrossRatedHeatingCOP => Value._Field_GrossRatedHeatingCOP;

		private string _Field_HeatingCapacityCoefficient15 = @"These numeric fields contain the first to fifth coefficient for the heat pump capacity.";
		public static string Field_HeatingCapacityCoefficient15 => Value._Field_HeatingCapacityCoefficient15;

		private string _Field_HeatingPowerConsumptionCoefficient15 = @"These numeric fields contain the first to fifth coefficient for the heat pump power consumption.";
		public static string Field_HeatingPowerConsumptionCoefficient15 => Value._Field_HeatingPowerConsumptionCoefficient15;

	

}

	public sealed class CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit
    { 

		private string _name = @"Coil:Heating:WaterToAirHeatPump:VariableSpeedEquationFit";
		private string _note = @"The Variable-Speed Water-to-Air Heating Equation Fit Coil is a collection of performance curves that represent the heating coil at various speed levels. The performance curves should be generated from the heat pump Reference Unit catalog data. This is an equation-fit model that resembles a black box with no usage of heat transfer equations. The number of speed levels can range from 2 to 10. The heating coil has four node connections, i.e.~two air sides and two water sides. The user needs to specify a nominal speed level, at which the rated capacity, rated volumetric air and water flow rates are sized. The rated capacity, rated volumetric flow rates represent the real situation in the air and water loops, and are used to determine the flow rates at various speed levels in the parent objects, e.g.~AirLoopHVAC:UnitaryHeatPump:WaterToAir and ZoneHVAC:WaterToAirHeatPump. It shall be mentioned that the performance correction curves, i.e.~the temperature and flow fraction correction curves, should be normalized to the capacity and flow rates at each individual speed and at the rated operating conditions, similar to the performance curves used in the DX coils. On the other hand, the performance values at individual speed levels, e.g.~capacities, COPs and flow rates, should be given regarding a specific unit from the Reference Unit catalog data. In the following content, the statement started with Reference Unit means the actual Reference Unit catalog data. The rated conditions for obtaining the capacities and COPs are at indoor dry-bulb temperature of 21.1 ??C (70 ??F) and the source side entering water temperature of 21.1 ??C (70 ??F). Some equations are provided below to help explain the function of the various performance curves and data fields. For a detailed description of the algorithm and how the curves are used in the calculations, please see the Engineering Reference.
";
		

		private static readonly System.Lazy<CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit> instance = new System.Lazy<CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit>(() => new CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit());
        private static CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit Value => instance.Value;
		public static string Name => Value._name;
        public static string Note => Value._note;
		private CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit(){}

	private string _Field_Name = @"This alpha field contains the identifying name for the variable speed heating coil. Any reference to this coil by another object (e.g., AirLoopHVAC:UnitaryHeatPump:WaterToAir) will use this name.";
		public static string Field_Name => Value._Field_Name;

		private string _Field_WaterInletNodeName = @"This alpha field contains the heating coil source side inlet node name.";
		public static string Field_WaterInletNodeName => Value._Field_WaterInletNodeName;

		private string _Field_WaterOutletNodeName = @"This alpha field contains the heating coil source side outlet node name.";
		public static string Field_WaterOutletNodeName => Value._Field_WaterOutletNodeName;

		private string _Field_AirInletNodeName = @"This alpha field contains the heating coil load side inlet node name.";
		public static string Field_AirInletNodeName => Value._Field_AirInletNodeName;

		private string _Field_AirOutletNodeName = @"This alpha field contains the heating coil load side outlet node name.";
		public static string Field_AirOutletNodeName => Value._Field_AirOutletNodeName;

		private string _Field_NumberOfSpeeds = @"This numeric field contains the maximum number of speed levels that the module uses. The number of speeds, for which the user input the performance data and curves, has to be equal to or higher than the maximum number. The performance inputs at higher speeds are ignored.";
		public static string Field_NumberOfSpeeds => Value._Field_NumberOfSpeeds;

		private string _Field_NominalSpeedLevel = @"This numeric field defines the nominal speed level, at which the rated capacity, rated air and water volumetric flow rates are correlated.";
		public static string Field_NominalSpeedLevel => Value._Field_NominalSpeedLevel;

		private string _Field_GrossRatedHeatingCapacityAtSelectedNominalSpeedLevel = @"This numeric field contains the gross rated capacity at the nominal speed level. This field is autosizable. The gross rated heating capacity is used to determine a capacity scaling factor, as compared to the Reference Unit capacity at the nominal speed level.

\begin{equation}
CapacityScaleFactor = \frac{{GrossRatedHeatingCapacity}}{{ReferenceUnitCapacity@NominalSpeedLevel}}
\end{equation}

And then, this scaling factor is used to determine capacities at rated conditions for other speed levels, as below,

\begin{equation}
  \begin{array}{l}
    GrossRatedCapacity@SpeedLevel \left( x \right) = \\
    \quad \quad \quad \quad CapacityScaleFactor \times ReferenceUnitCapacity@SpeedLevel(x)
  \end{array}
\end{equation}";
		public static string Field_GrossRatedHeatingCapacityAtSelectedNominalSpeedLevel => Value._Field_GrossRatedHeatingCapacityAtSelectedNominalSpeedLevel;

		private string _Field_RatedVolumetricAirFlowRate = @"This numeric field contains the rated volumetric air flow rate on the load side of the heat pump corresponding to the nominal speed level. This field is autosizable. The value is used to determine an internal scaling factor, and calculate the air flow rates in the parent objects. It is recommended that the ratio of the rated volumetric air flow rate to the rated capacity is the same as the unit performance from the Reference Unit data.

\begin{equation}
  \begin{array}{l}
    AirFlowScaleFactor = \\
    \quad \quad \quad \quad \frac{{RatedVolumetricAirFlowRate}}{{ReferenceUnitVolAirFlowRate@NominalSpeedLevel \times CapacityScaleFactor}}
  \end{array}
\end{equation}

And the volumetric air flow rates in the parent objects are calculated as below,

\begin{equation}
  \begin{array}{l}
    LoopVolumetricAirFlowRate@SpeedLevel\left( x \right) = \\
    \quad \quad \quad \quad AirFlowScaleFactor \\
    \quad \quad \quad \quad  \times ReferenceUnitVolAirFlowRate@SpeedLevel(x) \\
    \quad \quad \quad \quad  \times CapacityScaleFactor
  \end{array}
\end{equation}";
		public static string Field_RatedVolumetricAirFlowRate => Value._Field_RatedVolumetricAirFlowRate;

		private string _Field_RatedVolumetricWaterFlowRate = @"This numeric field contains the rated volumetric water flow rate on the source side of the heat pump at the nominal speed level. This field is autosizable. The value is used to determine an internal scaling factor, and calculate the water flow rates at other speed levels. It is recommended that the ratio of the rated volumetric water flow rate to the rated capacity is the same as the unit performance from the Reference Unit data.

\begin{equation}
WaterFlowScaleFactor = \frac{{RatedVolumetricWaterFlowRate}}{{ReferenceUnitVolWaterFlowRate@NominalSpeedLevel \times CapacityScaleFactor}}
\end{equation}

And the required volumetric water flow rates in the water loop are calculated as below,

\begin{equation}
LoopVolumetricWaterFlowRate@SpeedLevel\left( x \right) = WaterFlowScaleFactor \times ReferenceUnitVolWaterFlowRate@SpeedLevel(x) \times CapacityScaleFactor
\end{equation}";
		public static string Field_RatedVolumetricWaterFlowRate => Value._Field_RatedVolumetricWaterFlowRate;

		private string _Field_PartLoadFractionCorrelationCurveName = @"This alpha field defines the name of a quadratic or cubic performance curve (Ref: Performance Curves) that parameterizes the variation of electrical power input to the unit as a function of the part load ratio (PLR, heating load/steady-state heating capacity for Speed 1), in the case that the unit operates under the lowest speed, i.e.~on/off. The product of the rated EIR and EIR modifier curves is divided by the output of this curve to give the effective EIR for a given simulation timestep for Speed 1. The part load fraction (PLF) correlation accounts for efficiency losses due to compressor cycling. The part load fraction correlation should be normalized to a value of 1.0 when the part load ratio equals 1.0 (i.e., no efficiency losses when the compressor(s) run continuously for the simulation timestep). For PLR values between 0 and 1 (0 < = PLR < 1), the following rules apply:

PLF > = 0.7 and PLF > = PLR

If PLF < 0.7, the program resets the PLF value to 0.7, and the simulation proceeds. The runtime fraction of the coil is defined as PLR/PLF. If PLF < PLR, the runtime fraction of the coil is limited to 1.0. A typical part load fraction correlation would be:

\begin{equation}
PLF = 0.85 + 0.15 \times PLR
\end{equation}

If the user wishes to model no efficiency degradation due to compressor cycling, the part load fraction correlation should be defined as follows:

\begin{equation}
PLF = 0.85 + 0.0 \times PLR
\end{equation}";
		public static string Field_PartLoadFractionCorrelationCurveName => Value._Field_PartLoadFractionCorrelationCurveName;

		private string _Field_GroupRatedSpecificationPerformanceCurvesAndWasteHeatData = @"The performance for each heating speed must be specified as shown below. They should be directly given from the Reference Unit data. All inputs for Speed 1 are required, followed by the optional inputs for other speeds.";
		public static string Field_GroupRatedSpecificationPerformanceCurvesAndWasteHeatData => Value._Field_GroupRatedSpecificationPerformanceCurvesAndWasteHeatData;

		private string _Field_SpeedXReferenceUnitGrossRatedHeatingCapacity = @"This numeric field defines the total, full load gross heating capacity in watts of the water-to-air heating coil unit at rated conditions for Speed <x> operation. The value entered here must be greater than 0. Capacity should not account for the effect of supply air fan heat.";
		public static string Field_SpeedXReferenceUnitGrossRatedHeatingCapacity => Value._Field_SpeedXReferenceUnitGrossRatedHeatingCapacity;

		private string _Field_SpeedXReferenceUnitGrossRatedHeatingCOP = @"This numeric field defines the coefficient of performance (COP = gross heating capacity in watts divided by electrical power input in watts) of the heating coil unit at rated conditions for Speed <x> operation. The value entered here must be greater than 0. The input power includes power for the compressor(s) and accessories, but does not include the power consumption of the indoor supply air fan and water pump. The gross COP should not account for the supply air fan.";
		public static string Field_SpeedXReferenceUnitGrossRatedHeatingCOP => Value._Field_SpeedXReferenceUnitGrossRatedHeatingCOP;

		private string _Field_SpeedXReferenceUnitRatedAirFlowRate = @"This numeric field defines the volume air flow rate, in m^{3}per second, across the heating coil at rated conditions for Speed <x> operation. The value entered here should be directly from the Reference Unit data, corresponding to the given gross rated heating capacity and gross rated heating COP at the speed, as above.";
		public static string Field_SpeedXReferenceUnitRatedAirFlowRate => Value._Field_SpeedXReferenceUnitRatedAirFlowRate;

		private string _Field_SpeedXReferenceUnitRatedWaterFlowRate = @"This numeric field defines the volume water flow rate, in m^{3}per second, flowing at the source side of the heating coil at rated conditions for Speed <x> operation. The value entered here should be directly from the Reference Unit data, corresponding to the given gross rated heating capacity and gross rated heating COP at the speed, as above.";
		public static string Field_SpeedXReferenceUnitRatedWaterFlowRate => Value._Field_SpeedXReferenceUnitRatedWaterFlowRate;

		private string _Field_SpeedXHeatingCapacityFunctionOfTemperatureCurveName = @"This alpha field defines the name of a bi-quadratic performance curve for Speed <x> (ref: Performance Curves) that parameterizes the variation of the total heating capacity as a function of the indoor dry-bulb and source side entering water temperature, from the Reference Unit. The output of this curve is multiplied by the gross rated heating capacity at the speed to give the gross total heating capacity at specific temperature operating conditions (i.e., at an indoor air dry-bulb temperature or entering water temperature different from the rating point temperature). It should be noted that the curve is normalized to the heating capacity at Speed<x> from the Reference Unit data, and have the value of 1.0 at the rating point.";
		public static string Field_SpeedXHeatingCapacityFunctionOfTemperatureCurveName => Value._Field_SpeedXHeatingCapacityFunctionOfTemperatureCurveName;

		private string _Field_SpeedXHeatingCapacityFunctionOfAirFlowFractionCurveName = @"This alpha field defines the name of a quadratic or cubic performance curve for Speed <x> (ref: Performance Curves) that parameterizes the variation of the gross total heating capacity as a function of the ratio of actual air flow rate across the heating coil to the design air flow rate (i.e., fraction of full load flow), at Speed <x> from the Reference Unit data. The curve is normalized to have the value of 1.0 when the actual air flow rate equals the design air flow rate at Speed <x>.";
		public static string Field_SpeedXHeatingCapacityFunctionOfAirFlowFractionCurveName => Value._Field_SpeedXHeatingCapacityFunctionOfAirFlowFractionCurveName;

		private string _Field_SpeedXHeatingCapacityFunctionOfWaterFlowFractionCurveName = @"This alpha field defines the name of a quadratic or cubic performance curve for Speed <x> (ref: Performance Curves) that parameterizes the variation of total heating capacity as a function of the ratio of actual water flow rate across the heating coil to the design water flow rate (i.e., fraction of full load flow), at Speed <x> from the Reference Unit data. The curve is normalized to have the value of 1.0 when the actual water flow rate equals the design air flow rate at Speed <x>.

The actual total heating capacity at Speed <x>, considering variations in temperatures, air and water flow rates is calculated as below:

\begin{equation}
  \begin{array}{l}
    ActualCapacity@SpeedLevel\left( x \right) = CapacityScaleFactor \\
    \quad \quad \quad \quad \quad \times ReferenceUnitCapacity@SpeedLevel(x) \\
    \quad \quad \quad \quad \quad \times TotCapTempModFac@SpeedLevel(x) \\
    \quad \quad \quad \quad \quad \times TotCapAirFlowModFac@SpeedLevel(x) \\
    \quad \quad \quad \quad \quad \times TotCapWaterFlowModFac@SpeedLevel(x)
  \end{array}
\end{equation}";
		public static string Field_SpeedXHeatingCapacityFunctionOfWaterFlowFractionCurveName => Value._Field_SpeedXHeatingCapacityFunctionOfWaterFlowFractionCurveName;

		private string _Field_SpeedXEnergyInputRatioFunctionOfTemperatureCurveName = @"This alpha field defines the name of a bi-quadratic, quadratic or cubic performance curve for Speed <x> (ref: Performance Curves) that parameterizes the variation of the energy input ratio (EIR) as a function of the both the indoor air dry-bulb and entering water temperatures The EIR is the inverse of the COP. The output of this curve is multiplied by the rated EIR (inverse of rated COP at Speed <x> from the Reference Unit data) to give the EIR at specific temperature operating conditions (i.e., at an indoor air dry bulb temperature or entering water temperature different from the rating point temperature). The curve is normalized to have the value of 1.0 at the rating point.";
		public static string Field_SpeedXEnergyInputRatioFunctionOfTemperatureCurveName => Value._Field_SpeedXEnergyInputRatioFunctionOfTemperatureCurveName;

		private string _Field_SpeedXEnergyInputRatioFunctionOfAirFlowFractionCurveName = @"This alpha field defines the name of a quadratic or cubic performance curve for Speed <x> (ref: Performance Curves) that parameterizes the variation of the energy input ratio (EIR) as a function of the ratio of actual air flow rate across the heating coil to the design air flow rate (i.e., fraction of full load flow, at Speed <x> from the Reference Unit data). The EIR is the inverse of the COP. This curve is normalized to a value of 1.0 when the actual air flow rate equals the rated air flow rate.";
		public static string Field_SpeedXEnergyInputRatioFunctionOfAirFlowFractionCurveName => Value._Field_SpeedXEnergyInputRatioFunctionOfAirFlowFractionCurveName;

		private string _Field_SpeedXEnergyInputRatioFunctionOfWaterFlowFractionCurveName = @"This alpha field defines the name of a quadratic or cubic performance curve for Speed <x> (ref: Performance Curves) that parameterizes the variation of the energy input ratio (EIR) as a function of the ratio of actual water flow rate across the heating coil to the rated water flow rate (i.e., fraction of full load flow, at Speed <x> from the Reference Unit data). This curve is normalized to a value of 1.0 when the actual air flow rate equals the design air flow rate.

The actual EIR at Speed <x>, considering variations in temperatures, air and water flow rates is calculated as below:

\begin{equation}
\begin{array}{l}
ActualEIR@SpeedLevel \left( x \right) = \frac{{1.0}}{{ReferenceUnitCOP@SpeedLevel(x)}} \\
\quad \quad \quad \quad \quad \quad \quad \quad \quad \times EIRTempModFac@SpeedLevel(x) \\
\quad \quad \quad \quad \quad \quad \quad \quad \quad \times EIRAirFlowModFac@SpeedLevel(x) \\
\quad \quad \quad \quad \quad \quad \quad \quad \quad \times EIRWaterFlowModFac@SpeedLevel(x)
\end{array}
\end{equation}

And, the actual power consumption is calculated:

\begin{equation}
\begin{array}{l}
ActualPower@SpeedLevel\left( x \right) = ActualCapacity@SpeedLevel\left( x \right) \\
\quad \quad \quad \quad \quad \quad \quad \quad \quad \quad \quad \quad \quad \times ActualEIR@SpeedLevel\left( x \right)
\end{array}
\end{equation}";
		public static string Field_SpeedXEnergyInputRatioFunctionOfWaterFlowFractionCurveName => Value._Field_SpeedXEnergyInputRatioFunctionOfWaterFlowFractionCurveName;

		private string _Field_SpeedXRatedWasteHeatFractionOfPowerInput = @"The fraction of heat input to heating that is available as recoverable waste heat at full load and rated conditions for Speed <x> operation. The part of heat is not delivered to the indoor side.";
		public static string Field_SpeedXRatedWasteHeatFractionOfPowerInput => Value._Field_SpeedXRatedWasteHeatFractionOfPowerInput;

		private string _Field_SpeedXWasteHeatFunctionOfTemperatureCurveName = @"The name of a bi-quadratic performance curve (ref: Performance Curves) that parameterizes the variation of the waste heat recovery as a function of indoor dry-bulb temperature and the entering water temperature for Speed <x> from the Reference Unit data. The output of this curve is multiplied by the rated recoverable waste heat at specific temperature operating conditions (i.e., at temperatures different from the rating point). The curve is normalized to a value of 1.0 at the rating point.

The actual recoverable waste heat at Speed <x> is calculated as below:

\begin{equation}
\begin{array}{l}
ActualWasteHeat@SpeedLevel\left( x \right) = ActualPower@SpeedLevel\left( x \right) \\
\quad \quad \quad \quad \quad \quad \times WasteHeatFrac@SpeedLevel(x) \\
\quad \quad \quad \quad \quad \quad \times WasteHeatTempModFac@SpeedLevel(x)
\end{array}
\end{equation}

An example of this statement in an IDF is:


Coil:Heating:WaterToAirHeatPump:VariableSpeedEquationFit,
  Sys 1 Heat Pump Heating Mode,                           !- Name
  Sys 1 Water to Air Heat Pump Source Side2 Inlet Node,   !- Water Inlet Node Name
  Sys 1 Water to Air Heat Pump Source Side2 Outlet Node,  !- Water Outlet Node Name
  Sys 1 Heating Coil Air Inlet Node,                      !- Air Inlet Node Name
  Sys 1 SuppHeating Coil Air Inlet Node,                  !- Air Outlet Node Name
  10.0,                           !- Number of Speeds
  10.0,                           !- Nominal Speed Level
  Autosize,                       !- Rated Heating Capacity {W}
  Autosize,                       !- Rated Air Flow Rate {m3/s}
  Autosize,                       !- Rated Water Flow Rate {m3/s}
  VS Energy Part Load Fraction 1, !- Energy part load fraction curve
  1838.7,                         !- Speed 1 Reference Unit Gross Rated Heating Capacity
  5.0,                            !- Speed 1 Reference Unit Gross Rated Heating COP
  0.1661088,                      !- Speed 1 Reference Unit Rated Air Flow Rate
  0.000381695,                    !- Speed 1 Reference Unit Rated Water Flow Rate
  Heating VS Temp1 Test,          !- Speed 1 Heating Capacity Function of Temperature Curve Name
  Heating VS AirFrac Test,        !- Speed 1 Heating Capacity Function of Air Flow Fraction Curve Name
  Heating VS WaterFrac Test,      !- Speed 1 Heating Capacity Function of Water Flow Fraction Curve Name
  EIRH VS Temp1 Test,             !- Speed 1 Energy Input Ratio Function of Temperature Curve Name
  EIRH VS AirFrac Test,           !- Speed 1 Energy Input Ratio Function of Air Flow Fraction Curve Name
  EIRH VS WaterFrac Test,         !- Speed 1 Energy Input Ratio Function of Water Flow Fraction Curve Name
  0.1,                            !- Speed 1 Waste Heat Fraction to Power Input
  Heating wasteHeat VS Temp1 Test,!- Speed 1 Waste Heat Function of Temperature Curve Name
  2295.5,                         !- Speed 2 Reference Unit Gross Rated Heating Capacity
  5.0,                            !- Speed 2 Reference Unit Gross Rated Heating COP
  0.179322,                       !- Speed 2 Reference Unit Rated air flow rate
  0.000381695,                    !- Speed 2 Reference Unit Rated water flow rate
  Heating VS Temp1 Test,          !- Speed 2 Heating Capacity Function of Temperature Curve Name
  Heating VS AirFrac Test,        !- Speed 2 Heating Capacity Function of Air Flow Fraction Curve Name
  Heating VS WaterFrac Test,      !- Speed 2 Heating Capacity Function of Water Flow Fraction Curve Name
  EIRH VS Temp1 Test,             !- Speed 2 Energy Input Ratio Function of Temperature Curve Name
  EIRH VS AirFrac Test,           !- Speed 2 Energy Input Ratio Function of Air Flow Fraction Curve Name
  EIRH VS WaterFrac Test,         !- Speed 2 Energy Input Ratio Function of Water Flow Fraction Curve Name
  0.1,                            !- Speed 2 Waste Heat Fraction to Power Input
  Heating wasteHeat VS Temp1 Test,!- Speed 2 Waste Heat Function of Temperature Curve Name
  2751.3,                         !- Speed 3 Reference Unit Gross Rated Heating Capacity
  5.0*,*                          !- Speed 3 Reference Unit Gross COP
  0.1925352,                      !- Speed 3 Reference Unit Rated Air Flow Rate
  0.000381695,                    !- Speed 3 Reference Unit Rated Water Flow Rate
  Heating VS Temp1 Test,          !- Speed 3 Heating Capacity Function of Temperature Curve Name
  Heating VS AirFrac Test,        !- Speed 3 Heating Capacity Function of Air Flow Fraction Curve Name
  Heating VS WaterFrac Test,      !- Speed 3 Heating Capacity Function of Water Flow Fraction Curve Name
  EIRH VS Temp1 Test,             !- Speed 3 Energy Input Ratio Function of Temperature Curve Name
  EIRH VS AirFrac Test,           !- Speed 3 Energy Input Ratio Function of Air Flow Fraction Curve Name
  EIRH VS WaterFrac Test,         !- Speed 3 Energy Input Ratio Function of Water Flow Fraction Curve Name
  0.1,                            !- Speed 3 Waste Heat fraction to power input
  Heating wasteHeat VS Temp1 Test,!- Speed 3 Waste Heat Function of Temperature Curve Name
  3659.6,                         !- Speed 4 Reference Unit Gross Rated Heating Capacity
  5.0,                            !- Speed 4 Reference Unit Gross Rated Heating COP
  0.2189616,                      !- Speed 4 Reference Unit Rated air flow rate
  0.000381695,                    !- Speed 4 Reference Unit Rated water flow rate
  Heating VS Temp1 Test,          !- Speed 4 Heating Capacity Function of Temperature Curve Name
  Heating VS AirFrac Test,        !- Speed 4 Heating Capacity Function of Air Flow Fraction Curve Name
  Heating VS WaterFrac Test,      !- Speed 4 Heating Capacity Function of Water Flow Fraction Curve Name
  EIRH VS Temp1 Test,             !- Speed 4 Energy Input Ratio Function of Temperature Curve Name
  EIRH VS AirFrac Test,           !- Speed 4 Energy Input Ratio Function of Air Flow Fraction Curve Name
  EIRH VS WaterFrac Test,         !- Speed 4 Energy Input Ratio Function of Water Flow Fraction Curve Name
  0.1,                            !- Speed 4 Waste Heat fraction to power input
  Heating wasteHeat VS Temp1 Test,!- Speed 4 Waste Heat Function of Temperature Curve Name
  4563.7,                         !- Speed 5 Reference Unit Gross Rated Heating Capacity
  5.0,                            !- Speed 5 Reference Unit Gross Rated Heating COP
  0.245388,                       !- Speed 5 Reference Unit Rated air flow rate
  0.000381695,                    !- Speed 5 Reference Unit Rated water flow rate
  Heating VS Temp1 Test,          !- Speed 5 Heating Capacity Function of Temperature Curve Name
  Heating VS AirFrac Test,        !- Speed 5 Heating Capacity Function of Air Flow Fraction Curve Name
  Heating VS WaterFrac Test,      !- Speed 5 Heating Capacity Function of Water Flow Fraction Curve Name
  EIRH VS Temp1 Test,             !- Speed 5 Energy Input Ratio Function of Temperature Curve Name
  EIRH VS AirFrac Test,           !- Speed 5 Energy Input Ratio Function of Air Flow Fraction Curve Name
  EIRH VS WaterFrac Test,         !- Speed 5 Energy Input Ratio Function of Water Flow Fraction Curve Name
  0.1,                            !- Speed 5 Waste Heat fraction to power input
  Heating wasteHeat VS Temp1 Test,!- Speed 5 Waste Heat Function of Temperature Curve Name
  5463.3,                         !- Speed 6 Reference Unit Gross Rated Heating Capacity
  5.0,                            !- Speed 6 Reference Unit Gross Rated Heating COP
  0.2718144,                      !- Speed 6 Reference Unit Rated air flow rate
  0.000381695,                    !- Speed 6 Reference Unit Rated water flow rate
  Heating VS Temp1 Test,          !- Speed 6 Heating Capacity Function of Temperature Curve Name
  Heating VS AirFrac Test,        !- Speed 6 Heating Capacity Function of Air Flow Fraction Curve Name
  Heating VS WaterFrac Test,      !- Speed 6 Heating Capacity Function of Water Flow Fraction Curve Name
  EIRH VS Temp1 Test,             !- Speed 6 Energy Input Ratio Function of Temperature Curve Name
  EIRH VS AirFrac Test,           !- Speed 6 Energy Input Ratio Function of Air Flow Fraction Curve Name
  EIRH VS WaterFrac Test,         !- Speed 6 Energy Input Ratio Function of Water Flow Fraction Curve Name
  0.1,                            !- Speed 6 Waste Heat fraction to power input
  Heating wasteHeat VS Temp1 Test,!- Speed 6 Waste Heat Function of Temperature Curve Name
  6358.4,                         !- Speed 7 Reference Unit Gross Rated Heating Capacity
  5.0,                            !- Speed 7 Reference Unit Gross Rated Heating COP
  0.2982408,                      !- Speed 7 Reference Unit Rated air flow rate
  0.000381695,                    !- Speed 7 Reference Unit Rated water flow rate
  Heating VS Temp1 Test,          !- Speed 7 Heating Capacity Function of Temperature Curve Name
  Heating VS AirFrac Test,        !- Speed 7 Heating Capacity Function of Air Flow Fraction Curve Name
  Heating VS WaterFrac Test,      !- Speed 7 Heating Capacity Function of Water Flow Fraction Curve Name
  EIRH VS Temp1 Test,             !- Speed 7 Energy Input Ratio Function of Temperature Curve Name
  EIRH VS AirFrac Test,           !- Speed 7 Energy Input Ratio Function of Air Flow Fraction Curve Name
  EIRH VS WaterFrac Test,         !- Speed 7 Energy Input Ratio Function of Water Flow Fraction Curve Name
  0.1,                            !- Speed 7 Waste Heat fraction to power input
  Heating wasteHeat VS Temp1 Test,!- Speed 7 Waste Heat Function of Temperature Curve Name
  7248.5,                         !- Speed 8 Reference Unit Gross Rated Heating Capacity
  5.0,                            !- Speed 8 Reference Unit Gross Rated Heating COP
  0.3246672,                      !- Speed 8 Reference Unit Rated air flow rate
  0.000381695,                    !- Speed 8 Reference Unit Rated water flow rate
  Heating VS Temp1 Test,          !- Speed 8 Heating Capacity Function of Temperature Curve Name
  Heating VS AirFrac Test,        !- Speed 8 Heating Capacity Function of Air Flow Fraction Curve Name
  Heating VS WaterFrac Test,      !- Speed 8 Heating Capacity Function of Water Flow Fraction Curve Name
  EIRH VS Temp1 Test,             !- Speed 8 Energy Input Ratio Function of Temperature Curve Name
  EIRH VS AirFrac Test,           !- Speed 8 Energy Input Ratio Function of Air Flow Fraction Curve Name
  EIRH VS WaterFrac Test,         !- Speed 8 Energy Input Ratio Function of Water Flow Fraction Curve Name
  0.1,                            !- Speed 8 Waste Heat fraction to power input
  Heating wasteHeat VS Temp1 Test,!- Speed 8 Waste Heat Function of Temperature Curve Name
  8133.6,                         !- Speed 9 Reference Unit Gross Heating Capacity
  5.0,                            !- Speed 9 Reference Unit Gross Rated Heating COP
  0.3510936,                      !- Speed 9 Reference Unit Rated air flow rate
  0.000381695,                    !- Speed 9 Reference Unit Rated water flow rate
  Heating VS Temp1 Test,          !- Speed 9 Heating Capacity Function of Temperature Curve Name
  Heating VS AirFrac Test,        !- Speed 9 Heating Capacity Function of Air Flow Fraction Curve Name
  Heating VS WaterFrac Test,      !- Speed 9 Heating Capacity Function of Water Flow Fraction Curve Name
  EIRH VS Temp1 Test,             !- Speed 9 Energy Input Ratio Function of Temperature Curve Name
  EIRH VS AirFrac Test,           !- Speed 9 Energy Input Ratio Function of Air Flow Fraction Curve Name
  EIRH VS WaterFrac Test,         !- Speed 9 Energy Input Ratio Function of Water Flow Fraction Curve Name
  0.1,                            !- Speed 9 Waste Heat fraction to power input
  Heating wasteHeat VS Temp1 Test,!- Speed 9 Waste Heat Function of Temperature Curve Name
  9013.2,                         !- Speed 10 Reference Unit Gross Rated Heating Capacity
  5.0,                            !- Speed 10 Reference Unit Gross Rated Heating COP
  0.37752,                        !- Speed 10 Reference Unit Rated air flow rate
  0.000381695,                    !- Speed 10 Reference Unit Rated water flow rate
  Heating VS Temp1 Test,          !- Speed 10 Heating Capacity Function of Temperature Curve Name
  Heating VS AirFrac Test,        !- Speed 10 Heating Capacity Function of Air Flow Fraction Curve Name
  Heating VS WaterFrac Test,      !- Speed 10 Heating Capacity Function of Water Flow Fraction Curve
  EIRH VS Temp1 Test,             !- Speed 10 Energy Input Ratio Function of Temperature Curve Name
  EIRH VS AirFrac Test,           !- Speed 10 Energy Input Ratio Function of Air Flow Fraction Curve Name
  EIRH VS WaterFrac Test,         !- Speed 10 Energy Input Ratio Function of Water Flow Fraction Curve Name
  0.1,                            !- Speed 10 Waste Heat fraction to power input
  Heating wasteHeat VS Temp1 Test;!- Speed 10 Waste Heat Function of Temperature Curve Name";
		public static string Field_SpeedXWasteHeatFunctionOfTemperatureCurveName => Value._Field_SpeedXWasteHeatFunctionOfTemperatureCurveName;

	

}

	public sealed class CoilCoolingDXSingleSpeedThermalStorage
    { 

		private string _name = @"Coil:Cooling:DX:SingleSpeed:ThermalStorage";
		private string _note = @"This object models a special direct expansion (DX) cooling coil that includes methods of storing thermal energy within the cooling coil package. This packaged thermal storage cooling coil model includes all of the equipment needed to charge and discharge and the Thermal Energy Storage (TES) tank itself. This coil object is used with CoilSystem:Cooling:DX object and a constant volume supply fan, but all other subcomponents are contained within the package.

Some types of devices may have a process air cooling section that actually has two coils, one an evaporator and the second some other kind of coil that cools by discharging the TES tank. There may also be two separate heat engines inside the package with two compressors. The model wraps these complexities inside of the model which considers just one process air cooling section that combines both types of coils and one heat rejection condenser section that rejects heat from both engines. The operating modes that are likely to have two heat engines offer dual sets of rating points and performance curves to model the energy and capacity implications separately.

The model offers various modes of operation that can be controlled over time using either a schedule or EMS actuators. The user can choose which of the five operating modes are present in the device. Each of the modes has its own separate set of performance characteristics and curves and the model can change abruptly from one mode to the next. For example when using the schedule control, the TES coil can be put into Charge Only Mode for some number of hours at night, operated in Cooling Only Mode during the mild morning hours, and run in Discharge Only Mode during the hottest part of the day. Custom control routines can be programmed using EMS to obtain a dynamic, supervisory control algorithm.



  Off Mode. This mode is always present. Although the coil will not do any cooling, the state of the TES tank is still modeled since it can continue to exchange heat with the surrounding ambient air.

  Cooling Only Mode. This mode is where the coil cools air at the evaporator using a model that is very similar to the regular, single speed DX cooling coil. The same five performance curves are used to describe cooling capacity and electric power use. The sensible heat ratio is described using two performance curves in the same as is available for 100% outdoor air coils. The TES tank is neither charged or discharged but it continues to exchange heat with the surrounding ambient air.

  Cooling And Charge Mode. This mode is where the coil both cools air at the evaporator and cools the TES tank at the same time. The model supports separate performance characteristics when there two separate heat engines, one for evaporator cooling and one for charging the TES tank.

  Cooling and Discharge Mode. This mode is where the coil cools process air and heat is rejected to both the condenser section and the TES tank at the same time. The model supports separate performance characteristics when there two separate heat engines, one for evaporator cooling and one for TES cooling.

  Charge Only Mode. This mode is where the coil charges the TES tank but does not provide any cooling at the process air cooling section.

  Discharge Only Mode. This mode is where the coil cools process air by discharging the TES tank.


This cooling coil can be autosized. The cooling capacity for the cooling only mode is sized to meet the air system s final design cooling capacity. The cooling capacity for the other modes, and the storage capacity, can all be scaled relative to that one capacity using sizing factors that can be input by the user.
";
		

		private static readonly System.Lazy<CoilCoolingDXSingleSpeedThermalStorage> instance = new System.Lazy<CoilCoolingDXSingleSpeedThermalStorage>(() => new CoilCoolingDXSingleSpeedThermalStorage());
        private static CoilCoolingDXSingleSpeedThermalStorage Value => instance.Value;
		public static string Name => Value._name;
        public static string Note => Value._note;
		private CoilCoolingDXSingleSpeedThermalStorage(){}

	private string _Field_Name = @"A unique name for this TES coil object, assigned by user.";
		public static string Field_Name => Value._Field_Name;

		private string _Field_AvailabilityScheduleName = @"The name of a schedule that determines whether the TES coil is available for cooling during a given time period. A schedule value greater than 0 (usually 1 is used) indicates that the unit can be on during a given time period. A value less than or equal to 0 (usually 0 is used) denotes that unit must be in off mode. If this field is blank, the schedule has values of 1 for all time periods.";
		public static string Field_AvailabilityScheduleName => Value._Field_AvailabilityScheduleName;

		private string _Field_OperatingModeControlMethod = @"This field determines how the TES coil is to be controlled in terms of which operating mode is in effect for a given time period. There are two choices, ScheduledModes or EMSControlled. Choosing ScheduledModes indicates that the operating mode is determined by the values in a schedule that is named in the following input field. Choosing EMSControlled indicates that the operating mode is determined by the state of an EMS actuator called Coil:Cooling:DX:SingleSpeed:ThermalStorage with the control type Operating Mode.";
		public static string Field_OperatingModeControlMethod => Value._Field_OperatingModeControlMethod;

		private string _Field_OperationModeControlScheduleName = @"This field is used (and required) if the operating model control method is set to ScheduledModes in the previous input field. The control schedule consists of a series of integer values that indicate what mode the TES coil should operate in for a given time period. The values for various operating modes have been programmed to be as follows:


\def\labelenumi{\arabic{enumi}.}
\setcounter{enumi}{-1}

  Off Mode

  Cooling Only Mode

  Cooling And Charge Mode

  Cooling And Discharge Mode

  Charge Only Mode

  Discharge Only Mode";
		public static string Field_OperationModeControlScheduleName => Value._Field_OperationModeControlScheduleName;

		private string _Field_StorageType = @"This field is used to determine what type of material is used for thermal storage. There are two basic types of thermal storage material, fluid or ice. For fluid tanks, the material can be water or a user-defined fluid such as a glycol and the storage of thermal energy accompanies changes in the temperature of the fluid in the tank. For ice tanks, the material is water ice and the storage of thermal energy accompanies changes in the fraction of ice. This input field has three possible choices: {Water}, {UserDefinedFluidType}, Or {Ice}. Choose {Water} for a fluid tank TES based on water. Choose {UserDefinedFluidType} for a fluid tank TES based on custom or glycol type fluid. Choose {Ice} for ice-based TES tank.";
		public static string Field_StorageType => Value._Field_StorageType;

		private string _Field_UserDefinedFluidType = @"This field is used to declare what type of user defined fluid is contained in the TES tank. This input field is only used (and required) if the previous field is set to UserDefinedFluidType. Water, EthyleneGlycol, and PropyleneGlycol have fluid properties built-in to EnergyPlus. Using a FluidProperties:GlycolConcentration object allows specifying a mixture of water and a glycol and the name of one can be entered here. For other types of fluids, a complete set of fluid property data is needed, see FluidProperties:Name, FluidProperties:Temperature, etc.";
		public static string Field_UserDefinedFluidType => Value._Field_UserDefinedFluidType;

		private string _Field_FluidStorageVolumeM3 = @"This field is used to describe the size of fluid-based TES tank, in m^{3}. The storage volume can be automatically calculated based on the cooling capacity and sizing factor.";
		public static string Field_FluidStorageVolumeM3 => Value._Field_FluidStorageVolumeM3;

		private string _Field_IceStorageCapacityGJ = @"This field is used to describe the size of ice-based TES tank, in GJ. The storage capacity can be automatically calculated based on the cooling capacity and a sizing factor.";
		public static string Field_IceStorageCapacityGJ => Value._Field_IceStorageCapacityGJ;

		private string _Field_StorageCapacitySizingFactorHr = @"This field is used if one of the previous two fields is set to autocalculate. The value entered here is a time duration, in hours. This time period is used for calculating a storage capacity. The basic idea is that storage be sized such that the TES can provide cooling at rated capacity for this amount of time. The rated capacity used in the sizing calculation is the Discharge Only Mode Rated Storage Discharging Capacity unless the Discharge Only mode is not available in which case it is the Cooling Only Mode Rated Total Evaporator Cooling Capacity. This sizing factor approach allows scaling the storage size relative to the TES coil s capacity. The sizing factor is applied for an ice-based TES by simply multiplying the rated capacity by the time duration (converted to seconds). For fluid-based TES, a change in fluid temperature of 10 ??C is assumed to calculate the tank volume.";
		public static string Field_StorageCapacitySizingFactorHr => Value._Field_StorageCapacitySizingFactorHr;

		private string _Field_StorageTankAmbientTemperatureNodeName = @"This field is used to assign the environmental conditions surrounding the TES coil. The thermal storage tank exchanges heat with its surroundings and the boundary conditions for those surrounding are taken from this node named in this field. Typically this is the name of a node declared to be an outdoor air node. This field is required.";
		public static string Field_StorageTankAmbientTemperatureNodeName => Value._Field_StorageTankAmbientTemperatureNodeName;

		private string _Field_StorageTankToAmbientUValueTimesAreaHeatTransferCoefficientWK = @"This field is used to characterize the rate at which heat is exchanged between the TES tank and the surrounding ambient conditions, in W/K. This is an overall UA value for the tank where the U-factor and surface area are combined into one coefficient. Heat loss or gain to the TES tank is modeled using \dot Q = {\left( {UA} \right)_{Tank}}\left( {{T_{TES}} - {T_{Amb}}} \right) . This field is required.";
		public static string Field_StorageTankToAmbientUValueTimesAreaHeatTransferCoefficientWK => Value._Field_StorageTankToAmbientUValueTimesAreaHeatTransferCoefficientWK;

		private string _Field_FluidStorageTankRatingTemperatureC = @"This field is used to define what temperature is used for rating conditions when using a fluid storage tank. This field is only used for Storage Type of Water or UserDefinedFluidType. The temperature here is used for declaring the state of the TES fluid tank that corresponds to Rated conditions. The temperature entered here is used to define fluid properties and to characterize the performance curves that depend on the state of the TES.";
		public static string Field_FluidStorageTankRatingTemperatureC => Value._Field_FluidStorageTankRatingTemperatureC;

		private string _Field_RatedEvaporatorAirFlowRateM3S = @"This field is the air volume flow rate through the coil, in m^{3}/s, at rating conditions. This is the rated air flow rate through the evaporator (and any other air cooling devices that are in series with the main evaporator). The coil can be operated with a different flow rate than this rated flow rate and the performance of the unit scales accordingly using the curves that are of the type Function of Flow Fraction Curve. All of the other rated values for capacity, COP, and SHR values, for all the various modes, should be determined at the same air flow rate used here. This field can be autosized.";
		public static string Field_RatedEvaporatorAirFlowRateM3S => Value._Field_RatedEvaporatorAirFlowRateM3S;

		private string _Field_EvaporatorAirInletNodeName = @"This field is the name of an HVAC system node that the coil draws in as its inlet air. This for the evaporator s connection to air system but it may include other air cooling devices that are in series with the evaporator and contained within the packaged TES coil. This node must be unique across the model. This field is required.";
		public static string Field_EvaporatorAirInletNodeName => Value._Field_EvaporatorAirInletNodeName;

		private string _Field_EvaporatorAirOutletNodeName = @"This field is the name of an HVAC system node that the coils sends its outlet air. This for the evaporator s connection to air system but it may include other air cooling devices that are in series with the evaporator and contained within the packaged TES coil. This node must be unique across the model. This field is required.";
		public static string Field_EvaporatorAirOutletNodeName => Value._Field_EvaporatorAirOutletNodeName;

		private string _Field_CoolingOnlyModeAvailable = @"This field is used to indicate if the packaged TES coil includes a mode with only cooling and no equipment is interacting with TES tank to charge or discharge it. The choices are Yes or No. This field is required.";
		public static string Field_CoolingOnlyModeAvailable => Value._Field_CoolingOnlyModeAvailable;

		private string _Field_CoolingOnlyModeRatedTotalEvaporatorCoolingCapacityW = @"This field is used to specify the total, full load cooling capacity (sensible plus latent), in Watts, of the TES coil at rated conditions, while operating in Cooling Only Mode. The rating conditions are air entering the cooling coil at 26.7 ??C drybulb, 19.4 ??C wetbulb and air entering the outdoor condenser section at 35 ??C drybulb and 23.9 ??C wetbulb, and the air flow rate specified in Rated Evaporator Air Flow Rate. Capacity should be gross (i.e.~supply air fan heat is NOT included). This total cooling capacity is a central value for TES coil in the sense that it is the basis for various autocalculated sizes for the rest of the model which can be scaled off of this one value. This field is required if Cooling Only Mode is available or if another operating mode s capacity, or storage capacity, will be autocalculated from this value. This field is autosizable.";
		public static string Field_CoolingOnlyModeRatedTotalEvaporatorCoolingCapacityW => Value._Field_CoolingOnlyModeRatedTotalEvaporatorCoolingCapacityW;

		private string _Field_CoolingOnlyModeRatedSensibleHeatRatio = @"This field is used to specify the sensible heat ratio (SHR) at rating conditions while operating in Cooling Only Mode. SHR is the sensible cooling capacity divided by the total (sensible plus latent) cooling capacity and is dimensionless. The rating conditions are air entering the cooling coil at 26.7 ??C drybulb, 19.4 ??C wetbulb, air entering the outdoor condenser section at 35 ??C drybulb and 23.9 ??C wetbulb, and cooling coil air flow rate specified in Rated Evaporator Air Flow Rate. Both the sensible and total cooling capacities used to define the rated SHR should be gross and not include supply fan heat. The packaged TES coil model uses SHR curves to modify the rated SHR as conditions move away from the rating conditions. This field is only used if Cooling Only Mode is available. If this input is left blank, the default is 0.7.";
		public static string Field_CoolingOnlyModeRatedSensibleHeatRatio => Value._Field_CoolingOnlyModeRatedSensibleHeatRatio;

		private string _Field_CoolingOnlyModeRatedCOP = @"This field is used to specify the coefficient of performance (COP) at rating conditions while operating in Cooling Only Mode. COP is the total cooling power output in watts divided by the electric power input in watts and is dimensionless. The rating conditions are air entering the cooling coil at 26.7 ??C drybulb, 19.4 ??C wetbulb, air entering the outdoor condenser section at 35 ??C drybulb and 23.9 ??C wetbulb, and cooling coil air flow rate specified in Rated Evaporator Air Flow Rate. The electric input power includes power for the compressor(s), condenser fan(s), and internal controls but does not include the electric power for the supply fan (which is modeled separately in EnergyPlus). The total cooling power output is the same as the value for the Cooling Only Mode Rated Total Evaporator Cooling Capacity and is gross cooling without the fan heat. This field is only used if Cooling Only Mode is available. If this input is left blank, the default is 3.0.";
		public static string Field_CoolingOnlyModeRatedCOP => Value._Field_CoolingOnlyModeRatedCOP;

		private string _Field_CoolingOnlyModeTotalEvaporatorCoolingCapacityFunctionOfTemperatureCurveName = @"This field is the name of a separate performance curve object that parameterizes the variation of the total cooling capacity as a function of (1) the wetbulb temperature of air entering the evaporator section of the TES coil and (2) the drybulb temperature of the air entering the condenser section. The performance curve can be any curve or table based on two independent variables, x and y, including: Curve:Biquadratic, Table:TwoIndependentVariables, Curve:Bicubic, and Curve:QuadraticLinear. The x values for the performance curve are the wetbulb temperature of air entering the evaporator section. The y values for the performance curve are the drybulb temperature of air entering the condenser section (which if using evaporatively-cooled condenser the temperature will be adjusted to approach the wetbulb temperature depending on effectiveness). The performance curve is normalized to have a value of 1.0 at the rating point which is defined to be x = 19.4 ??C and y = 35.0 ??C. The result of the curve is multiplied by Cooling Only Mode Rated Total Evaporator Cooling Capacity to model capacity at temperatures away from the rating point. This field is required if Cooling Only Mode is available.";
		public static string Field_CoolingOnlyModeTotalEvaporatorCoolingCapacityFunctionOfTemperatureCurveName => Value._Field_CoolingOnlyModeTotalEvaporatorCoolingCapacityFunctionOfTemperatureCurveName;

		private string _Field_CoolingOnlyModeTotalEvaporatorCoolingCapacityFunctionOfFlowFractionCurveName = @"This field is the name of a separate performance curve object that parameterizes the variation of the total cooling capacity as a function of the ratio of actual air flow rate across the cooling coil to the value of the Rated Evaporator Air Flow Rate. The performance curve can be any curve or table based on one independent variable, x, including: Curve:Linear, Curve:Quadratic, Curve:Cubic, Curve:Quartic, Curve:Exponent, Curve:ExponentialSkewNormal, Curve:Sigmoid, Curve:RectuangularHyperbola1, Curve:RectangularHyperbola2, Curve:ExponentialDecay, Curve:DoubleExponentialDecay, and Table:OneIndependentVariable. The performance curve is normalized to have a value of 1.0 at the rating point which is defined to be x = 1.0. The result of the curve is multiplied by the Cooling Only Mode Rated Total Evaporator Cooling Capacity to model capacity at air flow rates away from the rating point. This field is required if Cooling Only Mode is available.";
		public static string Field_CoolingOnlyModeTotalEvaporatorCoolingCapacityFunctionOfFlowFractionCurveName => Value._Field_CoolingOnlyModeTotalEvaporatorCoolingCapacityFunctionOfFlowFractionCurveName;

		private string _Field_CoolingOnlyModeEnergyInputRatioFunctionOfTemperatureCurveName = @"This field is the name of a separate performance curve object that parameterizes the variation of the energy input ratio (EIR) as a function of (1) the wetbulb temperature of air entering the evaporator section of the TES coil and (2) the drybulb temperature of the air entering the condenser section. The performance curve can be any curve or table based on two independent variables, x and y, including: Curve:Biquadratic, Table:TwoIndependentVariables, Curve:Bicubic, and Curve:QuadraticLinear. The x values for the performance curve are the wetbulb temperature of air entering the evaporator section. The y values for the performance curve are the drybulb temperature of air entering the condenser section (which if using evaporatively-cooled condenser the temperature will be adjusted to approach the wetbulb temperature depending on effectiveness). The performance curve is normalized to have a value of 1.0 at the rating point which is defined to be x = 19.4 ??C and y = 35.0 ??C. The result of this curve is multiplied by the inverse of the Cooling Only Mode Rated COP to model electric energy consumption at temperatures away from the rating point. This field is required if Cooling Only Mode is available.";
		public static string Field_CoolingOnlyModeEnergyInputRatioFunctionOfTemperatureCurveName => Value._Field_CoolingOnlyModeEnergyInputRatioFunctionOfTemperatureCurveName;

		private string _Field_CoolingOnlyModeEnergyInputRatioFunctionOfFlowFractionCurveName = @"This field is the name of a separate performance curve object that parameterizes the variation of the energy input ratio (EIR) as a function of the ratio of actual air flow rate across the cooling coil to the value of the Rated Evaporator Air Flow Rate. The performance curve can be any curve or table based on one independent variable, x, including: Curve:Linear, Curve:Quadratic, Curve:Cubic, Curve:Quartic, Curve:Exponent, Curve:ExponentialSkewNormal, Curve:Sigmoid, Curve:RectuangularHyperbola1, Curve:RectangularHyperbola2, Curve:ExponentialDecay, Curve:DoubleExponentialDecay, and Table:OneIndependentVariable. The performance curve is normalized to have a value of 1.0 at the rating point which is defined to be x = 1.0. The result of the curve is multiplied by the inverse of the Cooling Only Mode Rated COP to model electric energy consumption at air flow rates away from the rating point. This field is required if Cooling Only Mode is available.";
		public static string Field_CoolingOnlyModeEnergyInputRatioFunctionOfFlowFractionCurveName => Value._Field_CoolingOnlyModeEnergyInputRatioFunctionOfFlowFractionCurveName;

		private string _Field_CoolingOnlyModePartLoadFractionCorrelationCurveName = @"This field is the name of a separate performance curve object that parameterizes the variation of the energy input ratio (EIR) as a function of the part load ratio (PLR). PLR is the ratio of current cooling load to the current cooling capacity. The performance curve can be any curve or table based on one independent variable, x, including: Curve:Linear, Curve:Quadratic, Curve:Cubic, Curve:Quartic, Curve:Exponent, Curve:ExponentialSkewNormal, Curve:Sigmoid, Curve:RectuangularHyperbola1, Curve:RectangularHyperbola2, Curve:ExponentialDecay, Curve:DoubleExponentialDecay, and Table:OneIndependentVariable. The performance curve is normalized to have a value of 1.0 at the rating point which is defined to be x = 1.0. The result of the curve is the part load fraction (PLF) and the runtime fraction of the coil is defined as PLR divided by PLF. The runtime fraction is then multiplied by the energy input ratio to model electric energy consumption at part load to account for inefficiencies because of compressor cycling. This field is required if Cooling Only Mode is available.";
		public static string Field_CoolingOnlyModePartLoadFractionCorrelationCurveName => Value._Field_CoolingOnlyModePartLoadFractionCorrelationCurveName;

		private string _Field_CoolingOnlyModeSensibleHeatRatioFunctionOfTemperatureCurveName = @"This field is the name of a separate performance curve object that parameterizes the variation of the sensible heat ratio (SHR) as a function of (1) the wetbulb temperature of air entering the evaporator section of the TES coil and (2) the drybulb temperature of the air entering the evaporator section. The performance curve can be any curve or table based on two independent variables, x and y, including: Curve:Biquadratic, Table:TwoIndependentVariables, Curve:Bicubic, and Curve:QuadraticLinear. The x values for the performance curve are the wetbulb temperature of air entering the evaporator section. The y values for the performance curve are the drybulb temperature of air entering the evaporator section. The performance curve is normalized to have a value of 1.0 at the rating point which is defined to be x = 19.4 ??C and y = 26.7 ??C. The result of the curve is multiplied by the Cooling Only Mode Rated Sensible Heat Ratio to model the SHR at coil entering temperatures that differ from the rating point. This field is required if Cooling Only Mode is available.";
		public static string Field_CoolingOnlyModeSensibleHeatRatioFunctionOfTemperatureCurveName => Value._Field_CoolingOnlyModeSensibleHeatRatioFunctionOfTemperatureCurveName;

		private string _Field_CoolingOnlyModeSensibleHeatRatioFunctionOfFlowFractionCurveName = @"This field is the name of a separate performance curve object that parameterizes the variation of the sensible heat ratio (SHR) as a function of the ratio of actual air flow rate across the cooling coil to the value of the Rated Evaporator Air Flow Rate. The performance curve can be any curve or table based on one independent variable, x, including: Curve:Linear, Curve:Quadratic, Curve:Cubic, Curve:Quartic, Curve:Exponent, Curve:ExponentialSkewNormal, Curve:Sigmoid, Curve:RectuangularHyperbola1, Curve:RectangularHyperbola2, Curve:ExponentialDecay, Curve:DoubleExponentialDecay, and Table:OneIndependentVariable. The performance curve is normalized to have a value of 1.0 at the rating point which is defined to be x = 1.0. The result of the curve is multiplied by the Cooling Only Mode Rated Sensible Heat Ratio to model the SHR at coil air flow rates that differ from the rating point. This field is required if Cooling Only Mode is available.";
		public static string Field_CoolingOnlyModeSensibleHeatRatioFunctionOfFlowFractionCurveName => Value._Field_CoolingOnlyModeSensibleHeatRatioFunctionOfFlowFractionCurveName;

		private string _Field_CoolingAndChargeModeAvailable = @"This field is used to indicate if the packaged TES coil includes a mode with both cooling at the coil and charging of the TES tank at the same time. The choices are Yes or No. This field is required.";
		public static string Field_CoolingAndChargeModeAvailable => Value._Field_CoolingAndChargeModeAvailable;

		private string _Field_CoolingAndChargeModeRatedTotalEvaporatorCoolingCapacityW = @"This field is used to specify the total, full load cooling capacity (sensible plus latent), in Watts, of the TES coil at rated conditions, while operating in Cooling And Charge Mode. The rating conditions are air entering the cooling coil at 26.7 ??C drybulb, 19.4 ??C wetbulb and air entering the outdoor condenser section at 35 ??C drybulb and 23.9 ??C wetbulb, the air flow rate specified in Rated Evaporator Air Flow Rate, and the state of TES at either the Fluid Storage Tank Rating Temperature (for water or fluid storage type) or an ice fraction of 0.5 (for ice storage type). Capacity should be gross (i.e.~supply air fan heat is NOT included). The Cooling and Charge Mode has two capacities, this first one is for cooling and would typically be for a heat engine operating between the condenser and the evaporator. This field is required if Cooling And Charge Mode is available.

This field is autocalculatable. When autocalculating the capacity, the following sizing factor field is used to scale this capacity relative to the Cooling Only Mode Rated Total Evaporator Cooling Capacity.";
		public static string Field_CoolingAndChargeModeRatedTotalEvaporatorCoolingCapacityW => Value._Field_CoolingAndChargeModeRatedTotalEvaporatorCoolingCapacityW;

		private string _Field_CoolingAndChargeModeCapacitySizingFactor = @"This field is used if the previous input field is set to autocalculate. This sizing factor is multiplied by the Cooling Only Mode Rated Total Evaporator Cooling Capacity to obtain a scaled value for Cooling and Charge Mode Rated Total Evaporator Cooling Capacity, in Watts. If this field is left blank the default values is 0.5.";
		public static string Field_CoolingAndChargeModeCapacitySizingFactor => Value._Field_CoolingAndChargeModeCapacitySizingFactor;

		private string _Field_CoolingAndChargeModeRatedStorageChargingCapacityW = @"This field is used to specify the total, full load charging capacity, in Watts, of the TES coil at rated conditions, while operating in Cooling And Charge Mode. The rating conditions are air entering the cooling coil at 26.7 ??C drybulb, 19.4 ??C wetbulb and air entering the outdoor condenser section at 35 ??C drybulb and 23.9 ??C wetbulb, the air flow rate specified in Rated Evaporator Air Flow Rate, and the state of TES at either the Fluid Storage Tank Rating Temperature (for water or fluid storage type) or an ice fraction of 0.5 (for ice storage type). Capacity should be net (i.e.~any ancillary equipment inside the package needed for charging is included). The Cooling and Charge Mode has two capacities, this second one is for charging and would typically be for a heat engine operating between the condenser and the TES tank. This field is required if Cooling And Charge Mode is available.

This field is autocalculatable. When autocalculating the capacity, the following sizing factor field is used to scale this capacity relative to the Cooling Only Mode Rated Total Evaporator Cooling Capacity.";
		public static string Field_CoolingAndChargeModeRatedStorageChargingCapacityW => Value._Field_CoolingAndChargeModeRatedStorageChargingCapacityW;

		private string _Field_CoolingAndChargeModeStorageCapacitySizingFactor = @"This field is used if the previous input field is set to autocalculate. This sizing factor is multiplied by the Cooling Only Mode Rated Total Evaporator Cooling Capacity to obtain a scaled value for Cooling and Charge Mode Rated Storage Charging Capacity, in Watts. If this field is left blank the default values is 0.5.";
		public static string Field_CoolingAndChargeModeStorageCapacitySizingFactor => Value._Field_CoolingAndChargeModeStorageCapacitySizingFactor;

		private string _Field_CoolingAndChargeModeRatedSensibleHeatRatio = @"This field is used to specify the sensible heat ratio (SHR) at rating conditions while operating in Cooling And Charge Mode. SHR is the sensible cooling capacity divided by the total (sensible plus latent) cooling capacity and is dimensionless. The rating conditions are air entering the cooling coil at 26.7 ??C drybulb, 19.4 ??C wetbulb, air entering the outdoor condenser section at 35 ??C drybulb and 23.9 ??C wetbulb, and cooling coil air flow rate specified in Rated Evaporator Air Flow Rate. Both the sensible and total cooling capacities used to define the rated SHR should be gross and not include supply fan heat. The packaged TES coil model uses SHR curves to modify the rated SHR as conditions move away from the rating conditions. This field is only used if Cooling And Charge Mode is available. If this input is left blank, the default is 0.7.";
		public static string Field_CoolingAndChargeModeRatedSensibleHeatRatio => Value._Field_CoolingAndChargeModeRatedSensibleHeatRatio;

		private string _Field_CoolingAndChargeModeCoolingRatedCOP = @"This field is used to specify the coefficient of performance (COP) at rating conditions while operating in Cooling And Charge Mode to cool air at the evaporator. COP is the total cooling power output in watts divided by the electric power input in watts and is dimensionless. The rating conditions are air entering the cooling coil at 26.7 ??C drybulb, 19.4 ??C wetbulb, air entering the outdoor condenser section at 35 ??C drybulb and 23.9 ??C wetbulb, cooling coil air flow rate specified in Rated Evaporator Air Flow Rate, and the state of TES at either the Fluid Storage Tank Rating Temperature (for water or fluid storage type) or an ice fraction of 0.5 (for ice storage type). The electric input power includes power for the compressor(s), condenser fan(s), and internal controls but does not include the electric power for the supply fan (which is modeled separately in EnergyPlus). The total cooling power output is the same as the value for the Cooling And Charge Mode Rated Total Evaporator Cooling Capacity and is gross cooling without the fan heat. The Cooling And Charge Mode has two COP values and this first COP is for cooling and would typically be for a heat engine operating between the condenser and the evaporator. This field is only used if Cooling And Charge Mode is available. If this input is left blank, the default is 3.0.";
		public static string Field_CoolingAndChargeModeCoolingRatedCOP => Value._Field_CoolingAndChargeModeCoolingRatedCOP;

		private string _Field_CoolingAndChargeModeChargingRatedCOP = @"This field is used to specify the coefficient of performance (COP) at rating conditions while operating in Cooling And Charge Mode to charge the TES. COP is the total cooling power output in watts divided by the electric power input in watts and is dimensionless. The rating conditions are air entering the cooling coil at 26.7 ??C drybulb, 19.4 ??C wetbulb, air entering the outdoor condenser section at 35 ??C drybulb and 23.9 ??C wetbulb, cooling coil air flow rate specified in Rated Evaporator Air Flow Rate, and the state of TES at either the Fluid Storage Tank Rating Temperature (for water or fluid storage type) or an ice fraction of 0.5 (for ice storage type). The electric input power includes power for the compressor(s), condenser fan(s), and internal controls. The charging power output is the same as the value for the Cooling And Charge Mode Rated Storage Charging Capacity and is net charging including any internal equipment. The Cooling And Charge Mode has two COP values and this second COP is for charging and would typically be for a heat engine operating between the condenser and the TES tank. This field is only used if Cooling And Charge Mode is available. If this input is left blank, the default is 3.0.";
		public static string Field_CoolingAndChargeModeChargingRatedCOP => Value._Field_CoolingAndChargeModeChargingRatedCOP;

		private string _Field_CoolingAndChargeModeTotalEvaporatorCoolingCapacityFunctionOfTemperatureCurveName = @"This field is the name of a separate performance curve object that parameterizes the variation of the total cooling capacity as a function of (1) the wetbulb temperature of air entering the evaporator section of the TES coil, (2) the drybulb temperature of the air entering the condenser section, and (3) the state of TES tank (in C or fraction). The performance curve can be any curve or table based on three independent variables, x, y, and z, including: Curve:Triquadratic and Table:MultiVariableLookup. The x values for the performance curve are the wetbulb temperature of air entering the evaporator section. The y values for the performance curve are the drybulb temperature of air entering the condenser section (which if using evaporatively-cooled condenser the temperature will be adjusted to approach the wetbulb temperature depending on effectiveness). The z values are the state of the TES tank which are the tank s temperature for water or fluid storage type or the storage fraction for ice storage types. The performance curve is normalized to have the value of 1.0 at the rating point which is defined to be x = 19.4 ??C, y = 35.0 ??C, and z = 0.5 for Ice storage type or z = Fluid Storage Tank Rating Temperature when storage type is Water or UserDefinedFluidType. The result of the curve is multiplied by Cooling And Charge Mode Rated Total Evaporator Cooling Capacity to model capacity at temperatures away from the rating point. This field is required if Cooling And Charge Mode is available.";
		public static string Field_CoolingAndChargeModeTotalEvaporatorCoolingCapacityFunctionOfTemperatureCurveName => Value._Field_CoolingAndChargeModeTotalEvaporatorCoolingCapacityFunctionOfTemperatureCurveName;

		private string _Field_CoolingAndChargeModeTotalEvaporatorCoolingCapacityFunctionOfFlowFractionCurveName = @"This field is the name of a separate performance curve object that parameterizes the variation of the total cooling capacity as a function of the ratio of actual air flow rate across the cooling coil to the value of the Rated Evaporator Air Flow Rate. The performance curve can be any curve or table based on one independent variable, x, including: Curve:Linear, Curve:Quadratic, Curve:Cubic, Curve:Quartic, Curve:Exponent, Curve:ExponentialSkewNormal, Curve:Sigmoid, Curve:RectuangularHyperbola1, Curve:RectangularHyperbola2, Curve:ExponentialDecay, Curve:DoubleExponentialDecay, and Table:OneIndependentVariable. The performance curve is normalized to have a value of 1.0 at the rating point which is defined to be x = 1.0. The result of the curve is multiplied by the Cooling And Charge Mode Rated Total Evaporator Cooling Capacity to model capacity at air flow rates away from the rating point. This field is required if Cooling And Charge Mode is available.";
		public static string Field_CoolingAndChargeModeTotalEvaporatorCoolingCapacityFunctionOfFlowFractionCurveName => Value._Field_CoolingAndChargeModeTotalEvaporatorCoolingCapacityFunctionOfFlowFractionCurveName;

		private string _Field_CoolingAndChargeModeEvaporatorEnergyInputRatioFunctionOfTemperatureCurveName = @"This field is the name of a separate performance curve object that parameterizes the variation of the energy input ratio (EIR) for evaporator cooling as a function of (1) the wetbulb temperature of air entering the evaporator section of the TES coil, (2) the drybulb temperature of the air entering the condenser section, and (3) the state of TES tank (in C or fraction). The performance curve can be any curve or table based on three independent variables, x, y, and z, including: Curve:Triquadratic and Table:MultiVariableLookup. The x values for the performance curve are the wetbulb temperature of air entering the evaporator section. The y values for the performance curve are the drybulb temperature of air entering the condenser section (which if using evaporatively-cooled condenser the temperature will be adjusted to approach the wetbulb temperature depending on effectiveness). The z values are the state of the TES tank which are the tank s temperature for water or fluid storage type or the storage fraction for ice storage types. The performance curve is normalized to have the value of 1.0 at the rating point which is defined to be x = 19.4 ??C, y = 35.0 ??C, and z = 0.5 for Ice storage type or z = Fluid Storage Tank Rating Temperature when storage type is Water or UserDefinedFluidType. The performance curve is normalized to have the value of 1.0 at the rating point. The result of this curve is multiplied by the inverse of the Cooling And Charge Mode Cooling Rated COP to model electric energy consumption at temperatures away from the rating point. This field is required if Cooling And Charge Mode is available.";
		public static string Field_CoolingAndChargeModeEvaporatorEnergyInputRatioFunctionOfTemperatureCurveName => Value._Field_CoolingAndChargeModeEvaporatorEnergyInputRatioFunctionOfTemperatureCurveName;

		private string _Field_CoolingAndChargeModeEvaporatorEnergyInputRatioFunctionOfFlowFractionCurveName = @"This field is the name of a separate performance curve object that parameterizes the variation of the energy input ratio (EIR) for evaporator cooling as a function of the ratio of actual air flow rate across the cooling coil to the value of the Rated Evaporator Air Flow Rate. The performance curve can be any curve or table based on one independent variable, x, including: Curve:Linear, Curve:Quadratic, Curve:Cubic, Curve:Quartic, Curve:Exponent, Curve:ExponentialSkewNormal, Curve:Sigmoid, Curve:RectuangularHyperbola1, Curve:RectangularHyperbola2, Curve:ExponentialDecay, Curve:DoubleExponentialDecay, and Table:OneIndependentVariable. The performance curve is normalized to have a value of 1.0 at the rating point which is defined to be x = 1.0. The result of the curve is multiplied by the inverse of the Cooling And Charge Mode Cooling Rated COP to model electric energy consumption at air flow rates away from the rating point. This field is required if Cooling And Charge Mode is available.";
		public static string Field_CoolingAndChargeModeEvaporatorEnergyInputRatioFunctionOfFlowFractionCurveName => Value._Field_CoolingAndChargeModeEvaporatorEnergyInputRatioFunctionOfFlowFractionCurveName;

		private string _Field_CoolingAndChargeModeEvaporatorPartLoadFractionCorrelationCurveName = @"This field is the name of a separate performance curve object that parameterizes the variation of the energy input ratio (EIR) (for evaporator cooling) as a function of the part load ratio (PLR). PLR is the ratio of current cooling load to the current cooling capacity. The performance curve can be any curve or table based on one independent variable, x, including: Curve:Linear, Curve:Quadratic, Curve:Cubic, Curve:Quartic, Curve:Exponent, Curve:ExponentialSkewNormal, Curve:Sigmoid, Curve:RectuangularHyperbola1, Curve:RectangularHyperbola2, Curve:ExponentialDecay, Curve:DoubleExponentialDecay, and Table:OneIndependentVariable. The performance curve is normalized to have a value of 1.0 at the rating point which is defined to be x = 1.0. The result of the curve is the part load fraction (PLF) and the runtime fraction of the coil is defined as PLR divided by PLF. The runtime fraction is then multiplied by the energy input ratio to model electric energy consumption at part load to account for inefficiencies because of compressor cycling. This field is required if Cooling And Charge Mode is available.";
		public static string Field_CoolingAndChargeModeEvaporatorPartLoadFractionCorrelationCurveName => Value._Field_CoolingAndChargeModeEvaporatorPartLoadFractionCorrelationCurveName;

		private string _Field_CoolingAndChargeModeStorageChargeCapacityFunctionOfTemperatureCurveName = @"This field is the name of a separate performance curve object that parameterizes the variation of the storage charging capacity as a function of (1) the wetbulb temperature of air entering the evaporator section of the TES coil, (2) the drybulb temperature of the air entering the condenser section, and (3) the state of TES tank (in C or fraction). The performance curve can be any curve or table based on three independent variables, x, y, and z, including: Curve:Triquadratic and Table:MultiVariableLookup. The x values for the performance curve are the wetbulb temperature of air entering the evaporator section. The y values for the performance curve are the drybulb temperature of air entering the condenser section (which if using evaporatively-cooled condenser the temperature will be adjusted to approach the wetbulb temperature depending on effectiveness). The z values are the state of the TES tank which are the tank s temperature for water or fluid storage type or the storage fraction for ice storage types. The performance curve is normalized to have the value of 1.0 at the rating point which is defined to be x = 19.4 ??C, y = 35.0 ??C, and z = 0.5 for Ice storage type or z = Fluid Storage Tank Rating Temperature when storage type is Water or UserDefinedFluidType. The result of the curve is multiplied by Cooling And Charge Mode Rated Storage Charging Capacity to model capacity at temperatures away from the rating point. This field is required if Cooling And Charge Mode is available.";
		public static string Field_CoolingAndChargeModeStorageChargeCapacityFunctionOfTemperatureCurveName => Value._Field_CoolingAndChargeModeStorageChargeCapacityFunctionOfTemperatureCurveName;

		private string _Field_CoolingAndChargeModeStorageChargeCapacityFunctionOfTotalEvaporatorPLRCurveName = @"This field is the name of a separate performance curve object that parameterizes the variation of the storage charging capacity as a function of part load ratio (PLR) at the evaporator. PLR is the ratio of current evaporator cooling load to the current evaporator cooling capacity. This curve allows increasing the storage charging capacity when loads at the evaporator are low. The performance curve can be any curve or table based on one independent variable, x, including: Curve:Linear, Curve:Quadratic, Curve:Cubic, Curve:Quartic, Curve:Exponent, Curve:ExponentialSkewNormal, Curve:Sigmoid, Curve:RectuangularHyperbola1, Curve:RectangularHyperbola2, Curve:ExponentialDecay, Curve:DoubleExponentialDecay, and Table:OneIndependentVariable. The performance curve is normalized to have a value of 1.0 at the rating point which is defined to be x = 1.0. The result of the curve is multiplied by Cooling And Charge Mode Rated Storage Charging Capacity to model capacity at evaporator PLR less than 1.0. This field is required if Cooling And Charge Mode is available.";
		public static string Field_CoolingAndChargeModeStorageChargeCapacityFunctionOfTotalEvaporatorPLRCurveName => Value._Field_CoolingAndChargeModeStorageChargeCapacityFunctionOfTotalEvaporatorPLRCurveName;

		private string _Field_CoolingAndChargeModeStorageEnergyInputRatioFunctionOfTemperatureCurveName = @"This field is the name of a separate performance curve object that parameterizes the variation of the energy input ratio (EIR) for charging as a function of (1) the wetbulb temperature of air entering the evaporator section of the TES coil, (2) the drybulb temperature of the air entering the condenser section, and (3) the state of TES tank (in C or fraction). The performance curve can be any curve or table based on three independent variables, x, y, and z, including: Curve:Triquadratic and Table:MultiVariableLookup. The x values for the performance curve are the wetbulb temperature of air entering the evaporator section. The y values for the performance curve are the drybulb temperature of air entering the condenser section (which if using evaporatively-cooled condenser the temperature will be adjusted to approach the wetbulb temperature depending on effectiveness). The z values are the state of the TES tank which are the tank s temperature for water or fluid storage type or the storage fraction for ice storage types. The performance curve is normalized to have the value of 1.0 at the rating point which is defined to be x = 19.4 ??C, y = 35.0 ??C, and z = 0.5 for Ice storage type or z = Fluid Storage Tank Rating Temperature when storage type is Water or UserDefinedFluidType. The result of this curve is multiplied by the inverse of the Cooling And Charge Mode Charging Rated COP to model electric energy consumption at temperatures away from the rating point. This field is required if Cooling And Charge Mode is available.";
		public static string Field_CoolingAndChargeModeStorageEnergyInputRatioFunctionOfTemperatureCurveName => Value._Field_CoolingAndChargeModeStorageEnergyInputRatioFunctionOfTemperatureCurveName;

		private string _Field_CoolingAndChargeModeStorageEnergyInputRatioFunctionOfFlowFractionCurveName = @"This field is the name of a separate performance curve object that parameterizes the variation of the energy input ratio (EIR) for charging as a function of the ratio of actual air flow rate across the cooling coil to the value of the Rated Evaporator Air Flow Rate. The performance curve can be any curve or table based on one independent variable, x, including: Curve:Linear, Curve:Quadratic, Curve:Cubic, Curve:Quartic, Curve:Exponent, Curve:ExponentialSkewNormal, Curve:Sigmoid, Curve:RectuangularHyperbola1, Curve:RectangularHyperbola2, Curve:ExponentialDecay, Curve:DoubleExponentialDecay, and Table:OneIndependentVariable. The performance curve is normalized to have a value of 1.0 at the rating point which is defined to be x = 1.0. The result of the curve is multiplied by the inverse of the Cooling And Charge Mode Charging Rated COP to model electric energy consumption at air flow rates away from the rating point. This field is required if Cooling And Charge Mode is available.";
		public static string Field_CoolingAndChargeModeStorageEnergyInputRatioFunctionOfFlowFractionCurveName => Value._Field_CoolingAndChargeModeStorageEnergyInputRatioFunctionOfFlowFractionCurveName;

		private string _Field_CoolingAndChargeModeStorageEnergyPartLoadFractionCorrelationCurveName = @"This field is the name of a separate performance curve object that parameterizes the variation of the energy input ratio (EIR) (for storage charging) as a function of the part load ratio (PLR). PLR is the ratio of current cooling load to the current cooling capacity (at the evaporator). The performance curve can be any curve or table based on one independent variable, x, including: Curve:Linear, Curve:Quadratic, Curve:Cubic, Curve:Quartic, Curve:Exponent, Curve:ExponentialSkewNormal, Curve:Sigmoid, Curve:RectuangularHyperbola1, Curve:RectangularHyperbola2, Curve:ExponentialDecay, Curve:DoubleExponentialDecay, and Table:OneIndependentVariable. The performance curve is normalized to have a value of 1.0 at the rating point which is defined to be x = 1.0. The result of the curve is the part load fraction (PLF) and the runtime fraction is defined as PLR divided by PLF. The runtime fraction is then multiplied by the energy input ratio to model electric energy consumption at part load to account for inefficiencies because of compressor cycling. This field is required if Cooling And Charge Mode is available.";
		public static string Field_CoolingAndChargeModeStorageEnergyPartLoadFractionCorrelationCurveName => Value._Field_CoolingAndChargeModeStorageEnergyPartLoadFractionCorrelationCurveName;

		private string _Field_CoolingAndChargeModeSensibleHeatRatioFunctionOfTemperatureCurveName = @"This field is the name of a separate performance curve object that parameterizes the variation of the sensible heat ratio (SHR) as a function of temperature and optionally state of TES tank. The user can enter the name of a curve or table object that has either two or three independent variables.

For a curve or table with two independent variables the SHR is a function of (1) the wetbulb temperature of air entering the evaporator section of the TES coil and (2) the drybulb temperature of the air entering the evaporator section. The performance curve can be any curve or table based on two independent variables, x and y, including: Curve:Biquadratic, Table:TwoIndependentVariables, Curve:Bicubic, and Curve:QuadraticLinear. The x values for the performance curve are the wetbulb temperature of air entering the evaporator section. The y values for the performance curve are the drybulb temperature of air entering the evaporator section.

For a curve or table with three independent variables the SHR is a function of (1) the wetbulb temperature of air entering the evaporator section of the TES coil, (2) the drybulb temperature of the air entering the evaporator section and (3) the state of TES tank (in C or fraction). The performance curve can be any curve or table based on three independent variables, x, y, and z, including: Curve:Triquadratic and Table:MultiVariableLookup. The x and y values for the curve are the same as for two independent variables while the z values are the state of the TES tank which are the tank s temperature for water or fluid storage type or the storage fraction for ice storage types.

The performance curve is normalized to have a value of 1.0 at the rating point which is defined to be x = 19.4 ??C, y = 26.7 ??C, and z = 0.5 for Ice storage type or z = Fluid Storage Tank Rating Temperature when storage type is Water or UserDefinedFluidType. The result of the curve is multiplied by the Cooling And Charge Mode Rated Sensible Heat Ratio to model the SHR at coil entering temperatures that differ from the rating point. This field is required if Cooling And Charge Mode is available.";
		public static string Field_CoolingAndChargeModeSensibleHeatRatioFunctionOfTemperatureCurveName => Value._Field_CoolingAndChargeModeSensibleHeatRatioFunctionOfTemperatureCurveName;

		private string _Field_CoolingAndChargeModeSensibleHeatRatioFunctionOfFlowFractionCurveName = @"This field is the name of a separate performance curve object that parameterizes the variation of the sensible heat ratio (SHR) as a function of the ratio of actual air flow rate across the cooling coil to the value of the Rated Evaporator Air Flow Rate. The performance curve can be any curve or table based on one independent variable, x, including: Curve:Linear, Curve:Quadratic, Curve:Cubic, Curve:Quartic, Curve:Exponent, Curve:ExponentialSkewNormal, Curve:Sigmoid, Curve:RectuangularHyperbola1, Curve:RectangularHyperbola2, Curve:ExponentialDecay, Curve:DoubleExponentialDecay, and Table:OneIndependentVariable. The performance curve is normalized to have a value of 1.0 at the rating point which is defined to be x = 1.0. The result of the curve is multiplied by the Cooling And Charge Mode Rated Sensible Heat Ratio to model the SHR at coil air flow rates that differ from the rating point. This field is required if Cooling And Charge Mode is available.";
		public static string Field_CoolingAndChargeModeSensibleHeatRatioFunctionOfFlowFractionCurveName => Value._Field_CoolingAndChargeModeSensibleHeatRatioFunctionOfFlowFractionCurveName;

		private string _Field_CoolingAndDischargeModeAvailable = @"This field is used to indicate if the packaged TES coil includes a mode with both cooling at the coil and discharging of the TES tank at the same time. The choices are Yes or No. This field is required.";
		public static string Field_CoolingAndDischargeModeAvailable => Value._Field_CoolingAndDischargeModeAvailable;

		private string _Field_CoolingAndDischargeModeRatedTotalEvaporatorCoolingCapacityW = @"This field is used to specify the total, full load cooling capacity (sensible plus latent), in Watts, of the TES evaporator coil at rated conditions, while operating in Cooling And Discharge Mode. The rating conditions are air entering the cooling coil at 26.7 ??C drybulb, 19.4 ??C wetbulb and air entering the outdoor condenser section at 35 ??C drybulb and 23.9 ??C wetbulb, the air flow rate specified in Rated Evaporator Air Flow Rate, and the state of TES at either the Fluid Storage Tank Rating Temperature (for water or fluid storage type) or an ice fraction of 0.5 (for ice storage type). Capacity should be gross (i.e.~supply air fan heat is NOT included). The Cooling and Discharge Mode has two capacities (and may have two separate cooling coils contained within), this first one is for Evaporator cooling and would typically be for a heat engine operating between the condenser and the evaporator. This field is required if Cooling And Discharge Mode is available.

This field is autocalculatable. When autocalculating the capacity, the following sizing factor field is used to scale this capacity relative to the Cooling Only Mode Rated Total Evaporator Cooling Capacity.";
		public static string Field_CoolingAndDischargeModeRatedTotalEvaporatorCoolingCapacityW => Value._Field_CoolingAndDischargeModeRatedTotalEvaporatorCoolingCapacityW;

		private string _Field_CoolingAndDischargeModeEvaporatorCapacitySizingFactor = @"This field is used if the previous input field is set to autocalculate. This sizing factor is multiplied by the Cooling Only Mode Rated Total Evaporator Cooling Capacity to obtain a scaled value for Cooling and Discharge Mode Rated Total Evaporator Cooling Capacity, in Watts. If this field is left blank the default values is 1.0.";
		public static string Field_CoolingAndDischargeModeEvaporatorCapacitySizingFactor => Value._Field_CoolingAndDischargeModeEvaporatorCapacitySizingFactor;

		private string _Field_CoolingAndDischargeModeRatedStorageDischargingCapacity = @"This field is used to specify the total, full load discharging capacity, in Watts, of the TES coil at rated conditions, while operating in Cooling And Discharge Mode. The rating conditions are air entering the cooling coil at 26.7 ??C drybulb, 19.4 ??C wetbulb and air entering the outdoor condenser section at 35 ??C drybulb and 23.9 ??C wetbulb, the air flow rate specified in Rated Evaporator Air Flow Rate, and the state of TES at either the Fluid Storage Tank Rating Temperature (for water or fluid storage type) or an ice fraction of 0.5 (for ice storage type). Capacity should be net (i.e.~any ancillary equipment inside the package needed for discharging is included). The Cooling and Discharge Mode has two capacities, this second one is for discharging and would typically be for a heat transfer loop operating between the TES tank and a coil in series with the evaporator. This field is required if Cooling And Discharge Mode is available.

This field is autocalculatable. When autocalculating the capacity, the following sizing factor field is used to scale this capacity relative to the Cooling Only Mode Rated Total Evaporator Cooling Capacity.";
		public static string Field_CoolingAndDischargeModeRatedStorageDischargingCapacity => Value._Field_CoolingAndDischargeModeRatedStorageDischargingCapacity;

		private string _Field_CoolingAndDischargeModeStorageDischargeCapacitySizingFactor = @"This field is used if the previous input field is set to autocalculate. This sizing factor is multiplied by the Cooling Only Mode Rated Total Evaporator Cooling Capacity to obtain a scaled value for Cooling and Discharge Mode Rated Storage Discharging Capacity, in Watts. If this field is left blank the default value is 1.0.";
		public static string Field_CoolingAndDischargeModeStorageDischargeCapacitySizingFactor => Value._Field_CoolingAndDischargeModeStorageDischargeCapacitySizingFactor;

		private string _Field_CoolingAndDischargeModeRatedSensibleHeatRatio = @"This field is used to specify the sensible heat ratio (SHR) at rating conditions while operating in Cooling And Discharge Mode. SHR is the sensible cooling capacity divided by the total (sensible plus latent) cooling capacity and is dimensionless. The rating conditions are air entering the cooling coil at 26.7 ??C drybulb, 19.4 ??C wetbulb, air entering the outdoor condenser section at 35 ??C drybulb and 23.9 ??C wetbulb, cooling coil air flow rate specified in Rated Evaporator Air Flow Rate, and the state of TES at either the Fluid Storage Tank Rating Temperature (for water or fluid storage type) or an ice fraction of 0.5 (for ice storage type). Both the sensible and total cooling capacities used to define the rated SHR should be gross and not include supply fan heat. The packaged TES coil model uses SHR curves to modify the rated SHR as conditions move away from the rating conditions. Cooling and discharge mode may have two separate coils in series all contained within the package and this SHR should be for the combined performance of the entire package. This field is only used if Cooling And Discharge Mode is available. If this input is left blank, the default is 0.7.";
		public static string Field_CoolingAndDischargeModeRatedSensibleHeatRatio => Value._Field_CoolingAndDischargeModeRatedSensibleHeatRatio;

		private string _Field_CoolingAndDischargeModeCoolingRatedCOP = @"This field is used to specify the coefficient of performance (COP) at rating conditions while operating in Cooling And Discharge Mode to cool air at the evaporator. COP is the total cooling power output in watts divided by the electric power input in watts and is dimensionless. The rating conditions are air entering the cooling coil at 26.7 ??C drybulb, 19.4 ??C wetbulb, air entering the outdoor condenser section at 35 ??C drybulb and 23.9 ??C wetbulb, cooling coil air flow rate specified in Rated Evaporator Air Flow Rate, and the state of TES at either the Fluid Storage Tank Rating Temperature (for water or fluid storage type) or an ice fraction of 0.5 (for ice storage type). The electric input power includes power for the compressor(s), condenser fan(s), and internal controls but does not include the electric power for the supply fan (which is modeled separately in EnergyPlus). The total cooling power output is the same as the value for the Cooling And Discharge Mode Rated Total Evaporator Cooling Capacity and is gross cooling without the fan heat. The Cooling And Discharge Mode has two COP values and this first COP is for evaporator cooling and would typically be for a heat engine operating between the condenser and the evaporator. This field is only used if Cooling And Discharge Mode is available. If this input is left blank, the default is 3.0.";
		public static string Field_CoolingAndDischargeModeCoolingRatedCOP => Value._Field_CoolingAndDischargeModeCoolingRatedCOP;

		private string _Field_CoolingAndDischargeModeDischargingRatedCOP = @"This field is used to specify the coefficient of performance (COP) at rating conditions while operating in Cooling And Discharge Mode to discharge the TES. COP is the total cooling power output in watts divided by the electric power input in watts and is dimensionless. The rating conditions are air entering the cooling coil at 26.7 ??C drybulb, 19.4 ??C wetbulb, air entering the outdoor condenser section at 35 ??C drybulb and 23.9 ??C wetbulb, cooling coil air flow rate specified in Rated Evaporator Air Flow Rate, and the state of TES at either the Fluid Storage Tank Rating Temperature (for water or fluid storage type) or an ice fraction of 0.5 (for ice storage type). The electric input power includes power for the compressor or circulation pumps and internal controls. The discharging power output is the same as the value for the Cooling And Discharge Mode Rated Storage Discharging Capacity and is net discharging including any internal equipment. The Cooling And Discharge Mode has two COP values and this second COP is for discharging and would typically be for a heat transfer loop operating between the TES tank and a coil in series with the evaporator. This field is only used if Cooling And Discharge Mode is available. If this input is left blank, the default is 3.0.";
		public static string Field_CoolingAndDischargeModeDischargingRatedCOP => Value._Field_CoolingAndDischargeModeDischargingRatedCOP;

		private string _Field_CoolingAndDischargeModeTotalEvaporatorCoolingCapacityFunctionOfTemperatureCurveName = @"This field is the name of a separate performance curve object that parameterizes the variation of the total cooling capacity as a function of (1) the wetbulb temperature of air entering the evaporator section of the TES coil, (2) the drybulb temperature of the air entering the condenser section, and (3) the state of TES tank (in C or fraction). The performance curve can be any curve or table based on three independent variables, x, y, and z, including: Curve:Triquadratic and Table:MultiVariableLookup. The x values for the performance curve are the wetbulb temperature of air entering the evaporator section. The y values for the performance curve are the drybulb temperature of air entering the condenser section (which if using evaporatively-cooled condenser the temperature will be adjusted to approach the wetbulb temperature depending on effectiveness). The z values are the state of the TES tank which are the tank s temperature for water or fluid storage type or the storage fraction for ice storage types. The performance curve is normalized to have the value of 1.0 at the rating point which is defined to be x = 19.4 ??C, y = 35.0 ??C, and z = 0.5 for Ice storage type or z = Fluid Storage Tank Rating Temperature when storage type is Water or UserDefinedFluidType. The result of the curve is multiplied by Cooling And Discharge Mode Rated Total Evaporator Cooling Capacity to model capacity at temperatures away from the rating point. This field is required if Cooling And Discharge Mode is available.";
		public static string Field_CoolingAndDischargeModeTotalEvaporatorCoolingCapacityFunctionOfTemperatureCurveName => Value._Field_CoolingAndDischargeModeTotalEvaporatorCoolingCapacityFunctionOfTemperatureCurveName;

		private string _Field_CoolingAndDischargeModeTotalEvaporatorCoolingCapacityFunctionOfFlowFractionCurveName = @"This field is the name of a separate performance curve object that parameterizes the variation of the total cooling capacity as a function of the ratio of actual air flow rate across the cooling coil to the value of the Rated Evaporator Air Flow Rate. The performance curve can be any curve or table based on one independent variable, x, including: Curve:Linear, Curve:Quadratic, Curve:Cubic, Curve:Quartic, Curve:Exponent, Curve:ExponentialSkewNormal, Curve:Sigmoid, Curve:RectuangularHyperbola1, Curve:RectangularHyperbola2, Curve:ExponentialDecay, Curve:DoubleExponentialDecay, and Table:OneIndependentVariable. The performance curve is normalized to have a value of 1.0 at the rating point which is defined to be x = 1.0. The result of the curve is multiplied by the Cooling And Discharge Mode Rated Total Evaporator Cooling Capacity to model capacity at air flow rates away from the rating point. This field is required if Cooling And Discharge Mode is available.";
		public static string Field_CoolingAndDischargeModeTotalEvaporatorCoolingCapacityFunctionOfFlowFractionCurveName => Value._Field_CoolingAndDischargeModeTotalEvaporatorCoolingCapacityFunctionOfFlowFractionCurveName;

		private string _Field_CoolingAndDischargeModeEvaporatorEnergyInputRatioFunctionOfTemperatureCurveName = @"This field is the name of a separate performance curve object that parameterizes the variation of the energy input ratio (EIR) for evaporator cooling as a function of (1) the wetbulb temperature of air entering the evaporator section of the TES coil, (2) the drybulb temperature of the air entering the condenser section, and (3) the state of TES tank (in C or fraction). The performance curve can be any curve or table based on three independent variables, x, y, and z, including: Curve:Triquadratic and Table:MultiVariableLookup. The x values for the performance curve are the wetbulb temperature of air entering the evaporator section. The y values for the performance curve are the drybulb temperature of air entering the condenser section (which if using evaporatively-cooled condenser the temperature will be adjusted to approach the wetbulb temperature depending on effectiveness). The z values are the state of the TES tank which are the tank s temperature for water or fluid storage type or the storage fraction for ice storage types. The performance curve is normalized to have the value of 1.0 at the rating point which is defined to be x = 19.4 ??C, y = 35.0 ??C, and z = 0.5 for Ice storage type or z = Fluid Storage Tank Rating Temperature when storage type is Water or UserDefinedFluidType. The result of this curve is multiplied by the inverse of the Cooling And Discharge Mode Cooling Rated COP to model electric energy consumption at temperatures away from the rating point. This field is required if Cooling And Discharge Mode is available.";
		public static string Field_CoolingAndDischargeModeEvaporatorEnergyInputRatioFunctionOfTemperatureCurveName => Value._Field_CoolingAndDischargeModeEvaporatorEnergyInputRatioFunctionOfTemperatureCurveName;

		private string _Field_CoolingAndDischargeModeEvaporatorEnergyInputRatioFunctionOfFlowFractionCurveName = @"This field is the name of a separate performance curve object that parameterizes the variation of the energy input ratio (EIR) for evaporator cooling as a function of the ratio of actual air flow rate across the cooling coil to the value of the Rated Evaporator Air Flow Rate. The performance curve can be any curve or table based on one independent variable, x, including: Curve:Linear, Curve:Quadratic, Curve:Cubic, Curve:Quartic, Curve:Exponent, Curve:ExponentialSkewNormal, Curve:Sigmoid, Curve:RectuangularHyperbola1, Curve:RectangularHyperbola2, Curve:ExponentialDecay, Curve:DoubleExponentialDecay, and Table:OneIndependentVariable. The performance curve is normalized to have a value of 1.0 at the rating point which is defined to be x = 1.0. The result of the curve is multiplied by the inverse of the Cooling And Discharge Mode Cooling Rated COP to model electric energy consumption at air flow rates away from the rating point. This field is required if Cooling And discharge Mode is available.";
		public static string Field_CoolingAndDischargeModeEvaporatorEnergyInputRatioFunctionOfFlowFractionCurveName => Value._Field_CoolingAndDischargeModeEvaporatorEnergyInputRatioFunctionOfFlowFractionCurveName;

		private string _Field_CoolingAndDischargeModeEvaporatorPartLoadFractionCorrelationCurveName = @"This field is the name of a separate performance curve object that parameterizes the variation of the energy input ratio (EIR) (for evaporator cooling) as a function of the part load ratio (PLR). PLR is the ratio of current cooling load to the current cooling capacity. The performance curve can be any curve or table based on one independent variable, x, including: Curve:Linear, Curve:Quadratic, Curve:Cubic, Curve:Quartic, Curve:Exponent, Curve:ExponentialSkewNormal, Curve:Sigmoid, Curve:RectuangularHyperbola1, Curve:RectangularHyperbola2, Curve:ExponentialDecay, Curve:DoubleExponentialDecay, and Table:OneIndependentVariable. The performance curve is normalized to have a value of 1.0 at the rating point which is defined to be x = 1.0. The result of the curve is the part load fraction (PLF) and the runtime fraction of the coil is defined as PLR divided by PLF. The runtime fraction is then multiplied by the energy input ratio to model electric energy consumption at part load to account for inefficiencies because of compressor cycling. This field is required if Cooling And Discharge Mode is available.";
		public static string Field_CoolingAndDischargeModeEvaporatorPartLoadFractionCorrelationCurveName => Value._Field_CoolingAndDischargeModeEvaporatorPartLoadFractionCorrelationCurveName;

		private string _Field_CoolingAndDischargeModeStorageDischargeCapacityFunctionOfTemperatureCurveName = @"This field is the name of a separate performance curve object that parameterizes the variation of the storage discharging capacity as a function of (1) the wetbulb temperature of air entering the evaporator section of the TES coil, (2) the drybulb temperature of the air entering the condenser section, and (3) the state of TES tank (in C or fraction). The performance curve can be any curve or table based on three independent variables, x, y, and z, including: Curve:Triquadratic and Table:MultiVariableLookup. The x values for the performance curve are the wetbulb temperature of air entering the evaporator section. The y values for the performance curve are the drybulb temperature of air entering the condenser section (which if using evaporatively-cooled condenser the temperature will be adjusted to approach the wetbulb temperature depending on effectiveness). The z values are the state of the TES tank which are the tank s temperature for water or fluid storage type or the storage fraction for ice storage types. The performance curve is normalized to have the value of 1.0 at the rating point which is defined to be x = 19.4 ??C, y = 35.0 ??C, and z = 0.5 for Ice storage type or z = Fluid Storage Tank Rating Temperature when storage type is Water or UserDefinedFluidType. The result of the curve is multiplied by Cooling And Discharge Mode Rated Storage Discharging Capacity to model capacity at temperatures away from the rating point. This field is required if Cooling And Discharge Mode is available.";
		public static string Field_CoolingAndDischargeModeStorageDischargeCapacityFunctionOfTemperatureCurveName => Value._Field_CoolingAndDischargeModeStorageDischargeCapacityFunctionOfTemperatureCurveName;

		private string _Field_CoolingAndDischargeModeStorageDischargeCapacityFunctionOfFlowFractionCurveName = @"This field is the name of a separate performance curve object that parameterizes the variation of the storage discharge capacity as a function of the ratio of actual air flow rate across the cooling coil to the value of the Rated Evaporator Air Flow Rate. The performance curve can be any curve or table based on one independent variable, x, including: Curve:Linear, Curve:Quadratic, Curve:Cubic, Curve:Quartic, Curve:Exponent, Curve:ExponentialSkewNormal, Curve:Sigmoid, Curve:RectuangularHyperbola1, Curve:RectangularHyperbola2, Curve:ExponentialDecay, Curve:DoubleExponentialDecay, and Table:OneIndependentVariable. The performance curve is normalized to have a value of 1.0 at the rating point which is defined to be x = 1.0. The result of the curve is multiplied by the Cooling And Discharge Mode Rated Storage Discharging Capacity to model capacity at air flow rates away from the rating point. This field is required if Cooling And Discharge Mode is available.";
		public static string Field_CoolingAndDischargeModeStorageDischargeCapacityFunctionOfFlowFractionCurveName => Value._Field_CoolingAndDischargeModeStorageDischargeCapacityFunctionOfFlowFractionCurveName;

		private string _Field_CoolingAndDischargeModeStorageDischargeCapacityFunctionOfTotalEvaporatorPLRCurveName = @"This field is the name of a separate performance curve object that parameterizes the variation of the storage discharging capacity as a function of part load ratio (PLR) at the evaporator. PLR is the ratio of current evaporator cooling load to the current evaporator cooling capacity. This curve allows varying the storage discharging capacity based on loads at the evaporator. The performance curve can be any curve or table based on one independent variable, x, including: Curve:Linear, Curve:Quadratic, Curve:Cubic, Curve:Quartic, Curve:Exponent, Curve:ExponentialSkewNormal, Curve:Sigmoid, Curve:RectuangularHyperbola1, Curve:RectangularHyperbola2, Curve:ExponentialDecay, Curve:DoubleExponentialDecay, and Table:OneIndependentVariable. The performance curve is normalized to have a value of 1.0 at the rating point which is defined to be x = 1.0. The result of the curve is multiplied by Cooling And Discharge Mode Rated Storage Discharging Capacity to model capacity at different evaporator PLR values. This field is required if Cooling And Discharge Mode is available.";
		public static string Field_CoolingAndDischargeModeStorageDischargeCapacityFunctionOfTotalEvaporatorPLRCurveName => Value._Field_CoolingAndDischargeModeStorageDischargeCapacityFunctionOfTotalEvaporatorPLRCurveName;

		private string _Field_CoolingAndDischargeModeStorageEnergyInputRatioFunctionOfTemperatureCurveName = @"This field is the name of a separate performance curve object that parameterizes the variation of the energy input ratio (EIR) for discharging as a function of (1) the wetbulb temperature of air entering the evaporator section of the TES coil, (2) the drybulb temperature of the air entering the condenser section, and (3) the state of TES tank (in C or fraction). The performance curve can be any curve or table based on three independent variables, x, y, and z, including: Curve:Triquadratic and Table:MultiVariableLookup. The x values for the performance curve are the wetbulb temperature of air entering the evaporator section. The y values for the performance curve are the drybulb temperature of air entering the condenser section (which if using evaporatively-cooled condenser the temperature will be adjusted to approach the wetbulb temperature depending on effectiveness). The z values are the state of the TES tank which are the tank s temperature for water or fluid storage type or the storage fraction for ice storage types. The performance curve is normalized to have the value of 1.0 at the rating point which is defined to be x = 19.4 ??C, y = 35.0 ??C, and z = 0.5 for Ice storage type or z = Fluid Storage Tank Rating Temperature when storage type is Water or UserDefinedFluidType. The result of this curve is multiplied by the inverse of the Cooling And Discharge Mode Discharging Rated COP to model electric energy consumption at temperatures away from the rating point. This field is required if Cooling And Discharge Mode is available.";
		public static string Field_CoolingAndDischargeModeStorageEnergyInputRatioFunctionOfTemperatureCurveName => Value._Field_CoolingAndDischargeModeStorageEnergyInputRatioFunctionOfTemperatureCurveName;

		private string _Field_CoolingAndDischargeModeStorageEnergyInputRatioFunctionOfFlowFractionCurveName = @"This field is the name of a separate performance curve object that parameterizes the variation of the energy input ratio (EIR) for discharging as a function of the ratio of actual air flow rate across the cooling coil to the value of the Rated Evaporator Air Flow Rate. The performance curve can be any curve or table based on one independent variable, x, including: Curve:Linear, Curve:Quadratic, Curve:Cubic, Curve:Quartic, Curve:Exponent, Curve:ExponentialSkewNormal, Curve:Sigmoid, Curve:RectuangularHyperbola1, Curve:RectangularHyperbola2, Curve:ExponentialDecay, Curve:DoubleExponentialDecay, and Table:OneIndependentVariable. The performance curve is normalized to have a value of 1.0 at the rating point which is defined to be x = 1.0. The result of the curve is multiplied by the inverse of the Cooling And Discharge Mode Discharging Rated COP to model electric energy consumption at air flow rates away from the rating point. This field is required if Cooling And Discharge Mode is available.";
		public static string Field_CoolingAndDischargeModeStorageEnergyInputRatioFunctionOfFlowFractionCurveName => Value._Field_CoolingAndDischargeModeStorageEnergyInputRatioFunctionOfFlowFractionCurveName;

		private string _Field_CoolingAndDischargeModeStorageEnergyPartLoadFractionCorrelationCurveName = @"This field is the name of a separate performance curve object that parameterizes the variation of the energy input ratio (EIR) (for storage discharging) as a function of the part load ratio (PLR). PLR is the ratio of current cooling load to the current cooling capacity (at the evaporator). The performance curve can be any curve or table based on one independent variable, x, including: Curve:Linear, Curve:Quadratic, Curve:Cubic, Curve:Quartic, Curve:Exponent, Curve:ExponentialSkewNormal, Curve:Sigmoid, Curve:RectuangularHyperbola1, Curve:RectangularHyperbola2, Curve:ExponentialDecay, Curve:DoubleExponentialDecay, and Table:OneIndependentVariable. The performance curve is normalized to have a value of 1.0 at the rating point which is defined to be x = 1.0. The result of the curve is the part load fraction (PLF) and the runtime fraction is defined as PLR divided by PLF. The runtime fraction is then multiplied by the energy input ratio to model electric energy consumption at part load to account for inefficiencies because of compressor cycling. This field is required if Cooling And Discharge Mode is available.";
		public static string Field_CoolingAndDischargeModeStorageEnergyPartLoadFractionCorrelationCurveName => Value._Field_CoolingAndDischargeModeStorageEnergyPartLoadFractionCorrelationCurveName;

		private string _Field_CoolingAndDischargeModeSensibleHeatRatioFunctionOfTemperatureCurveName = @"This field is the name of a separate performance curve object that parameterizes the variation of the sensible heat ratio (SHR) as a function of temperature and optionally state of TES tank. The user can enter the name of a curve or table object that has either two or three independent variables.

For a curve or table with two independent variables the SHR is a function of (1) the wetbulb temperature of air entering the evaporator section of the TES coil and (2) the drybulb temperature of the air entering the evaporator section. The performance curve can be any curve or table based on two independent variables, x and y, including: Curve:Biquadratic, Table:TwoIndependentVariables, Curve:Bicubic, and Curve:QuadraticLinear. The x values for the performance curve are the wetbulb temperature of air entering the evaporator section. The y values for the performance curve are the drybulb temperature of air entering the evaporator section.

For a curve or table with three independent variables the SHR is a function of (1) the wetbulb temperature of air entering the evaporator section of the TES coil, (2) the drybulb temperature of the air entering the evaporator section and (3) the state of TES tank (in C or fraction). The performance curve can be any curve or table based on three independent variables, x, y, and z, including: Curve:Triquadratic and Table:MultiVariableLookup. The x and y values for the curve are the same as for two independent variables while the z values are the state of the TES tank which are the tank s temperature for water or fluid storage type or the storage fraction for ice storage types.

The performance curve is normalized to have a value of 1.0 at the rating point which is defined to be x = 19.4 ??C, y = 26.7 ??C, and z = 0.5 for Ice storage type or z = Fluid Storage Tank Rating Temperature when storage type is Water or UserDefinedFluidType. The result of the curve is multiplied by the Cooling And Discharge Mode Rated Sensible Heat Ratio to model the SHR at coil entering temperatures that differ from the rating point. This field is required if Cooling And Discharge Mode is available.";
		public static string Field_CoolingAndDischargeModeSensibleHeatRatioFunctionOfTemperatureCurveName => Value._Field_CoolingAndDischargeModeSensibleHeatRatioFunctionOfTemperatureCurveName;

		private string _Field_CoolingAndDischargeModeSensibleHeatRatioFunctionOfFlowFractionCurveName = @"This field is the name of a separate performance curve object that parameterizes the variation of the sensible heat ratio (SHR) as a function of the ratio of actual air flow rate across the cooling coil to the value of the Rated Evaporator Air Flow Rate. The performance curve can be any curve or table based on one independent variable, x, including: Curve:Linear, Curve:Quadratic, Curve:Cubic, Curve:Quartic, Curve:Exponent, Curve:ExponentialSkewNormal, Curve:Sigmoid, Curve:RectuangularHyperbola1, Curve:RectangularHyperbola2, Curve:ExponentialDecay, Curve:DoubleExponentialDecay, and Table:OneIndependentVariable. The performance curve is normalized to have a value of 1.0 at the rating point which is defined to be x = 1.0. The result of the curve is multiplied by the Cooling And Discharge Mode Rated Sensible Heat Ratio to model the SHR at coil air flow rates that differ from the rating point. This field is required if Cooling And Discharge Mode is available.";
		public static string Field_CoolingAndDischargeModeSensibleHeatRatioFunctionOfFlowFractionCurveName => Value._Field_CoolingAndDischargeModeSensibleHeatRatioFunctionOfFlowFractionCurveName;

		private string _Field_ChargeOnlyModeAvailable = @"This field is used to indicate if the packaged TES coil includes a mode with only charging of the TES tank. The choices are Yes or No. This field is required.";
		public static string Field_ChargeOnlyModeAvailable => Value._Field_ChargeOnlyModeAvailable;

		private string _Field_ChargeOnlyModeRatedStorageChargingCapacityW = @"This field is used to specify the total, full load charging capacity, in Watts, of the TES coil at rated conditions, while operating in Charge Only Mode. The rating conditions are air entering the outdoor condenser section at 35 ??C drybulb and 23.9 ??C wetbulb and the state of TES at either the Fluid Storage Tank Rating Temperature (for water or fluid storage type) or an ice fraction of 0.5 (for ice storage type). Capacity should be net (i.e.~any ancillary equipment inside the package needed for charging is included). The Charge Only Mode capacity would typically be for a heat engine operating between the condenser and the TES tank. This field is required if Charge Only Mode is available.

This field is autocalculatable. When autocalculating the capacity, the following sizing factor field is used to scale this capacity relative to the Cooling Only Mode Rated Total Evaporator Cooling Capacity.";
		public static string Field_ChargeOnlyModeRatedStorageChargingCapacityW => Value._Field_ChargeOnlyModeRatedStorageChargingCapacityW;

		private string _Field_ChargeOnlyModeCapacitySizingFactor = @"This field is used if the previous input field is set to autocalculate. This sizing factor is multiplied by the Cooling Only Mode Rated Total Evaporator Cooling Capacity to obtain a scaled value for Charge Only Mode Rated Storage Charging Capacity, in Watts. If this field is left blank the default values is 1.0.";
		public static string Field_ChargeOnlyModeCapacitySizingFactor => Value._Field_ChargeOnlyModeCapacitySizingFactor;

		private string _Field_ChargeOnlyModeChargingRatedCOP = @"This field is used to specify the coefficient of performance (COP) at rating conditions while operating in Charge Only Mode to charge the TES. COP is the total cooling power output in watts divided by the electric power input in watts and is dimensionless. The rating conditions are air entering the outdoor condenser section at 35 ??C drybulb and 23.9 ??C wetbulb and the state of TES at either the Fluid Storage Tank Rating Temperature (for water or fluid storage type) or an ice fraction of 0.5 (for ice storage type). The electric input power includes power for the compressor(s), condenser fan(s), and internal controls. The charging power output is the same as the value for the Charge Only Mode Rated Storage Charging Capacity and is net charging including any internal equipment. This field is only used if Charge Only Mode is available. If this input is left blank, the default is 3.0.";
		public static string Field_ChargeOnlyModeChargingRatedCOP => Value._Field_ChargeOnlyModeChargingRatedCOP;

		private string _Field_ChargeOnlyModeStorageChargeCapacityFunctionOfTemperatureCurveName = @"This field is the name of a separate performance curve object that parameterizes the variation of the storage charging capacity as a function of (1) the drybulb temperature of the air entering the condenser section, and (2) the state of TES tank (in C or fraction). The performance curve can be any curve or table based on two independent variables, x and y, including: Curve:Biquadratic, Table:TwoIndependentVariables, Curve:Bicubic, and Curve:QuadraticLinear. The x values for the performance curve are the drybulb temperature of air entering the condenser section (which if using evaporatively-cooled condenser the temperature will be adjusted to approach the wetbulb temperature depending on effectiveness). The y values are the state of the TES tank which are the tank s temperature for water or fluid storage type or the storage fraction for ice storage types. The performance curve is normalized to have the value of 1.0 at the rating point which is defined to be x = 35.0 ??C, and y = 0.5 for Ice storage type or y = Fluid Storage Tank Rating Temperature when storage type is Water or UserDefinedFluidType. The result of the curve is multiplied by Charge Only Mode Rated Storage Charging Capacity to model capacity at temperatures away from the rating point. This field is required if Charge Only Mode is available.";
		public static string Field_ChargeOnlyModeStorageChargeCapacityFunctionOfTemperatureCurveName => Value._Field_ChargeOnlyModeStorageChargeCapacityFunctionOfTemperatureCurveName;

		private string _Field_ChargeOnlyModeStorageEnergyInputRatioFunctionOfTemperatureCurveName = @"This field is the name of a separate performance curve object that parameterizes the variation of the energy input ratio (EIR) for charging as a function of (1) the drybulb temperature of the air entering the condenser section, and (2) the state of TES tank (in C or fraction). The performance curve can be any curve or table based on two independent variables, x and y, including: Curve:Biquadratic, Table:TwoIndependentVariables, Curve:Bicubic, and Curve:QuadraticLinear. The x values for the performance curve are the drybulb temperature of air entering the condenser section (which if using evaporatively-cooled condenser the temperature will be adjusted to approach the wetbulb temperature depending on effectiveness). The y values are the state of the TES tank which are the tank s temperature for water or fluid storage type or the storage fraction for ice storage types. The performance curve is normalized to have the value of 1.0 at the rating point which is defined to be x = 35.0 ??C, and y = 0.5 for Ice storage type or y = Fluid Storage Tank Rating Temperature when storage type is Water or UserDefinedFluidType. The result of this curve is multiplied by the inverse of the Charge Only Mode Charging Rated COP to model electric energy consumption at temperatures away from the rating point. This field is required if Charge Only Mode is available.";
		public static string Field_ChargeOnlyModeStorageEnergyInputRatioFunctionOfTemperatureCurveName => Value._Field_ChargeOnlyModeStorageEnergyInputRatioFunctionOfTemperatureCurveName;

		private string _Field_DischargeOnlyModeAvailable = @"This field is used to indicate if the packaged TES coil includes a mode with only discharging of the TES tank. The choices are Yes or No. This field is required.";
		public static string Field_DischargeOnlyModeAvailable => Value._Field_DischargeOnlyModeAvailable;

		private string _Field_DischargeOnlyModeRatedStorageDischargingCapacityW = @"This field is used to specify the total, full load discharging capacity, in Watts, of the TES coil at rated conditions, while operating in Discharge Only Mode. The rating conditions are air entering the cooling coil at 26.7 ??C drybulb, 19.4 ??C wetbulb, the air flow rate specified in Rated Evaporator Air Flow Rate, and the state of TES at either the Fluid Storage Tank Rating Temperature (for water or fluid storage type) or an ice fraction of 0.5 (for ice storage type). Capacity should be net (i.e.~any ancillary equipment inside the package needed for discharging is included) with regard to TES discharge, and gross with regard to supply fan heat. Discharge Only Mode would typically be for a heat transfer loop operating between the TES tank and a coil in series with the evaporator. This field is required if Discharge Only Mode is available.

This field is autocalculatable. When autocalculating the capacity, the following sizing factor field is used to scale this capacity relative to the Cooling Only Mode Rated Total Evaporator Cooling Capacity.";
		public static string Field_DischargeOnlyModeRatedStorageDischargingCapacityW => Value._Field_DischargeOnlyModeRatedStorageDischargingCapacityW;

		private string _Field_DischargeOnlyModeCapacitySizingFactor = @"This field is used if the previous input field is set to autocalculate. This sizing factor is multiplied by the Cooling Only Mode Rated Total Evaporator Cooling Capacity to obtain a scaled value for Discharge Only Mode Rated Storage Discharging Capacity, in Watts. If this field is left blank the default value is 1.0.";
		public static string Field_DischargeOnlyModeCapacitySizingFactor => Value._Field_DischargeOnlyModeCapacitySizingFactor;

		private string _Field_DischargeOnlyModeRatedSensibleHeatRatio = @"This field is used to specify the sensible heat ratio (SHR) at rating conditions while operating in Discharge Only Mode. SHR is the sensible cooling capacity divided by the total (sensible plus latent) cooling capacity and is dimensionless. The rating conditions are air entering the cooling coil at 26.7 ??C drybulb, 19.4 ??C wetbulb, cooling coil air flow rate specified in Rated Evaporator Air Flow Rate, and the state of TES at either the Fluid Storage Tank Rating Temperature (for water or fluid storage type) or an ice fraction of 0.5 (for ice storage type). Both the sensible and total cooling capacities used to define the rated SHR should be gross and not include supply fan heat. The packaged TES coil model uses SHR curves to modify the rated SHR as conditions move away from the rating conditions. This field is only used if Discharge Only Mode is available. If this input is left blank, the default is 0.7.";
		public static string Field_DischargeOnlyModeRatedSensibleHeatRatio => Value._Field_DischargeOnlyModeRatedSensibleHeatRatio;

		private string _Field_DischargeOnlyModeRatedCOP = @"This field is used to specify the coefficient of performance (COP) at rating conditions while operating in Discharge Only Mode to discharge the TES. COP is the total cooling power output in watts divided by the electric power input in watts and is dimensionless. The rating conditions are air entering the cooling coil at 26.7 ??C drybulb, 19.4 ??C wetbulb, cooling coil air flow rate specified in Rated Evaporator Air Flow Rate, and the state of TES at either the Fluid Storage Tank Rating Temperature (for water or fluid storage type) or an ice fraction of 0.5 (for ice storage type). The electric input power includes power for the compressor or circulation pumps and internal controls. The discharging power output is the same as the value for the Discharge Only Mode Rated Storage Discharging Capacity and is net discharging including any internal equipment. This field is only used if Discharge Only Mode is available. If this input is left blank, the default is 3.0.";
		public static string Field_DischargeOnlyModeRatedCOP => Value._Field_DischargeOnlyModeRatedCOP;

		private string _Field_DischargeOnlyModeStorageDischargeCapacityFunctionOfTemperatureCurveName = @"This field is the name of a separate performance curve object that parameterizes the variation of the storage discharging capacity as a function of (1) the wetbulb temperature of air entering the evaporator section of the TES coil, and (2) the state of TES tank (in C or fraction). The performance curve can be any curve or table based on two independent variables, x and y, including: Curve:Biquadratic, Table:TwoIndependentVariables, Curve:Bicubic, and Curve:QuadraticLinear. The x values for the performance curve are the wetbulb temperature of air entering the evaporator section. The y values are the state of the TES tank which are the tank s temperature for water or fluid storage type or the storage fraction for ice storage types. The performance curve is normalized to have the value of 1.0 at the rating point which is defined to be x = 19.4 ??C and y = 0.5 for Ice storage type or y = Fluid Storage Tank Rating Temperature when storage type is Water or UserDefinedFluidType. The result of the curve is multiplied by Discharge Only Mode Rated Storage Discharging Capacity to model capacity at temperatures away from the rating point. This field is required if Discharge Only Mode is available.";
		public static string Field_DischargeOnlyModeStorageDischargeCapacityFunctionOfTemperatureCurveName => Value._Field_DischargeOnlyModeStorageDischargeCapacityFunctionOfTemperatureCurveName;

		private string _Field_DischargeOnlyModeStorageDischargeCapacityFunctionOfFlowFractionCurveName = @"This field is the name of a separate performance curve object that parameterizes the variation of the storage discharge capacity as a function of the ratio of actual air flow rate across the cooling coil to the value of the Rated Evaporator Air Flow Rate. The performance curve can be any curve or table based on one independent variable, x, including: Curve:Linear, Curve:Quadratic, Curve:Cubic, Curve:Quartic, Curve:Exponent, Curve:ExponentialSkewNormal, Curve:Sigmoid, Curve:RectuangularHyperbola1, Curve:RectangularHyperbola2, Curve:ExponentialDecay, Curve:DoubleExponentialDecay, and Table:OneIndependentVariable. The performance curve is normalized to have a value of 1.0 at the rating point which is defined to be x = 1.0. The result of the curve is multiplied by the Cooling Discharge Only Mode Rated Storage Discharging Capacity to model capacity at air flow rates away from the rating point. This field is required if Discharge Only Mode is available.";
		public static string Field_DischargeOnlyModeStorageDischargeCapacityFunctionOfFlowFractionCurveName => Value._Field_DischargeOnlyModeStorageDischargeCapacityFunctionOfFlowFractionCurveName;

		private string _Field_DischargeOnlyModeEnergyInputRatioFunctionOfTemperatureCurveName = @"This field is the name of a separate performance curve object that parameterizes the variation of the energy input ratio (EIR) for discharging as a function of (1) the wetbulb temperature of air entering the evaporator section of the TES coil, and (2) the state of TES tank (in C or fraction). The performance curve can be any curve or table based on two independent variables, x and y, including: Curve:Biquadratic, Table:TwoIndependentVariables, Curve:Bicubic, and Curve:QuadraticLinear. The x values for the performance curve are the wetbulb temperature of air entering the evaporator section. The y values are the state of the TES tank which are the tank s temperature for water or fluid storage type or the storage fraction for ice storage types. The performance curve is normalized to have the value of 1.0 at the rating point which is defined to be x = 19.4 ??C and y = 0.5 for Ice storage type or y = Fluid Storage Tank Rating Temperature when storage type is Water or UserDefinedFluidType. The result of this curve is multiplied by the inverse of the Discharge Only Mode Rated COP to model electric energy consumption at temperatures away from the rating point. This field is required if Discharge Only Mode is available.";
		public static string Field_DischargeOnlyModeEnergyInputRatioFunctionOfTemperatureCurveName => Value._Field_DischargeOnlyModeEnergyInputRatioFunctionOfTemperatureCurveName;

		private string _Field_DischargeOnlyModeEnergyInputRatioFunctionOfFlowFractionCurveName = @"This field is the name of a separate performance curve object that parameterizes the variation of the energy input ratio (EIR) for discharging as a function of the ratio of actual air flow rate across the cooling coil to the value of the Rated Evaporator Air Flow Rate. The performance curve can be any curve or table based on one independent variable, x, including: Curve:Linear, Curve:Quadratic, Curve:Cubic, Curve:Quartic, Curve:Exponent, Curve:ExponentialSkewNormal, Curve:Sigmoid, Curve:RectuangularHyperbola1, Curve:RectangularHyperbola2, Curve:ExponentialDecay, Curve:DoubleExponentialDecay, and Table:OneIndependentVariable. The performance curve is normalized to have a value of 1.0 at the rating point which is defined to be x = 1.0. The result of the curve is multiplied by the inverse of the Discharge Only Mode Rated COP to model electric energy consumption at air flow rates away from the rating point. This field is required if Discharge Only Mode is available.";
		public static string Field_DischargeOnlyModeEnergyInputRatioFunctionOfFlowFractionCurveName => Value._Field_DischargeOnlyModeEnergyInputRatioFunctionOfFlowFractionCurveName;

		private string _Field_DischargeOnlyModePartLoadFractionCorrelationCurveName = @"This field is the name of a separate performance curve object that parameterizes the variation of the energy input ratio (EIR) (for storage discharging) as a function of the part load ratio (PLR). PLR is the ratio of current cooling load to the current cooling capacity. The performance curve can be any curve or table based on one independent variable, x, including: Curve:Linear, Curve:Quadratic, Curve:Cubic, Curve:Quartic, Curve:Exponent, Curve:ExponentialSkewNormal, Curve:Sigmoid, Curve:RectuangularHyperbola1, Curve:RectangularHyperbola2, Curve:ExponentialDecay, Curve:DoubleExponentialDecay, and Table:OneIndependentVariable. The performance curve is normalized to have a value of 1.0 at the rating point which is defined to be x = 1.0. The result of the curve is the part load fraction (PLF) and the runtime fraction is defined as PLR divided by PLF. The runtime fraction is then multiplied by the energy input ratio to model electric energy consumption at part load to account for inefficiencies because of compressor cycling. This field is required if Discharge Only Mode is available.";
		public static string Field_DischargeOnlyModePartLoadFractionCorrelationCurveName => Value._Field_DischargeOnlyModePartLoadFractionCorrelationCurveName;

		private string _Field_DischargeOnlyModeSensibleHeatRatioFunctionOfTemperatureCurveName = @"This field is the name of a separate performance curve object that parameterizes the variation of the sensible heat ratio (SHR) as a function of temperature and optionally state of TES tank. The user can enter the name of a curve or table object that has either two or three independent variables.

For a curve or table with two independent variables the SHR is a function of (1) the wetbulb temperature of air entering the evaporator section of the TES coil and (2) the drybulb temperature of the air entering the evaporator section. The performance curve can be any curve or table based on two independent variables, x and y, including: Curve:Biquadratic, Table:TwoIndependentVariables, Curve:Bicubic, and Curve:QuadraticLinear. The x values for the performance curve are the wetbulb temperature of air entering the evaporator section. The y values for the performance curve are the drybulb temperature of air entering the evaporator section.

For a curve or table with three independent variables the SHR is a function of (1) the wetbulb temperature of air entering the evaporator section of the TES coil, (2) the drybulb temperature of the air entering the evaporator section and (3) the state of TES tank (in C or fraction). The performance curve can be any curve or table based on three independent variables, x, y, and z, including: Curve:Triquadratic and Table:MultiVariableLookup. The x and y values for the curve are the same as for two independent variables while the z values are the state of the TES tank which are the tank s temperature for water or fluid storage type or the storage fraction for ice storage types.

The performance curve is normalized to have a value of 1.0 at the rating point which is defined to be x = 19.4 ??C, y = 26.7 ??C, and z = 0.5 for Ice storage type or z = Fluid Storage Tank Rating Temperature when storage type is Water or UserDefinedFluidType. The result of the curve is multiplied by the Discharge Only Mode Rated Sensible Heat Ratio to model the SHR at coil entering temperatures that differ from the rating point. This field is required if Discharge Only Mode is available.";
		public static string Field_DischargeOnlyModeSensibleHeatRatioFunctionOfTemperatureCurveName => Value._Field_DischargeOnlyModeSensibleHeatRatioFunctionOfTemperatureCurveName;

		private string _Field_DischargeOnlyModeSensibleHeatRatioFunctionOfFlowFractionCurveName = @"This field is the name of a separate performance curve object that parameterizes the variation of the sensible heat ratio (SHR) as a function of the ratio of actual air flow rate across the cooling coil to the value of the Rated Evaporator Air Flow Rate. The performance curve can be any curve or table based on one independent variable, x, including: Curve:Linear, Curve:Quadratic, Curve:Cubic, Curve:Quartic, Curve:Exponent, Curve:ExponentialSkewNormal, Curve:Sigmoid, Curve:RectuangularHyperbola1, Curve:RectangularHyperbola2, Curve:ExponentialDecay, Curve:DoubleExponentialDecay, and Table:OneIndependentVariable. The performance curve is normalized to have a value of 1.0 at the rating point which is defined to be x = 1.0. The result of the curve is multiplied by the Discharge Only Mode Rated Sensible Heat Ratio to model the SHR at coil air flow rates that differ from the rating point. This field is required if Discharge Only Mode is available.";
		public static string Field_DischargeOnlyModeSensibleHeatRatioFunctionOfFlowFractionCurveName => Value._Field_DischargeOnlyModeSensibleHeatRatioFunctionOfFlowFractionCurveName;

		private string _Field_AncillaryElectricPowerW = @"This field is the electric power level for miscellaneous ancillary controls and standby draws, in Watts. This power is not linked to any particular operating mode and will always be on, except when the device is scheduled to not be available by the Availability Schedule. This field is optional.";
		public static string Field_AncillaryElectricPowerW => Value._Field_AncillaryElectricPowerW;

		private string _Field_ColdWeatherOperationMinimumOutdoorAirTemperatureC = @"This field is the outdoor temperature at which the device operates additional electric components to protect from cold weather, in Degrees Celsius. When the outdoor temperature is below this value, the power draw specified in the next field will be turned on. The outdoor temperature is obtained from the node specified in the input field called Storage Tank Ambient Temperature Node Name.";
		public static string Field_ColdWeatherOperationMinimumOutdoorAirTemperatureC => Value._Field_ColdWeatherOperationMinimumOutdoorAirTemperatureC;

		private string _Field_ColdWeatherOperationAncillaryPowerW = @"This field is the electric power level for cold weather protection. Cold weather protection is in effect whenever the outdoor temperature is lower than the limit set in the previous field, except when the device is scheduled to not be available by the Availability Schedule.";
		public static string Field_ColdWeatherOperationAncillaryPowerW => Value._Field_ColdWeatherOperationAncillaryPowerW;

		private string _Field_CondenserAirInletNodeName = @"This field is the name of system node that serves as the inlet to the condenser section of the packaged TES coil. This node is typically specified to be an outdoor air node. The conditions exposed to the condenser are obtained from this system node. This field is required.";
		public static string Field_CondenserAirInletNodeName => Value._Field_CondenserAirInletNodeName;

		private string _Field_CondenserAirOutletNodeName = @"This field is the name of system node that serves as the outlet to the condenser section of the packaged TES coil. This node is typically not connected to anything else. The conditions leaving the condenser are applied to this system node. This field is required.";
		public static string Field_CondenserAirOutletNodeName => Value._Field_CondenserAirOutletNodeName;

		private string _Field_CondenserDesignAirFlowRateM3S = @"This field is the rate of air flow through the condenser section, in m^{3}/s. The model assumes constant, single-speed condenser fans. The flow rate is not used to determine coil operation but is used to determine the conditions leaving the condenser section. This field is required, for both air-cooled and evaporatively-cooled condenser types.

This field is autocalulatable. When autocalculated, the design flow rate is determined using the sizing factor in the following input field.";
		public static string Field_CondenserDesignAirFlowRateM3S => Value._Field_CondenserDesignAirFlowRateM3S;

		private string _Field_CondenserAirFlowSizingFactor = @"This field is used if the previous input field is set to autocalculate. This sizing factor is multiplied by the Rated Evaporator Air Flow Rate to obtain a scaled value for Condenser Design Air Flow Rate, in m^{3}/s. If this field is left blank the default value is 1.0.";
		public static string Field_CondenserAirFlowSizingFactor => Value._Field_CondenserAirFlowSizingFactor;

		private string _Field_CondenserType = @"This field is the type of condenser used by the TES coil. There are two options, {AirCooled} or {EvaporativelyCooled}. The default is AirCooled. The next six put fields are used when the condenser section is evaporatively cooled.";
		public static string Field_CondenserType => Value._Field_CondenserType;

		private string _Field_EvaporativeCondenserEffectiveness = @"This field is the wetbulb effectiveness for the evaporatively-cooled condenser. The effectiveness is used to model the temperature of air exposed to the condenser section as follows:

\begin{equation}
{T_{Cond\,\;inlet}} = \left( {{T_{wb,o}}} \right) + \left( {1 - EvapCondEffectiveness} \right)\left( {{T_{db,o}} - {T_{wb,o}}} \right)
\end{equation}

where


       ${T_{cond\;inlet}}$ = the temperature of air entering the condenser section, in  &deg;C. This value will be used when evaluating performance curves that depend on the drybulb entering the condenser section.



       ${T_{wb,o}}$ = the wetbulb temperature of outdoor air, in  &deg;C



       ${T_{db,o}}$ = the drybulb temperature of outdoor air, in  &deg;C.


This field is required if the condenser type is set to EvaporativelyCooled. If the field is left blank then a default of 0.7 is used.";
		public static string Field_EvaporativeCondenserEffectiveness => Value._Field_EvaporativeCondenserEffectiveness;

		private string _Field_EvaporativeCondenserPumpRatedPowerConsumptionW = @"This field is the rated power of the evaporative condenser water pump, in Watts. This value is used to calculate the power required to pump the water used to evaporatively cool the condenser inlet air. The default is zero, but this field is autosizable using a sizing factor of 0.004266 W of electricity per W of cooling. This field is only used when the condenser type is set to EvaporativelyCooled.";
		public static string Field_EvaporativeCondenserPumpRatedPowerConsumptionW => Value._Field_EvaporativeCondenserPumpRatedPowerConsumptionW;

		private string _Field_BasinHeaterCapacityWK = @"This input field is the capacity of the evaporative cooler water basin heater for freeze protection in Watts per Kelvin. This field is only used when the condenser type is set to EvaporativelyCooled. This field is used with the following field to determine the electricity consumption rate for freeze protection of the water in a basin needed for evaporative cooling. The basin heater electric power is equal to this field multiplied by the difference between the Basin Heater Setpoint Temperature and the outdoor drybulb temperature. The default is zero.";
		public static string Field_BasinHeaterCapacityWK => Value._Field_BasinHeaterCapacityWK;

		private string _Field_BasinHeaterSetpointTemperatureC = @"This input field contains the setpoint temperature for basin heater operation, in ??C. This field is only used when the condenser type is set to EvaporativelyCooled. The basin heater is active when the outdoor drybulb temperatures falls below this setpoint temperature. The default is 2.0 ??C.";
		public static string Field_BasinHeaterSetpointTemperatureC => Value._Field_BasinHeaterSetpointTemperatureC;

		private string _Field_BasinHeaterAvailabilityScheduleName = @"This alpha field contains the name of the basin heater operating schedule. This field is only used when the condenser type is set to EvaporativelyCooled. The basin heater operating schedule is assumed to be an on/off schedule and the heater is available to operate any time the schedule value is greater than 0. The basin heater operates whenever the schedule is on and the outdoor air drybulb is lower than the setpoint temperature in the previous field. If the field is left blank, the basin heater is available to operate throughout the simulation.";
		public static string Field_BasinHeaterAvailabilityScheduleName => Value._Field_BasinHeaterAvailabilityScheduleName;

		private string _Field_SupplyWaterStorageTankName = @"This optional field is used to describe where the TES coil obtains water used for evaporative cooling of its condenser. If blank or omitted, then the unit will obtain water directly from the mains. If the name of a Water Storage Tank object is used here, then the unit will attempt to obtain all its water from that tank. However, if the tank cannot provide all the water the condenser needs, then the unit will still operate and obtains the rest of the water it needs form the mains (referred to as Starved Water).";
		public static string Field_SupplyWaterStorageTankName => Value._Field_SupplyWaterStorageTankName;

		private string _Field_CondensateCollectionWaterStorageTankName = @"This optional field is used to describe where condensate from the coil is collected. If blank or omitted, then any coil condensate is discarded. Enter the name of a Water Storage Tank defined elsewhere and the condensate will be collected in that tank.";
		public static string Field_CondensateCollectionWaterStorageTankName => Value._Field_CondensateCollectionWaterStorageTankName;

		private string _Field_StorageTankPlantConnectionInletNodeName = @"This is the name of a system node that is the inlet to the TES tank. This field is optional and is only used if the TES tank is directly connected to a plant loop.";
		public static string Field_StorageTankPlantConnectionInletNodeName => Value._Field_StorageTankPlantConnectionInletNodeName;

		private string _Field_StorageTankPlantConnectionOutletNodeName = @"This is the name of a system node that is the inlet to the TES tank. This field is optional and is only used if the TES tank is directly connected to a plant loop.";
		public static string Field_StorageTankPlantConnectionOutletNodeName => Value._Field_StorageTankPlantConnectionOutletNodeName;

		private string _Field_StorageTankPlantConnectionDesignFlowRate = @"This field is the design flow rate for the plant connection to the TES tank, in m^{3}/s. The TES tank will make a passive request for this amount of flow. This field is required if the storage tank is connected to plant.";
		public static string Field_StorageTankPlantConnectionDesignFlowRate => Value._Field_StorageTankPlantConnectionDesignFlowRate;

		private string _Field_StorageTankPlantConnectionHeatTransferEffectiveness = @"This field specifies the heat transfer effectiveness between the plant connection and the TES tank. If the effectiveness is set to 1 then ideal heat transfer occurs, as if the fluids were completely mixed and the fluid leaving the tank is the same temperature as the tank. If the effectiveness is less than 1.0, then the leaving fluid temperature approaches that of the tank as would be the case with a heat exchanger. If left blank, the default is 0.7.";
		public static string Field_StorageTankPlantConnectionHeatTransferEffectiveness => Value._Field_StorageTankPlantConnectionHeatTransferEffectiveness;

		private string _Field_StorageTankMinimumOperatingLimitFluidTemperatureC = @"This field is used for fluid-based TES tank (Storage Type of Water or UserDefinedFluidType) to set the a lower limit on the operating temperatures, in Degrees Celsius. This value represents the temperature of the fluid-based TES tank when fully charged. This field is optional. When left blank, the model uses the lowest temperature for which fluid properties are defined.";
		public static string Field_StorageTankMinimumOperatingLimitFluidTemperatureC => Value._Field_StorageTankMinimumOperatingLimitFluidTemperatureC;

		private string _Field_StorageTankMaximumOperatingLimitFluidTemperatureC = @"This field is used for fluid-based TES tank (Storage Type of Water or UserDefinedFluidType) to set the an upper limit on the operating temperatures, in Degrees Celsius. This value represents the temperature of the fluid-based TES tank when fully discharged. This field is optional. When left blank, the model uses the highest temperature for which fluid properties are defined.";
		public static string Field_StorageTankMaximumOperatingLimitFluidTemperatureC => Value._Field_StorageTankMaximumOperatingLimitFluidTemperatureC;

	

}

	public sealed class SecondaryCoilsOfDXSystemAndHeatPump
    { 

		private string _name = @"Secondary Coils of DX System and Heat Pump";
		private string _note = @"Secondary Coils reject to or remove heat from a secondary zone as part of a DX system or an air-to-air heat pump. Secondary coil refers to a condenser of a DX system or a heat pump in cooling operating mode or an evaporator of a heat pump in heating mode. The secondary coil (e.g.~condenser) of DX system or heat pumps is commonly installed outdoor but when installed inside a zone either heat is dumped to or extracted from a secondary zone. A secondary zone is a conditioned or unconditioned zone where the secondary coil is installed. Secondary coils are not standalone DX coils but they are add-on features on existing DX coil objects. A secondary DX coil is modeled by specifying additional inputs in one of the following DX coil objects: Coil:Cooling:DX:SingleSpeed, Coil:Heating:DX:SingleSpeed, Coil:Cooling:DX:TwoSpeed, Coil:Cooling:DX:MultiSpeed, and Coil:Heating:DX:MultiSpeed. These additional inputs allow us to model the heat rejected or extracted by the secondary coil while the primary (active) coil is serving another controlled zone as shown in \protect\hyperlink{SecondaryCoilsFigure1}{Figure}. A secondary coil is not controlled directly but responds to the requirements of the primary DX coil. Heat is rejected or extracted depending on the primary DX coil operating modes. For instance, heat rejected to a secondary zone by a condenser of a DX system or a heat pump is considered as sensible only whereas the energy extracted from a secondary zone may contain sensible and latent components.

\begin{figure}[htbp]
\centering
\includegraphics{media/image903.png}
\caption{}
\end{figure}

Figure: Schematic of DX System and heat pump in cooling operating mode

Applications of this technology include: inter-zone heat pump in NTED (Dixon, 2010), and PTAC or PTHP serving Offices attached to a Warehouse, where the office partially or fully enclosed by the warehouse and the condenser is inside the Warehouse. Heat rejected or extracted by the secondary DX coil installed in a secondary zone is estimated from the DX coil models and it is considered as internal gains of the secondary zone. The capacity and electric power input of the DX system and heat pumps are determined from the operating modes of the primary cooling or heating DX coils. Calculation of a secondary coil tracks the operating modes of the primary DX coil serving the primary conditioned zone(s). Currently allowed DX coil models are single speed, two speed and multi speed DX Systems and Heat Pumps. To model secondary DX coils the condenser type should be AirCooled. There is no need to specify the condenser air inlet node. The model uses zone air node as the secondary coil air inlet node. And the fuel type in multispeed DX coils should Electricity.

{Cooling Operating Mode}: the primary DX cooling coil of a DX system serving a primary zone is active and heat is rejected by the secondary coil (condenser) into a secondary zone. The secondary zone name is specified in DX cooling coil objects. This operating mode applies to a DX cooling system and cooling operating mode of air-to-air single and multi-speed heat pumps. Heat rejected by a secondary coil (condenser) calculated at each time step becomes internal gain of the secondary zone as shown in \protect\hyperlink{SecondaryCoilsFigure2}{Figure}. Whenever a secondary zone name is specified in DX cooling coil objects, the secondary DX coil model calculation is invoked. The only input field required to invoke the secondary DX coil in cooling operating model is to add a zone name in the input field {Zone Name for Condenser Placement} in the DX cooling coil object.
";
		

		private static readonly System.Lazy<SecondaryCoilsOfDXSystemAndHeatPump> instance = new System.Lazy<SecondaryCoilsOfDXSystemAndHeatPump>(() => new SecondaryCoilsOfDXSystemAndHeatPump());
        private static SecondaryCoilsOfDXSystemAndHeatPump Value => instance.Value;
		public static string Name => Value._name;
        public static string Note => Value._note;
		private SecondaryCoilsOfDXSystemAndHeatPump(){}



}

	public sealed class SecondaryDXCoilOutput
    { 

		private string _name = @"Secondary DX Coil Output";
		private string _note = @"  HVAC, Average, Secondary Coil Heat Rejection Rate [W]

  HVAC, Average, Secondary Coil Total Heat Removal Rate [W]

  HVAC, Average, Secondary Coil Sensible Heat Removal Rate [W]

  HVAC, Average, Secondary Coil Latent Heat Removal Rate [W]

  HVAC, Average, Secondary Coil Sensible Heat Ratio 

  HVAC, Average, Secondary Coil Compressor Part Load Ratio 

";
		

		private static readonly System.Lazy<SecondaryDXCoilOutput> instance = new System.Lazy<SecondaryDXCoilOutput>(() => new SecondaryDXCoilOutput());
        private static SecondaryDXCoilOutput Value => instance.Value;
		public static string Name => Value._name;
        public static string Note => Value._note;
		private SecondaryDXCoilOutput(){}



}

	
}



